{"version":3,"sources":["hooks/useYears.ts","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/SemesterForm.tsx","components/Year.tsx","hooks/useProblems.ts","components/ErrorStack.tsx","util/validation/dates.ts","components/Scheduler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getByUUID","state","uuid","i","length","yearReducer","prev","action","next","map","x","type","semAction","targetIndex","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","courses","Map","index","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","years","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","AddCourse","props","isOpen","ReactDOM","createPortal","className","onClick","onClickClose","Form","onSubmit","onClickSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","defaultValue","defaultValues","courseName","onChange","Text","href","courseID","courseDescription","style","height","Button","variant","isEditing","document","getElementById","body","Course","display","onRemoveCourse","onClickEdit","courseReducer","set","payload","id","newState","delete","courseInit","Semester","useState","setIsOpen","setIsEditing","newCourseName","setNewCourseName","newCourseID","setNewCourseID","newCourseDescription","setNewCourseDescription","updateCourses","courseToRemove","courseToEdit","description","addedCourses","from","course","event","preventDefault","handleCourseSubmit","getUTCFullYear","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","overlayButton","useRef","sortedSemesters","useMemo","sort","a","b","getTime","Container","trigger","transitionTime","semesterProps","ref","formInit","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","problemReducer","error","message","source","problemType","realAction","splice","problem","output","initializer","ErrorStack","problems","ctr","validate","existing","validate_both_dates","validate_single_date","date","getStartingYears","Date","getFullYear","yearOne","yearTwo","hasError","Scheduler","csv","json","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","submissionAllowed","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","semesterFormInit","handleSemesterInput","newProblems","newDate","handleSemesterSubmit","setFormUuid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.7182831e.chunk.js","sourcesContent":["import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction{\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n            courses: new Map<string, CourseProps>(),\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next,removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter((semester: SemesterProps) => {\n            return semester.uuid !== removeSemester.semesterUuid; \n        });\n        next[targetIndex] = {index: next[targetIndex].index, uuid: next[targetIndex].uuid, semesters: newYear};\n        return next;\n    }case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n\n\n\nfunction clearSemesters(years: Array<YearProps>, pusher: (uuid: string, index: number) => void, semesterRemover: (uuid: string, semesterUuid: string) => void, yearRemover: (uuid: string) => void, yearUuid?: string){\n    if(yearUuid !== undefined && getByUUID(years,yearUuid) !== -1){\n        for(const semester of years[getByUUID(years,yearUuid)].semesters){\n            semesterRemover(yearUuid,semester.uuid);\n        }\n    }else if(yearUuid === undefined){\n        const newYears: YearProps[] = new Array<YearProps>();\n        for(const year of years){\n            newYears.push({semesters: [], index: year.index, uuid: year.uuid});\n            yearRemover(year.uuid);\n        }\n        for(const year of newYears){\n            pusher(year.uuid,year.index);\n        }\n    }\n}\n\ninterface Years{\n    value: Array<YearProps>;\n    push: (uuid: string, index: number) => void;\n    putSemester: (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => void;\n    removeSemester: (\n        uuid: string,\n        semesterUuid: string\n    ) => void;\n    removeYear: (\n        uuid: string\n    ) => void;\n    clear: (\n        uuid?: string\n    ) => void;\n}\n\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined ? () => {\n            return new Array<YearProps>();\n        } : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (\n        uuid: string,\n        semesterUuid: string,\n    ) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid\n        };\n        updateYears(action);\n    };\n    const removeYear = (\n        uuid: string\n    ) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid\n        };\n        updateYears(action);\n    };\n    return {value: years, push: addYear, putSemester: addSemester, removeSemester: removeSemester, removeYear: removeYear, clear: (uuid?: string) => {\n        clearSemesters(years,addYear,removeSemester,removeYear,uuid);\n    }};\n}\n\nexport default useYears;\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\n\ninterface AddNewCourseProps {\n    isOpen: boolean;\n    defaultValues: {\n        courseName: string;\n        courseID: string;\n        courseDescription: string;\n    };\n    isEditing: boolean; // if true, then we are editing an existing course\n    onClickClose: () => void;\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            {/* <div className=\"non-modal-overlay\" /> */}\n            <div className=\"modal-add-course\">\n                <button onClick={props.onClickClose}>Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.courseName}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.courseID}\n                            />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.courseDescription}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    onRemoveCourse: (courseToRemove: CourseProps) => void;\n    onClickEdit: (courseToEdit: CourseProps) => void;\n}\n\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.onRemoveCourse(props);\n                }}\n            >\n                {props.name}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useReducer, useState } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\n\ninterface CourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n    payload: CourseProps;\n}\n\n// easy access to the courses\n\nconst courseReducer = (\n    state: Map<string, CourseProps>,\n    action: CourseAction\n): Map<string, CourseProps> => {\n    switch (action.type) {\n    case \"ADD COURSE\":\n        return state.set(action.payload.id, action.payload);\n    case \"REMOVE COURSE\": {\n        const newState = new Map<string, CourseProps>(state);\n        newState.delete(action.payload.id);\n        return newState;\n    }\n    }\n};\n\n// const onRightClickCourse = (event: React.MouseEvent<HTMLDivElement>) => {\n//     event.preventDefault();\n//     console.log(\"Right Clicked\");\n// };\n\nconst courseInit = (\n    courses: Map<string, CourseProps>\n): Map<string, CourseProps> => {\n    if (courses) return courses;\n    else return new Map<string, CourseProps>();\n};\n\ninterface FullSemesterProps extends SemesterProps {\n    removeSemester: () => void;\n}\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [newCourseName, setNewCourseName] = useState<string>(\"\");\n    const [newCourseID, setNewCourseID] = useState<string>(\"\");\n    const [newCourseDescription, setNewCourseDescription] =\n        useState<string>(\"\");\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        props.courses,\n        courseInit\n    );\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        switch (event.target.name) {\n        case \"courseName\":\n            setNewCourseName(event.target.value);\n            break;\n        case \"courseID\":\n            setNewCourseID(event.target.value);\n            break;\n        case \"courseDescription\":\n            setNewCourseDescription(event.target.value);\n            break;\n        }\n    };\n    const onRemoveCourse = (courseToRemove: CourseProps) => {\n        const action: CourseAction = {\n            type: \"REMOVE COURSE\",\n            payload: courseToRemove,\n        };\n        updateCourses(action);\n    };\n\n    const onClickEdit = (courseToEdit: CourseProps) => {\n        setNewCourseName(courseToEdit.name);\n        setNewCourseDescription(courseToEdit.description);\n        setNewCourseID(courseToEdit.id);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newCourse: CourseProps = {\n            id: newCourseID,\n            name: newCourseName,\n            description: newCourseDescription,\n        };\n\n        const action: CourseAction = {\n            type: \"ADD COURSE\",\n            payload: newCourse,\n        };\n\n        updateCourses(action);\n        setNewCourseName(\"\");\n        setNewCourseDescription(\"\");\n        setNewCourseID(\"\");\n        if (isEditing) setIsEditing(false);\n    };\n    const addedCourses = Array.from(courses).map(\n        ([courseID, course]: [string, CourseProps]) => {\n            return (\n                <div key={courseID}>\n                    <Course\n                        onClickEdit={onClickEdit}\n                        onRemoveCourse={onRemoveCourse}\n                        {...course}\n                    />{\" \"}\n                </div>\n            );\n        }\n    );\n\n    return (\n        <>\n            <AddCourse\n                defaultValues={{\n                    courseName: newCourseName,\n                    courseID: newCourseID,\n                    courseDescription: newCourseDescription,\n                }}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={`Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n            >\n                {props.name}\n            </span>\n            <button\n                data-testid={`Remove Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <div className=\"courses\">{addedCourses}</div>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    canSubmit: boolean,\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}\n","import React, { ChangeEvent, FormEvent, useRef, useMemo } from \"react\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {\n    Container,\n    Row,\n    Col,\n    Popover,\n    PopoverContent,\n    Overlay,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport Semester from \"./Semester\";\nimport SemesterForm from \"./SemesterForm\";\n\ninterface FullYearProps extends YearProps {\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    formUuid: string | null;\n    setFormUuid: (newId: string | null) => void;\n    removeSemester: (semesterUuid: string) => void;\n    canSubmit: boolean;\n    clear: () => void;\n    formInit: (uuid: string | null) => void;\n}\n\nfunction Year(props: FullYearProps): JSX.Element {\n    const overlayButton = useRef(null);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters.sort((a: SemesterProps, b: SemesterProps) => {\n            return a.start.getTime() - b.start.getTime();\n        });\n    }, [props.semesters]);\n    return (\n        <Container className=\"container-sm\">\n            <Row>\n                <Col>\n                    <Collapsible\n                        trigger={\n                            <button\n                                data-testid={`Year ${props.index} label`}\n                                className=\"trigger\"\n                            >{`Year ${props.index} >`}</button>\n                        }\n                        transitionTime={200}\n                    >\n                        <Row data-testid=\"collapsible-content\">\n                            {sortedSemesters.map(\n                                (semesterProps: SemesterProps, index: number) => {\n                                    return (\n                                        <Col\n                                            data-testid={`Year ${\n                                                props.index\n                                            } semester ${index + 1}`}\n                                            key={semesterProps.uuid}\n                                        >\n                                            <Semester {...semesterProps} removeSemester={() =>{\n                                                props.removeSemester(semesterProps.uuid);\n                                            }}\n                                            />\n                                        </Col>\n                                    );\n                                }\n                            )}\n\n                            <Col>\n                                <button\n                                    data-testid={`trigger ${props.index}`}\n                                    className=\"trigger\"\n                                    ref={overlayButton}\n                                    onClick={() => {\n                                        props.formInit(\n                                            props.formUuid === props.uuid\n                                                ? null\n                                                : props.uuid\n                                        );\n                                    }}\n                                >\n                                    +\n                                </button>\n                                <Overlay\n                                    target={overlayButton}\n                                    placement=\"right-end\"\n                                    show={props.formUuid === props.uuid}\n                                    onHide={() => {\n                                        props.formInit(null);\n                                    }}\n                                    rootClose={true}\n                                    transition={false}\n                                >\n                                    <Popover id=\"popover-basic\">\n                                        <PopoverContent>\n                                            <div data-testid={`semester-form ${props.index}`}>\n                                                <SemesterForm\n                                                    canSubmit={props.canSubmit}\n                                                    handleInput={props.handleInput}\n                                                    handleSubmit={props.handleSubmit}\n                                                />\n                                            </div>\n                                        </PopoverContent>\n                                    </Popover>\n                                </Overlay>\n                            </Col>\n                        </Row>\n                    </Collapsible>\n                </Col>\n                <Col>\n                    <button onClick={props.clear} data-testid={`clear-year ${props.index}`}>Clear</button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Year;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n\n    source: string\n\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\ninterface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n\n\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    problems: Array<Problem> | null;\n}\n\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React, { ChangeEvent, FormEvent, useState} from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport CourseProps from \"../interfaces/Course\";\nimport Year from \"./Year\";\nimport useProblems, {Problem} from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport validate from \"../util/validation/dates\";\n\ninterface SchedulerProps {\n    csv?: string;\n    json?: string;\n}\n\nfunction getStartingYears(): Array<YearProps>{\n    const year = new Date().getFullYear();\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = {index: 1, uuid: uuid(), semesters: []};\n    yearOne.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year}-08-31`), end: new Date(`${year}-12-15`), courses: new Map<string, CourseProps>()});\n    yearOne.semesters.push({uuid: uuid(), name: \"spring\", start: new Date(`${year+1}-02-07`), end: new Date(`${year+1}-05-26`), courses: new Map<string, CourseProps>()});\n    const yearTwo: YearProps = {index: 2, uuid: uuid(), semesters: []};\n    yearTwo.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year+1}-08-31`), end: new Date(`${year+1}-12-15`), courses: new Map<string, CourseProps>()});\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean{\n    for(const problem of problems){\n        if(problem.error){\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears(getStartingYears);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const [submissionAllowed, setSubmissionAllowed] = useState(false);\n        const problems = useProblems();\n        const semesterFormInit = (uuid: string | null) => {\n            setCurrentForm(uuid);\n            setSubmissionAllowed(false);\n            setNewName(null);\n            setNewStart(null);\n            setNewEnd(null);\n            problems.clear(\"semester-form\");\n        };\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n            case \"season\": {\n                setNewName(event.target.value);\n                break;\n            }case \"starts\": {\n                const semesters = years.value[getByUUID(years.value,currentForm as string)].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(newDate,newEnd !== null ? new Date(newEnd) : null, semesters, \"starts\");\n                if(newEnd === null){\n                    problems.clear(\"semester-form\");\n                    if(newProblems.length === 1){\n                        problems.add(newProblems[0]);\n                    }\n                }else{\n                    problems.clear(\"semester-form\");\n                    for(const problem of newProblems){\n                        problems.add(problem);\n                    }\n                }\n                setNewStart(event.target.value);\n                break;\n            }case \"ends\": {\n                const semesters = years.value[getByUUID(years.value,currentForm as string)].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(newStart !== null ? new Date(newStart) : null,newDate, semesters, \"ends\");\n                if(newEnd === null){\n                    problems.clear(\"semester-form\");\n                    if(newProblems.length === 1){\n                        problems.add(newProblems[0]);\n                    }\n                }else{\n                    problems.clear(\"semester-form\");\n                    for(const problem of newProblems){\n                        problems.add(problem);\n                    }\n                }\n                setNewEnd(event.target.value);\n                break;\n            }\n            }\n\n        };\n        const handleSemesterSubmit = (\n            event: FormEvent<HTMLFormElement>,\n            id: string\n        ) => {\n            event.preventDefault();\n            if (newName !== null && newEnd !== null && newStart !== null) {\n                years.putSemester(\n                    id,\n                    uuid(),\n                    new Date(newStart as string),\n                    new Date(newEnd as string),\n                    newName as string\n                );\n                setNewName(null);\n                setNewStart(null);\n                setNewEnd(null);\n                setCurrentForm(null);\n            }\n        };\n        if(newName && newEnd && newStart && !submissionAllowed && !hasError(problems.value)){\n            setSubmissionAllowed(true);\n        }else if((!newName || !newEnd || !newStart || hasError(problems.value)) && submissionAllowed){\n            setSubmissionAllowed(false);\n        }\n        return (\n            <>\n                <button\n                    onClick={() => {\n                        years.clear();\n                    }}\n                    data-testid=\"clear-button\"\n                >\n                    Clear\n                </button>\n                <div>\n                    {years.value.map((props: YearProps, i: number) => {\n                        return (\n                            <div data-testid={\"Year\"} key={props.uuid}>\n                                <Year\n                                    canSubmit={submissionAllowed}\n                                    handleInput={handleSemesterInput}\n                                    handleSubmit={(\n                                        event: FormEvent<HTMLFormElement>\n                                    ) => {\n                                        handleSemesterSubmit(event, props.uuid);\n                                    }}\n                                    semesters={props.semesters}\n                                    uuid={props.uuid}\n                                    index={i + 1}\n                                    formUuid={currentForm}\n                                    setFormUuid={setCurrentForm}\n                                    removeSemester={(\n                                        semesterUuid: string\n                                    ) => {\n                                        years.removeSemester(props.uuid,semesterUuid);\n                                    }}\n                                    clear={() => {\n                                        years.clear(props.uuid);\n                                    }}\n                                    formInit={semesterFormInit}\n                                />\n                            </div>\n                        );\n                    })}\n                    <button\n                        data-testid=\"add-year-button\"\n                        onClick={() => {\n                            years.push(uuid(), years.value.length);\n                        }}\n                    >\n                        +\n                    </button>\n                </div>\n                <ErrorStack problems={problems.value}/>\n            </>\n        );\n    }\n    return <></>;\n}\n","import React from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Scheduler } from \"./components/Scheduler\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <Scheduler/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}