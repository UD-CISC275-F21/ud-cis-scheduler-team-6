{"version":3,"sources":["components/Plan.tsx","hooks/useYears.ts","hooks/useProblems.ts","components/ErrorStack.tsx","hooks/useCourses.ts","util/validation/dates.ts","components/Year/YearHeader.tsx","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year/SemesterList.tsx","components/Year/FormTrigger.tsx","components/Year/SemesterForm.tsx","components/Year/Year.tsx","components/Scheduler.tsx","util/events/SemesterFormEvents.ts","components/Requirements.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Array","Plan","props","useState","plans","setPlans","renderCard","planItem","localStorage","setItem","JSON","stringify","Card","style","width","className","Body","Title","id","to","uuid","Text","date","onClick","console","log","oldArray","window","confirm","newArray","index","indexOf","splice","deleteCard","name","years","length","copy","Date","toLocaleDateString","arr","push","map","getByUUID","state","i","yearReducer","prev","action","next","x","type","semAction","targetIndex","target","newYear1","concat","semesters","start","end","semesterUuid","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","problemReducer","newState","error","message","source","problemType","realAction","problem","output","initializer","ErrorStack","problems","ctr","ReactDOM","createPortal","document","body","courseReducer","course","newCourse","courseInit","courses","useCourses","initialCourses","updateCourses","courseList","removeCourse","validate","existing","getTime","validate_both_dates","validate_single_date","YearHeader","Container","fluid","Row","Col","md","trigger","transitionTime","children","AddCourse","isOpen","onClickClose","Form","onSubmit","onClickSubmit","Group","as","controlId","Label","Control","placeholder","defaultValue","defaultValues","onChange","href","credits","Check","label","defaultChecked","coreqs","includes","prereqs","description","height","Button","variant","isEditing","getElementById","Course","draggable","display","onClickEdit","getEmptyCourse","Semester","setNewCourse","setIsOpen","setIsEditing","semesterCourses","useMemo","totalCredits","reduce","previousValue","currentValue","from","values","event","preventDefault","handleCourseSubmit","courseToAdd","parseInt","checked","ListGroup","ListGroupItem","clearCourses","SemesterList","sortedSemesters","sort","a","b","array","count","newSemester","semesterProps","FormTrigger","overlayButton","useRef","ref","setForm","currentForm","YearUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","clearYear","submissionAllowed","handleSemesterInput","handleSemesterSubmit","getStartingYears","getFullYear","yearOne","yearTwo","hasError","Scheduler","csv","json","unmetRequirements","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","setCurrentForm","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","newProblems","newDate","handleSemesterFormInput","resetForm","addSemester","handleSemesterFormSubmit","useEffect","requirements","newCourses","requirement","Table","join","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","FormControl","el","title","IndexPage","role","PlansPage","getItem","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.5440d6ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>()\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>()\n    }\n];\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function Plan(props: PlanProps): JSX.Element {\n    \n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: plans.length,\n            uuid: uuid(),\n            name: \"\",\n            date: new Date().toLocaleDateString(),\n            years: Array<YearProps>()\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n        const arr: typeof props[] = [];\n        \n        // if empty array of plans\n        \n        if (index <= 0){\n            arr.push(plans[0]);\n        }\n\n        // if first item in array, set value of index 0\n        if (index === 1){\n            arr.push(plans[0]);\n        }\n        if (index > 1){\n            arr.push(plans[index-1]);\n        }\n    };\n\n    const deleteCard = (oldArray: typeof plans, planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n\n            const newArray = [...plans];\n            const index = newArray.indexOf(planItem);\n\n            if (index !== -1) {\n                newArray.splice(index, 1);\n                setPlans(newArray);\n            }\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: planItem.id,\n            uuid: uuid(),\n            name: planItem.name,\n            date: planItem.date,\n            years: planItem.years\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n    };\n    \n    const renderCard = (planItem: PlanProps) => {\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        return (\n            <Card style={{ width: \"18rem\" }} className=\"grid\">\n                <Card.Body>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    \n                    <Link to={`Plans/${planItem.uuid}`}>\n                        <button>\n                            Edit Plan\n                        </button>\n                    </Link>\n                    <Card.Text>{planItem.date}</Card.Text>\n                    <button onClick={() => {\n                        console.log(\"button pressed\");\n                        deleteCard(plans, planItem);\n                    }}>-</button>\n                    <button onClick={() => {\n                        copy(planItem);\n                    }}>Duplicate Plan</button>\n                </Card.Body>\n            </Card>\n        );\n    };\n    return (\n        <div className=\"grid\">    \n            <button onClick={addPlan}>Add a plan +</button>\n            {plans.map(planItem =>\n                <li key={planItem.uuid}>{renderCard(planItem)}</li>\n            )}\n        </div>\n    );\n}\n\nexport default Plan;","import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction clearSemesters(\n    years: Array<YearProps>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearProps[] = new Array<YearProps>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearProps>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string) => void;\n    removeYear: (uuid: string) => void;\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clear: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearProps; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearProps>();\n            }\n            : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeYear = (uuid: string) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        };\n        updateYears(action);\n    };\n    return {\n        value: years,\n        push: addYear,\n        putSemester: addSemester,\n        removeSemester: removeSemester,\n        removeYear: removeYear,\n        clear: (uuid?: string) => {\n            clearSemesters(years, addYear, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { getByUUID } from \"./useYears\";\n\nexport interface AbstractCourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n}\n\nexport interface AddCourseAction {\n    type: \"ADD COURSE\",\n    newCourse: CourseProps\n}\n\nexport interface RemoveCourseAction {\n    type: \"REMOVE COURSE\",\n    uuid: string\n}\n\n// easy access to the courses\n\nconst courseReducer = (state: Array<CourseProps>,action: AbstractCourseAction): Array<CourseProps> => {\n    const newState = state.map((course: CourseProps) => {\n        return course;\n    });\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const realAction = action as AddCourseAction;\n        newState.push(realAction.newCourse);\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const realAction = action as RemoveCourseAction;\n        const target = getByUUID(newState, realAction.uuid);\n        if(target !== -1){\n            newState.splice(target, 1);\n        }\n        return newState;\n    }\n    }\n};\n\nconst courseInit = (courses?: Array<CourseProps>): Array<CourseProps> => {\n    return courses === undefined ? [] : courses;\n};\n\nexport interface Courses {\n    courseList: Array<CourseProps>;\n    removeCourse: (courseID: string) => void;\n    push: (course: CourseProps) => void;\n}\nfunction useCourses(initialCourses?: Array<CourseProps>): Courses {\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        initialCourses,\n        courseInit\n    );\n\n    const push = (course: CourseProps) => {\n        const action: AddCourseAction = {type: \"ADD COURSE\", newCourse: course};\n        updateCourses(action);\n    };\n\n    const remove = (uuid: string) => {\n        const action: RemoveCourseAction = {type: \"REMOVE COURSE\", uuid: uuid};\n        updateCourses(action);\n    };\n\n    return {\n        courseList: courses,\n        removeCourse: remove,\n        push: push,\n    };\n}\nexport default useCourses;\n","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Card,\n} from \"react-bootstrap\";\nimport Collapsible from \"react-collapsible\";\n\ninterface YearHeaderProps {\n    index: number,\n    clearSemesters: () => void,\n    children: JSX.Element | JSX.Element[]\n}\n\nexport default function YearHeader(props: YearHeaderProps): JSX.Element{\n    return (\n        <Container fluid>\n            <Row className=\"mb-3\">\n                <Col md={11}>\n                    <Card className=\" p-2\">\n                        <Collapsible\n                            trigger={\n                                <button\n                                    data-testid={`Year ${props.index} label`}\n                                    className=\"trigger\"\n                                >{`Year ${props.index} >`}</button>\n                            }\n                            transitionTime={200}\n                        >\n                            <Row data-testid=\"collapsible-content\">\n                                {props.children}\n                            </Row>\n                        </Collapsible>\n                    </Card>\n                </Col>\n                <Col>\n                    <button\n                        onClick={props.clearSemesters}\n                        data-testid={`clear-year ${props.index}`}\n                    >\n                            Clear\n                    </button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface AddNewCourseProps {\n    /**All of the existing courses. */\n    courses: CourseProps[];\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseProps;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <button onClick={props.onClickClose} data-testid=\"close-course-form\">Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.id}\n                            />\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                defaultValue={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"courseCorequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.coreqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"coursePrerequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.prereqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\" data-testid=\"submit-course-button\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    /**A function that deletes this course from the global map containing all courses. */\n    removeCourse: (uuid: string) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (uuid: string) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div draggable={true} data-testid={`Course ${props.id}: ${props.name}`}>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.removeCourse(props.uuid);\n                }}\n                data-testid=\"remove-course\"\n            >\n                {`${props.credits} ${props.name}`}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props.uuid);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState, useMemo } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\nimport {v4 as uuid} from \"uuid\";\nimport {getByUUID} from \"../hooks/useYears\";\n\ninterface FullSemesterProps extends SemesterProps {\n    /**The uuid's of all exiting courses */\n    courses: Array<CourseProps>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that removes a course from the global list. */\n    removeCourse: (uuid: string) => void,\n    /**A function that pushes courses into the global list. */\n    push: (course: CourseProps) => void,\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\nfunction getEmptyCourse(semester: string): CourseProps{\n    return {\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: semester,\n        coreqs: [],\n        prereqs: [],\n        uuid: uuid()\n    };\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [newCourse, setNewCourse] = useState<CourseProps>(() => {\n        return getEmptyCourse(props.uuid);\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const courseToAdd: CourseProps = { ...newCourse };\n        switch (event.target.name) {\n        case \"courseName\":\n            courseToAdd.name = event.target.value;\n            break;\n        case \"courseID\":\n            courseToAdd.id = event.target.value;\n            break;\n        case \"courseDescription\":\n            courseToAdd.description = event.target.value;\n            break;\n        case \"courseCredits\":\n            courseToAdd.credits = parseInt(event.target.value);\n            break;\n        case \"courseCorequisites\":\n            courseToAdd.coreqs = event.target.checked\n                ? [...courseToAdd.coreqs, event.target.value]\n                : courseToAdd.coreqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        case \"coursePrerequisites\":\n            courseToAdd.prereqs = event.target.checked\n                ? [...courseToAdd.prereqs, event.target.value]\n                : courseToAdd.prereqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        }\n        setNewCourse(courseToAdd);\n    };\n\n    const onClickEdit = (uuid: string) => {\n        setNewCourse(props.courses[getByUUID(props.courses, uuid)]);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        props.push(newCourse);\n        setNewCourse(getEmptyCourse(props.uuid));\n        if (isEditing) setIsEditing(false);\n    };\n    const semesterCourses = useMemo(() => {\n        return props.courses.filter((course: CourseProps) => {\n            return course.semester === props.uuid;\n        });\n    },[props.courses]);\n\n    const totalCredits = useMemo(() => {\n        return semesterCourses.reduce((previousValue: CourseProps, currentValue: CourseProps) => {\n            return {id: \"\", description: \"\", name: \"\", credits: previousValue.credits+currentValue.credits, semester: \"\", coreqs: [], prereqs: [], uuid: \"\"};\n        },{id: \"\", description: \"\", name: \"\", credits: 0, coreqs: [], prereqs: [], semester: \"\", uuid: \"\"}).credits;\n    },[semesterCourses]);\n\n    return (\n        <>\n            <AddCourse\n                courses={Array.from(props.courses.values())}\n                defaultValues={newCourse}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={\"semester-name\"}\n            >\n                {`${props.name} `}\n            </span>\n            <span data-testid=\"credits-count\">\n                {totalCredits}\n            </span>\n            <button\n                data-testid={\"remove-semester\"}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <ListGroup className=\"courses\">{semesterCourses.map((course: CourseProps) => {\n                return (\n                    <ListGroupItem key={course.id}>\n                        {\n                            <Course\n                                {...course}\n                                onClickEdit={onClickEdit}\n                                removeCourse={props.removeCourse}\n                            />\n                        }\n                    </ListGroupItem>\n                );\n            })}\n            </ListGroup>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n            <br />\n            <button\n                onClick={props.clearCourses}\n                data-testid=\"clear-courses-button\"\n            >\n                clear\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, {useMemo} from \"react\";\nimport SemesterProps from \"../../interfaces/Semester\";\nimport Col from \"react-bootstrap/Col\";\nimport Semester from \"../Semester\";\nimport { Courses } from \"../../hooks/useCourses\";\n\ninterface SemesterListProps {\n    removeSemester: (uuid: string) => void,\n    clearCourses: (semesterUuid: string) => void,\n    courses: Courses,\n    semesters: Array<SemesterProps>,\n\n}\n\nexport default function SemesterList(props: SemesterListProps): JSX.Element{\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterProps, b: SemesterProps) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterProps,\n                    index: number,\n                    array: Array<SemesterProps>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterProps = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n\n    return (\n        <>\n            {sortedSemesters.map((semesterProps: SemesterProps,index: number) => {\n                return (\n                    <Col\n                        data-testid={`semester ${index + 1}`}\n                        key={semesterProps.uuid}\n                    >\n                        <Semester\n                            courses={\n                                props.courses.courseList\n                            }\n                            {...semesterProps}\n                            removeSemester={() => {\n                                props.removeSemester(\n                                    semesterProps.uuid\n                                );\n                            }}\n                            push={\n                                props.courses.push\n                            }\n                            removeCourse={\n                                props.courses.removeCourse\n                            }\n                            clearCourses={() => {\n                                props.clearCourses(\n                                    semesterProps.uuid\n                                );\n                            }}\n                        />\n                    </Col>\n                );\n            }\n            )}\n        </> \n    );\n}\n\n","import React, {useRef} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Overlay from \"react-bootstrap/Overlay\";\n\n\ninterface FormTriggerProps{\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    YearUuid: string,\n    children: JSX.Element\n}\n\nexport default function FormTrigger(props: FormTriggerProps): JSX.Element{\n    const overlayButton = useRef(null);\n    return (\n        <Col data-testid=\"form-trigger\">\n            <button\n                data-testid=\"open-semester-form\"\n                className=\"trigger\"\n                ref={overlayButton}\n                onClick={() => {\n                    props.setForm(\n                        props.currentForm === props.YearUuid\n                            ? null\n                            : props.YearUuid\n                    );\n                }}\n            >\n                +\n            </button>\n            <Overlay\n                target={overlayButton}\n                placement=\"right-end\"\n                show={props.currentForm === props.YearUuid}\n                onHide={() => {\n                    props.setForm(null);\n                }}\n                rootClose={true}\n                transition={false}\n            >\n                <Popover id=\"popover-basic\" data-testid=\"popover\">\n                    <PopoverContent>\n                        <div\n                            data-testid={\"semester-form\"}\n                        >\n                            {props.children}\n                        </div>\n                    </PopoverContent>\n                </Popover>\n            </Overlay>\n        </Col>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React from \"react\";\nimport YearHeader from \"./YearHeader\";\nimport SemesterList from \"./SemesterList\";\nimport FormTrigger from \"./FormTrigger\";\nimport SemesterForm from \"./SemesterForm\";\nimport CourseProps from \"../../interfaces/Course\";\nimport { ChangeEvent, FormEvent } from \"react\";\nimport { Courses } from \"../../hooks/useCourses\";\nimport SemesterProps from \"../../interfaces/Semester\";\n\ninterface YearProps{\n    clearYear: () => void\n    removeSemester: (uuid: string) => void,\n    courses: Courses,\n    index: number,\n    uuid: string,\n    handleSemesterSubmit: (event: FormEvent<HTMLFormElement>, uuid: string) => void,\n    handleSemesterInput: (event: ChangeEvent<HTMLInputElement>) => void,\n    semesters: Array<SemesterProps>,\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    submissionAllowed: boolean\n}\n\nexport default function Year(props: YearProps): JSX.Element{\n    return (\n        <div data-testid={`Year ${props.index}`} key={props.uuid}>\n            <YearHeader index={props.index} clearSemesters={() => {\n                props.clearYear();\n            }}\n            >\n                <SemesterList semesters={props.semesters} courses={props.courses} removeSemester={(semesterUuid: string) => {\n                    props.removeSemester(semesterUuid);\n                }}\n                clearCourses={(semesterUuid: string) => {\n                    for(const course of props.courses.courseList.filter((course: CourseProps) => {\n                        return course.semester === semesterUuid;\n                    })){\n                        props.courses.removeCourse(course.uuid); \n                    }\n                }}\n                />\n                <FormTrigger currentForm={props.currentForm} setForm={props.setForm} YearUuid={props.uuid}>\n                    <SemesterForm\n                        canSubmit={props.submissionAllowed}\n                        handleInput={props.handleSemesterInput}\n                        handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                            props.handleSemesterSubmit(event, props.uuid);\n                        }}\n                    />\n                </FormTrigger>\n            </YearHeader>\n        </div>\n    );\n}","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport useCourses from \"../hooks/useCourses\";\nimport { Table } from \"react-bootstrap\";\nimport {handleSemesterFormInput, handleSemesterFormSubmit} from \"../util/events/SemesterFormEvents\";\nimport Year from \"./Year/Year\";\n\ninterface SchedulerProps {\n    /**csv data that can be used to reconstruct a scheduler. */\n    csv?: string;\n    /**Json data that can be used to reconstruct a scheduler.  */\n    json?: string;\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n}\n\nfunction getStartingYears(): Array<YearProps> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearProps = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears(getStartingYears);\n\n        const courses = useCourses();\n        //The requirements for the degree that are not present in the plan\n        const [unmetRequirements, setUnmetRequirements] = useState<Array<string>>([]);\n        //The name of the new semester (null if the form is closed or nothing has been entered)\n        const [newName, setNewName] = useState<string | null>(null);\n        //The starting date of the new semester as a string (null if the form is closed or nothing has been entered)\n        const [newStart, setNewStart] = useState<string | null>(null);\n        //The ending date of the new semester as a string (null if the form is closed or nothing has been entered)\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        //The semester form that is currently open; kept track of here to ensure no more than 1 of these forms can be active at once\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        //Whether or not the form to create a new semester can be submitted\n        const [submissionAllowed, setSubmissionAllowed] = useState(false);\n        //The problems with the user's current inputs\n        const problems = useProblems();\n        const setForm = (uuid: string | null) => {\n            setCurrentForm(uuid);\n            setSubmissionAllowed(false);\n            setNewName(null);\n            setNewStart(null);\n            setNewEnd(null);\n            problems.clear(\"semester-form\");\n        };\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            handleSemesterFormInput(event,newStart,newEnd,setNewName,setNewStart,setNewEnd,years,currentForm,problems);\n        };\n\n        const handleSemesterSubmit = (event: FormEvent<HTMLFormElement>, id: string) => {\n            handleSemesterFormSubmit(event,id,newName,newStart,newEnd,() => {\n                setForm(null);\n            },years.putSemester);\n        };\n\n        //set if courses match requirements using props.requirements\n        useEffect(() => {\n            const requirements = props.requirements;\n            const newCourses = Array<string>();\n\n            for (const requirement of requirements) {\n                if (getByUUID(courses.courseList, requirement) === -1) {\n                    newCourses.push(requirement);\n                }\n            }\n            setUnmetRequirements(newCourses);\n        }, [props.requirements, courses.courseList]);\n\n        if (\n            newName &&\n            newEnd &&\n            newStart &&\n            !submissionAllowed &&\n            !hasError(problems.value)\n        ) {\n            setSubmissionAllowed(true);\n        } else if (\n            (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n            submissionAllowed\n        ) {\n            setSubmissionAllowed(false);\n        }\n        return (\n            <>\n                <button\n                    onClick={() => {\n                        years.clear();\n                    }}\n                    data-testid=\"clear-button\"\n                >\n                    Clear\n                </button>\n                <div>\n                    {years.value.map((props: YearProps) => {\n                        return (\n                            <Year\n                                key={props.uuid}\n                                clearYear = {() => {\n                                    years.clear(props.uuid);\n                                }}\n                                removeSemester={(semesterUuid: string) => {\n                                    years.removeSemester(props.uuid,semesterUuid);\n                                }}\n                                courses={courses}\n                                index={props.index}\n                                uuid={props.uuid}\n                                handleSemesterSubmit={handleSemesterSubmit}\n                                handleSemesterInput={handleSemesterInput}\n                                semesters={props.semesters}\n                                currentForm={currentForm}\n                                setForm={setForm}\n                                submissionAllowed={submissionAllowed}\n                            />);\n                    })}\n                    <button\n                        data-testid=\"add-year-button\"\n                        onClick={() => {\n                            years.push(uuid(), years.value.length+1);\n                        }}\n                    >\n                        +\n                    </button>\n                </div>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Degree Requirements</th>\n                            <th>Unmet Requirements</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>School of Engineering</td>\n                            <td>{unmetRequirements.join(\", \")}</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <ErrorStack problems={problems.value} />\n            </>\n        );\n    }\n    return <></>;\n}\n","import { getByUUID, Years } from \"../../hooks/useYears\";\nimport validate from \"../validation/dates\";\nimport { ChangeEvent } from \"react\";\nimport { ProblemsInterface } from \"../../hooks/useProblems\";\nimport {v4 as uuid} from \"uuid\";\nimport { FormEvent } from \"react\";\n\nexport function handleSemesterFormInput(event: ChangeEvent<HTMLInputElement>, newStart: string | null, newEnd: string | null, setNewName: (name: string | null) => void, setNewStart: (start: string | null) => void, setNewEnd: (end: string | null) => void, years: Years, currentForm: string | null, problems: ProblemsInterface): void{\n    switch (event.target.name) {\n    case \"season\": {\n        setNewName(event.target.value);\n        break;\n    }\n    case \"starts\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newDate,\n            newEnd !== null ? new Date(newEnd) : null,\n            semesters,\n            \"starts\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewStart(event.target.value);\n        break;\n    }\n    case \"ends\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newStart !== null ? new Date(newStart) : null,\n            newDate,\n            semesters,\n            \"ends\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewEnd(event.target.value);\n        break;\n    }\n    }\n}\n\nexport function handleSemesterFormSubmit(event: FormEvent<HTMLFormElement>, id: string, newName: string | null, newStart: string | null, newEnd: string | null, resetForm: () => void, addSemester: (id: string, uuid: string, start: Date, end: Date, name: string) => void): void{\n    event.preventDefault();\n    if (newName !== null && newEnd !== null && newStart !== null) {\n        addSemester(\n            id,\n            uuid(),\n            new Date(newStart),\n            new Date(newEnd),\n            newName\n        );\n        resetForm();\n    }\n}","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3>School of Engineering Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n            <Link to=\"/\">\n                <Button className=\"my-3\">Back</Button>\n            </Link>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    Link,\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport Plan from \"./components/Plan\";\nimport { Button } from \"react-bootstrap\";\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\n//import ReactDOM from \"react-dom\";\n\n// Master Plan View\nconst IndexPage = () => {\n    return (\n        <>\n            <div>\n                <h1 className=\"center\">UD CIS Scheduler</h1>\n                <h3 className=\"center\">Designed By: Lucas, Max, and Amani</h3>\n                <div role=\"alert\" className=\"welcome\">\n                    <p>Welcome to the UD Degree Planner!</p>\n                    <b>Click Add/Edit Plan below to Get Started</b>\n                </div>\n                <Plan uuid=\"\" id={0} />\n            </div>\n            <Link to=\"/Requirements\">\n                <Button className=\"my-2\">Modify Requirements</Button>\n            </Link>\n        </>\n    );\n};\n\ntype PlansPageProps = RouteComponentProps & {\n    requirements: string[];\n};\n\nconst PlansPage: FC<PlansPageProps> = (props) => {\n    return (\n        <>\n            {/*\n            {users.map((user, index) => (\n                <h5 key={index}>\n                    <Link to={`/user/${index + 1}`}>{user.name}s Page</Link>\n                </h5>\n\n            ))}\n            */}\n            <Scheduler requirements={props.requirements} />\n            <Link to=\"/\">\n                <Button>Back</Button>\n            </Link>\n            {console.log(\"the uuid is : \", localStorage.getItem(\"plan: 0\"))}\n        </>\n    );\n};\n\nfunction App(): JSX.Element {\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        <div className=\"container\">\n            <HashRouter>\n                <Switch>\n                    <Router>\n                        <Route\n                            path=\"/Plans/:uuid\"\n                            render={(props) => \n                                <PlansPage\n                                    {...props}\n                                    requirements={requirements}\n                                />\n                            }\n                        ></Route>\n                        <Route\n                            path=\"/Requirements\"\n                            render={(props) => \n                                <Requirements\n                                    {...props}\n                                    requirements={requirements}\n                                    onAddRequirement={addRequirement}\n                                    onRemoveRequirement={removeRequirement}\n                                />\n                            }\n                        ></Route>\n                        <Route exact path=\"/\" component={IndexPage}></Route>\n                    </Router>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}