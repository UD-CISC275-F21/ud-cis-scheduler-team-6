{"version":3,"sources":["hooks/useYears.ts","hooks/useProblems.ts","components/ErrorStack.tsx","hooks/useCourses.ts","util/validation/dates.ts","components/Year/YearHeader.tsx","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year/SemesterList.tsx","components/Year/FormTrigger.tsx","components/Year/SemesterForm.tsx","components/Year/Year.tsx","components/Scheduler.tsx","util/events/SemesterFormEvents.ts","components/Requirements.tsx","components/Plan.tsx","components/IndexPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getByUUID","state","uuid","i","length","yearReducer","prev","action","next","map","x","type","semAction","targetIndex","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","index","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","years","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","problemReducer","newState","error","message","source","problemType","realAction","splice","problem","output","initializer","ErrorStack","props","problems","ctr","className","ReactDOM","createPortal","document","body","courseReducer","course","newCourse","courseInit","courses","useCourses","initialCourses","updateCourses","courseList","removeCourse","validate","existing","getTime","validate_both_dates","validate_single_date","date","YearHeader","Container","fluid","Row","Col","md","Card","trigger","transitionTime","children","onClick","AddCourse","isOpen","onClickClose","Form","onSubmit","onClickSubmit","Group","as","controlId","Label","Control","placeholder","defaultValue","defaultValues","onChange","Text","href","id","credits","Check","label","defaultChecked","coreqs","includes","prereqs","description","style","height","Button","variant","isEditing","getElementById","Course","draggable","display","onClickEdit","getEmptyCourse","Semester","useState","setNewCourse","setIsOpen","setIsEditing","semesterCourses","useMemo","totalCredits","reduce","previousValue","currentValue","from","values","event","preventDefault","handleCourseSubmit","courseToAdd","parseInt","checked","ListGroup","ListGroupItem","clearCourses","SemesterList","sortedSemesters","sort","a","b","array","count","newSemester","semesterProps","FormTrigger","overlayButton","useRef","ref","setForm","currentForm","YearUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","clearYear","submissionAllowed","handleSemesterInput","handleSemesterSubmit","getStartingYears","Date","getFullYear","yearOne","yearTwo","hasError","Scheduler","unmetRequirements","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","setCurrentForm","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","newProblems","newDate","handleSemesterFormInput","resetForm","addSemester","handleSemesterFormSubmit","useEffect","requirements","newCourses","requirement","Table","join","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","width","FormControl","el","title","to","Plan","plans","setPlans","toLocaleDateString","planItem","Body","Title","window","confirm","newArray","indexOf","deleteCard","copy","IndexPage","role","PlansPage","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.7f1f7d80.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction clearSemesters(\n    years: Array<YearProps>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearProps[] = new Array<YearProps>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearProps>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string) => void;\n    removeYear: (uuid: string) => void;\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clear: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearProps; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearProps>();\n            }\n            : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeYear = (uuid: string) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        };\n        updateYears(action);\n    };\n    return {\n        value: years,\n        push: addYear,\n        putSemester: addSemester,\n        removeSemester: removeSemester,\n        removeYear: removeYear,\n        clear: (uuid?: string) => {\n            clearSemesters(years, addYear, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { getByUUID } from \"./useYears\";\n\nexport interface AbstractCourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n}\n\nexport interface AddCourseAction {\n    type: \"ADD COURSE\",\n    newCourse: CourseProps\n}\n\nexport interface RemoveCourseAction {\n    type: \"REMOVE COURSE\",\n    uuid: string\n}\n\n// easy access to the courses\n\nconst courseReducer = (state: Array<CourseProps>,action: AbstractCourseAction): Array<CourseProps> => {\n    const newState = state.map((course: CourseProps) => {\n        return course;\n    });\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const realAction = action as AddCourseAction;\n        newState.push(realAction.newCourse);\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const realAction = action as RemoveCourseAction;\n        const target = getByUUID(newState, realAction.uuid);\n        if(target !== -1){\n            newState.splice(target, 1);\n        }\n        return newState;\n    }\n    }\n};\n\nconst courseInit = (courses?: Array<CourseProps>): Array<CourseProps> => {\n    return courses === undefined ? [] : courses;\n};\n\nexport interface Courses {\n    courseList: Array<CourseProps>;\n    removeCourse: (courseID: string) => void;\n    push: (course: CourseProps) => void;\n}\nfunction useCourses(initialCourses?: Array<CourseProps>): Courses {\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        initialCourses,\n        courseInit\n    );\n\n    const push = (course: CourseProps) => {\n        const action: AddCourseAction = {type: \"ADD COURSE\", newCourse: course};\n        updateCourses(action);\n    };\n\n    const remove = (uuid: string) => {\n        const action: RemoveCourseAction = {type: \"REMOVE COURSE\", uuid: uuid};\n        updateCourses(action);\n    };\n\n    return {\n        courseList: courses,\n        removeCourse: remove,\n        push: push,\n    };\n}\nexport default useCourses;\n","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Card,\n} from \"react-bootstrap\";\nimport Collapsible from \"react-collapsible\";\n\ninterface YearHeaderProps {\n    index: number,\n    clearSemesters: () => void,\n    children: JSX.Element | JSX.Element[]\n}\n\nexport default function YearHeader(props: YearHeaderProps): JSX.Element{\n    return (\n        <Container fluid>\n            <Row className=\"mb-3\">\n                <Col md={11}>\n                    <Card className=\" p-2\">\n                        <Collapsible\n                            trigger={\n                                <button\n                                    data-testid={`Year ${props.index} label`}\n                                    className=\"trigger\"\n                                >{`Year ${props.index} >`}</button>\n                            }\n                            transitionTime={200}\n                        >\n                            <Row data-testid=\"collapsible-content\">\n                                {props.children}\n                            </Row>\n                        </Collapsible>\n                    </Card>\n                </Col>\n                <Col>\n                    <button\n                        onClick={props.clearSemesters}\n                        data-testid={`clear-year ${props.index}`}\n                    >\n                            Clear\n                    </button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface AddNewCourseProps {\n    /**All of the existing courses. */\n    courses: CourseProps[];\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseProps;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <button onClick={props.onClickClose} data-testid=\"close-course-form\">Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.id}\n                            />\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                defaultValue={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"courseCorequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.coreqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"coursePrerequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.prereqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\" data-testid=\"submit-course-button\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    /**A function that deletes this course from the global map containing all courses. */\n    removeCourse: (uuid: string) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (uuid: string) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div draggable={true} data-testid={`Course ${props.id}: ${props.name}`}>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.removeCourse(props.uuid);\n                }}\n                data-testid=\"remove-course\"\n            >\n                {`${props.credits} ${props.name}`}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props.uuid);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState, useMemo } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\nimport {v4 as uuid} from \"uuid\";\nimport {getByUUID} from \"../hooks/useYears\";\n\ninterface FullSemesterProps extends SemesterProps {\n    /**The uuid's of all exiting courses */\n    courses: Array<CourseProps>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that removes a course from the global list. */\n    removeCourse: (uuid: string) => void,\n    /**A function that pushes courses into the global list. */\n    push: (course: CourseProps) => void,\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\nfunction getEmptyCourse(semester: string): CourseProps{\n    return {\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: semester,\n        coreqs: [],\n        prereqs: [],\n        uuid: uuid()\n    };\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [newCourse, setNewCourse] = useState<CourseProps>(() => {\n        return getEmptyCourse(props.uuid);\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const courseToAdd: CourseProps = { ...newCourse };\n        switch (event.target.name) {\n        case \"courseName\":\n            courseToAdd.name = event.target.value;\n            break;\n        case \"courseID\":\n            courseToAdd.id = event.target.value;\n            break;\n        case \"courseDescription\":\n            courseToAdd.description = event.target.value;\n            break;\n        case \"courseCredits\":\n            courseToAdd.credits = parseInt(event.target.value);\n            break;\n        case \"courseCorequisites\":\n            courseToAdd.coreqs = event.target.checked\n                ? [...courseToAdd.coreqs, event.target.value]\n                : courseToAdd.coreqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        case \"coursePrerequisites\":\n            courseToAdd.prereqs = event.target.checked\n                ? [...courseToAdd.prereqs, event.target.value]\n                : courseToAdd.prereqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        }\n        setNewCourse(courseToAdd);\n    };\n\n    const onClickEdit = (uuid: string) => {\n        setNewCourse(props.courses[getByUUID(props.courses, uuid)]);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        props.push(newCourse);\n        setNewCourse(getEmptyCourse(props.uuid));\n        if (isEditing) setIsEditing(false);\n    };\n    const semesterCourses = useMemo(() => {\n        return props.courses.filter((course: CourseProps) => {\n            return course.semester === props.uuid;\n        });\n    },[props.courses]);\n\n    const totalCredits = useMemo(() => {\n        return semesterCourses.reduce((previousValue: CourseProps, currentValue: CourseProps) => {\n            return {id: \"\", description: \"\", name: \"\", credits: previousValue.credits+currentValue.credits, semester: \"\", coreqs: [], prereqs: [], uuid: \"\"};\n        },{id: \"\", description: \"\", name: \"\", credits: 0, coreqs: [], prereqs: [], semester: \"\", uuid: \"\"}).credits;\n    },[semesterCourses]);\n\n    return (\n        <>\n            <AddCourse\n                courses={Array.from(props.courses.values())}\n                defaultValues={newCourse}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={\"semester-name\"}\n            >\n                {`${props.name} `}\n            </span>\n            <span data-testid=\"credits-count\">\n                {totalCredits}\n            </span>\n            <button\n                data-testid={\"remove-semester\"}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <ListGroup className=\"courses\">{semesterCourses.map((course: CourseProps) => {\n                return (\n                    <ListGroupItem key={course.id}>\n                        {\n                            <Course\n                                {...course}\n                                onClickEdit={onClickEdit}\n                                removeCourse={props.removeCourse}\n                            />\n                        }\n                    </ListGroupItem>\n                );\n            })}\n            </ListGroup>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n            <br />\n            <button\n                onClick={props.clearCourses}\n                data-testid=\"clear-courses-button\"\n            >\n                clear\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, {useMemo} from \"react\";\nimport SemesterProps from \"../../interfaces/Semester\";\nimport Col from \"react-bootstrap/Col\";\nimport Semester from \"../Semester\";\nimport { Courses } from \"../../hooks/useCourses\";\n\ninterface SemesterListProps {\n    removeSemester: (uuid: string) => void,\n    clearCourses: (semesterUuid: string) => void,\n    courses: Courses,\n    semesters: Array<SemesterProps>,\n\n}\n\nexport default function SemesterList(props: SemesterListProps): JSX.Element{\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterProps, b: SemesterProps) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterProps,\n                    index: number,\n                    array: Array<SemesterProps>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterProps = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n\n    return (\n        <>\n            {sortedSemesters.map((semesterProps: SemesterProps,index: number) => {\n                return (\n                    <Col\n                        data-testid={`semester ${index + 1}`}\n                        key={semesterProps.uuid}\n                    >\n                        <Semester\n                            courses={\n                                props.courses.courseList\n                            }\n                            {...semesterProps}\n                            removeSemester={() => {\n                                props.removeSemester(\n                                    semesterProps.uuid\n                                );\n                            }}\n                            push={\n                                props.courses.push\n                            }\n                            removeCourse={\n                                props.courses.removeCourse\n                            }\n                            clearCourses={() => {\n                                props.clearCourses(\n                                    semesterProps.uuid\n                                );\n                            }}\n                        />\n                    </Col>\n                );\n            }\n            )}\n        </> \n    );\n}\n\n","import React, {useRef} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Overlay from \"react-bootstrap/Overlay\";\n\n\ninterface FormTriggerProps{\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    YearUuid: string,\n    children: JSX.Element\n}\n\nexport default function FormTrigger(props: FormTriggerProps): JSX.Element{\n    const overlayButton = useRef(null);\n    return (\n        <Col data-testid=\"form-trigger\">\n            <button\n                data-testid=\"open-semester-form\"\n                className=\"trigger\"\n                ref={overlayButton}\n                onClick={() => {\n                    props.setForm(\n                        props.currentForm === props.YearUuid\n                            ? null\n                            : props.YearUuid\n                    );\n                }}\n            >\n                +\n            </button>\n            <Overlay\n                target={overlayButton}\n                placement=\"right-end\"\n                show={props.currentForm === props.YearUuid}\n                onHide={() => {\n                    props.setForm(null);\n                }}\n                rootClose={true}\n                transition={false}\n            >\n                <Popover id=\"popover-basic\" data-testid=\"popover\">\n                    <PopoverContent>\n                        <div\n                            data-testid={\"semester-form\"}\n                        >\n                            {props.children}\n                        </div>\n                    </PopoverContent>\n                </Popover>\n            </Overlay>\n        </Col>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React from \"react\";\nimport YearHeader from \"./YearHeader\";\nimport SemesterList from \"./SemesterList\";\nimport FormTrigger from \"./FormTrigger\";\nimport SemesterForm from \"./SemesterForm\";\nimport CourseProps from \"../../interfaces/Course\";\nimport { ChangeEvent, FormEvent } from \"react\";\nimport { Courses } from \"../../hooks/useCourses\";\nimport SemesterProps from \"../../interfaces/Semester\";\n\ninterface YearProps{\n    clearYear: () => void\n    removeSemester: (uuid: string) => void,\n    courses: Courses,\n    index: number,\n    uuid: string,\n    handleSemesterSubmit: (event: FormEvent<HTMLFormElement>, uuid: string) => void,\n    handleSemesterInput: (event: ChangeEvent<HTMLInputElement>) => void,\n    semesters: Array<SemesterProps>,\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    submissionAllowed: boolean\n}\n\nexport default function Year(props: YearProps): JSX.Element{\n    return (\n        <div data-testid={`Year ${props.index}`} key={props.uuid}>\n            <YearHeader index={props.index} clearSemesters={() => {\n                props.clearYear();\n            }}\n            >\n                <SemesterList semesters={props.semesters} courses={props.courses} removeSemester={(semesterUuid: string) => {\n                    props.removeSemester(semesterUuid);\n                }}\n                clearCourses={(semesterUuid: string) => {\n                    for(const course of props.courses.courseList.filter((course: CourseProps) => {\n                        return course.semester === semesterUuid;\n                    })){\n                        props.courses.removeCourse(course.uuid); \n                    }\n                }}\n                />\n                <FormTrigger currentForm={props.currentForm} setForm={props.setForm} YearUuid={props.uuid}>\n                    <SemesterForm\n                        canSubmit={props.submissionAllowed}\n                        handleInput={props.handleSemesterInput}\n                        handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                            props.handleSemesterSubmit(event, props.uuid);\n                        }}\n                    />\n                </FormTrigger>\n            </YearHeader>\n        </div>\n    );\n}","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport useCourses from \"../hooks/useCourses\";\nimport { Table } from \"react-bootstrap\";\nimport {handleSemesterFormInput, handleSemesterFormSubmit} from \"../util/events/SemesterFormEvents\";\nimport Year from \"./Year/Year\";\n\ninterface SchedulerProps {\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n}\n\nfunction getStartingYears(): Array<YearProps> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearProps = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    const years = useYears(getStartingYears);\n\n    const courses = useCourses();\n    //The requirements for the degree that are not present in the plan\n    const [unmetRequirements, setUnmetRequirements] = useState<Array<string>>([]);\n    //The name of the new semester (null if the form is closed or nothing has been entered)\n    const [newName, setNewName] = useState<string | null>(null);\n    //The starting date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newStart, setNewStart] = useState<string | null>(null);\n    //The ending date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newEnd, setNewEnd] = useState<string | null>(null);\n    //The semester form that is currently open; kept track of here to ensure no more than 1 of these forms can be active at once\n    const [currentForm, setCurrentForm] = useState<string | null>(null);\n    //Whether or not the form to create a new semester can be submitted\n    const [submissionAllowed, setSubmissionAllowed] = useState(false);\n    //The problems with the user's current inputs\n    const problems = useProblems();\n    const setForm = (uuid: string | null) => {\n        setCurrentForm(uuid);\n        setSubmissionAllowed(false);\n        setNewName(null);\n        setNewStart(null);\n        setNewEnd(null);\n        problems.clear(\"semester-form\");\n    };\n    const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n        handleSemesterFormInput(event,newStart,newEnd,setNewName,setNewStart,setNewEnd,years,currentForm,problems);\n    };\n\n    const handleSemesterSubmit = (event: FormEvent<HTMLFormElement>, id: string) => {\n        handleSemesterFormSubmit(event,id,newName,newStart,newEnd,() => {\n            setForm(null);\n        },years.putSemester);\n    };\n\n    //set if courses match requirements using props.requirements\n    useEffect(() => {\n        const requirements = props.requirements;\n        const newCourses = Array<string>();\n\n        for (const requirement of requirements) {\n            if (getByUUID(courses.courseList, requirement) === -1) {\n                newCourses.push(requirement);\n            }\n        }\n        setUnmetRequirements(newCourses);\n    }, [props.requirements, courses.courseList]);\n\n    if (\n        newName &&\n            newEnd &&\n            newStart &&\n            !submissionAllowed &&\n            !hasError(problems.value)\n    ) {\n        setSubmissionAllowed(true);\n    } else if (\n        (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n            submissionAllowed\n    ) {\n        setSubmissionAllowed(false);\n    }\n    return (\n        <>\n            <button\n                onClick={() => {\n                    years.clear();\n                }}\n                data-testid=\"clear-button\"\n            >\n                    Clear\n            </button>\n            <div>\n                {years.value.map((props: YearProps) => {\n                    return (\n                        <Year\n                            key={props.uuid}\n                            clearYear = {() => {\n                                years.clear(props.uuid);\n                            }}\n                            removeSemester={(semesterUuid: string) => {\n                                years.removeSemester(props.uuid,semesterUuid);\n                            }}\n                            courses={courses}\n                            index={props.index}\n                            uuid={props.uuid}\n                            handleSemesterSubmit={handleSemesterSubmit}\n                            handleSemesterInput={handleSemesterInput}\n                            semesters={props.semesters}\n                            currentForm={currentForm}\n                            setForm={setForm}\n                            submissionAllowed={submissionAllowed}\n                        />);\n                })}\n                <button\n                    data-testid=\"add-year-button\"\n                    onClick={() => {\n                        years.push(uuid(), years.value.length+1);\n                    }}\n                >\n                        +\n                </button>\n            </div>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Degree Requirements</th>\n                        <th>Unmet Requirements</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>School of Engineering</td>\n                        <td>{unmetRequirements.join(\", \")}</td>\n                    </tr>\n                </tbody>\n            </Table>\n            <ErrorStack problems={problems.value} />\n        </>\n    );\n}\n","import { getByUUID, Years } from \"../../hooks/useYears\";\nimport validate from \"../validation/dates\";\nimport { ChangeEvent } from \"react\";\nimport { ProblemsInterface } from \"../../hooks/useProblems\";\nimport {v4 as uuid} from \"uuid\";\nimport { FormEvent } from \"react\";\n\nexport function handleSemesterFormInput(event: ChangeEvent<HTMLInputElement>, newStart: string | null, newEnd: string | null, setNewName: (name: string | null) => void, setNewStart: (start: string | null) => void, setNewEnd: (end: string | null) => void, years: Years, currentForm: string | null, problems: ProblemsInterface): void{\n    switch (event.target.name) {\n    case \"season\": {\n        setNewName(event.target.value);\n        break;\n    }\n    case \"starts\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newDate,\n            newEnd !== null ? new Date(newEnd) : null,\n            semesters,\n            \"starts\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewStart(event.target.value);\n        break;\n    }\n    case \"ends\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newStart !== null ? new Date(newStart) : null,\n            newDate,\n            semesters,\n            \"ends\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewEnd(event.target.value);\n        break;\n    }\n    }\n}\n\nexport function handleSemesterFormSubmit(event: FormEvent<HTMLFormElement>, id: string, newName: string | null, newStart: string | null, newEnd: string | null, resetForm: () => void, addSemester: (id: string, uuid: string, start: Date, end: Date, name: string) => void): void{\n    event.preventDefault();\n    if (newName !== null && newEnd !== null && newStart !== null) {\n        addSemester(\n            id,\n            uuid(),\n            new Date(newStart),\n            new Date(newEnd),\n            newName\n        );\n        resetForm();\n    }\n}","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3>School of Engineering Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n            <Link to=\"/\">\n                <Button className=\"my-3\">Back</Button>\n            </Link>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>()\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>()\n    }\n];\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function Plan(): JSX.Element {\n    \n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    \n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: plans.length,\n            uuid: uuid(),\n            name: \"\",\n            date: new Date().toLocaleDateString(),\n            years: new Array<YearProps>()\n        }]);\n    };\n\n    const deleteCard = (planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n            const newArray = [...plans];\n            const index = newArray.indexOf(planItem);\n            newArray.splice(index, 1);\n            setPlans(newArray);\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: planItem.id,\n            uuid: uuid(),\n            name: planItem.name,\n            date: planItem.date,\n            years: planItem.years\n        }]);\n    };\n    return (\n        <div className=\"grid\">    \n            <button onClick={addPlan} data-testid=\"add-plan\">Add a plan +</button>\n            {plans.map(planItem =>\n                <Card key={planItem.uuid} data-testid={`Plan ${planItem.id}`} style={{ width: \"18rem\" }} className=\"grid\">\n                    <Card.Body>\n                        <Card.Title>Plan #{planItem.id} </Card.Title>\n                        \n                        <Link to={`Plans/${planItem.uuid}`}>\n                            <button data-testid=\"edit-plan\">\n                                Edit Plan\n                            </button>\n                        </Link>\n                        <Card.Text>{planItem.date}</Card.Text>\n                        <button data-testid=\"delete-plan\" onClick={() => {\n                            deleteCard(planItem);\n                        }}>-</button>\n                        <button data-testid=\"copy-plan\" onClick={() => {\n                            copy(planItem);\n                        }}>Duplicate Plan</button>\n                    </Card.Body>\n                </Card>\n            )}\n        </div>\n    );\n}\n\nexport default Plan;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Plan from \"./Plan\";\n\n// Master Plan View\nexport default function IndexPage(): JSX.Element {\n    return (\n        <>\n            <div>\n                <h1 className=\"center\">UD CIS Scheduler</h1>\n                <h3 className=\"center\">Designed By: Lucas, Max, and Amani</h3>\n                <div role=\"alert\" className=\"welcome\">\n                    <p>Welcome to the UD Degree Planner!</p>\n                    <b>Click Add/Edit Plan below to Get Started</b>\n                </div>\n                <Plan/>\n            </div>\n            <Link to=\"/Requirements\">\n                <Button className=\"my-2\">Modify Requirements</Button>\n            </Link>\n        </>\n    );\n}","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    Link,\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\nimport IndexPage from \"./components/IndexPage\";\n\ntype PlansPageProps = RouteComponentProps & {\n    requirements: string[];\n};\n\nexport const PlansPage: FC<PlansPageProps> = (props) => {\n    return (\n        <>\n            <Scheduler requirements={props.requirements} />\n            <Link to=\"/\">\n                <Button data-testid=\"back-button\">Back</Button>\n            </Link>\n        </>\n    );\n};\n\nfunction App(): JSX.Element {\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        \n        <div className=\"container\">\n            <HashRouter>\n                <Switch>\n                    <Router>\n                        <Route\n                            path=\"/Plans/:uuid\"\n                            render={(props) => \n                                <PlansPage\n                                    {...props}\n                                    requirements={requirements}\n                                />\n                            }\n                        ></Route>\n                        <Route\n                            path=\"/Requirements\"\n                            render={(props) => \n                                <Requirements\n                                    {...props}\n                                    requirements={requirements}\n                                    onAddRequirement={addRequirement}\n                                    onRemoveRequirement={removeRequirement}\n                                />\n                            }\n                        ></Route>\n                        <Route exact path=\"/\" component={IndexPage}></Route>\n                    </Router>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}