{"version":3,"sources":["components/Plan.tsx","hooks/useYears.ts","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/SemesterForm.tsx","components/Year.tsx","hooks/useProblems.ts","components/ErrorStack.tsx","util/validation/dates.ts","components/Scheduler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Array","Plan","props","useState","plans","setPlans","renderCard","planItem","localStorage","setItem","JSON","stringify","Card","style","width","className","Body","Title","id","to","uuid","Text","date","onClick","console","log","oldArray","window","confirm","newArray","index","indexOf","splice","deleteCard","name","years","length","copy","Date","toLocaleDateString","arr","push","map","getByUUID","state","i","yearReducer","prev","action","next","x","type","semAction","targetIndex","target","newYear1","concat","semesters","start","end","semesterUuid","courses","Map","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","AddCourse","isOpen","ReactDOM","createPortal","onClickClose","Form","onSubmit","onClickSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","defaultValue","defaultValues","courseName","onChange","href","courseID","courseDescription","height","Button","variant","isEditing","document","getElementById","body","Course","display","onRemoveCourse","onClickEdit","courseReducer","set","payload","newState","delete","courseInit","Semester","setIsOpen","setIsEditing","newCourseName","setNewCourseName","newCourseID","setNewCourseID","newCourseDescription","setNewCourseDescription","updateCourses","courseToRemove","courseToEdit","description","addedCourses","from","course","event","preventDefault","handleCourseSubmit","getUTCFullYear","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","overlayButton","useRef","sortedSemesters","useMemo","sort","a","b","getTime","array","count","newSemester","Container","trigger","transitionTime","semesterProps","ref","formInit","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","problemReducer","error","message","source","problemType","realAction","problem","output","initializer","ErrorStack","problems","ctr","validate","existing","validate_both_dates","validate_single_date","getStartingYears","getFullYear","yearOne","yearTwo","hasError","Scheduler","csv","json","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","submissionAllowed","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","semesterFormInit","handleSemesterInput","newProblems","newDate","handleSemesterSubmit","setFormUuid","IndexPage","role","PlansPage","getItem","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.e5b7cb19.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>()\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>()\n    }\n];\n\nexport function Plan(props: PlanProps): JSX.Element {\n\n    \n    //const planList: typeof props[] = [];\n    \n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    \n    //plans.forEach(val => planList.push(Object.assign({}, val)));\n    \n    //const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n    //const testArray: PlanProps[] = JSON.parse(stringLoad);\n    //console.log(\"loaded vals\" , testArray);\n    \n\n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: plans.length,\n            uuid: uuid(),\n            name: \"\",\n            date: new Date().toLocaleDateString(),\n            years: Array<YearProps>()\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n        const arr: typeof props[] = [];\n        \n        // if empty array of plans\n        \n        if (index <= 0){\n            arr.push(plans[0]);\n            //localStorage.setItem(`plan:${0}`, JSON.stringify(arr));\n        }\n\n        // if first item in array, set value of index 0\n        if (index === 1){\n            arr.push(plans[0]);\n        }\n        // temp array that saves the plan info to new key and values in localStorage\n        if (index > 1){\n            arr.push(plans[index-1]);\n            //localStorage.setItem(`plan:${index-1}`, JSON.stringify(arr));\n        }\n        //arr.push({id: plans.length, uuid: uuid(), name: \"\", date: new Date().toLocaleDateString(), years: Array<YearProps>()});\n    };\n\n    const deleteCard = (oldArray: typeof plans, planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n\n            const newArray = [...plans];\n            console.log(\"plans array\", plans);\n            console.log(planItem.id);\n            const index = newArray.indexOf(planItem);\n\n            //const index = newArray.findIndex((element: any) => element === planItem);\n            console.log(\"index is\", index);\n\n            if (index !== -1) {\n                newArray.splice(index, 1);\n                console.log(\"plan deleted\");\n                console.log(\"new array is\", newArray);\n                setPlans(newArray);\n            }\n            //plans.filter((i: any) => i.id !== index );\n            //console.log(\"new array is\", plans);\n\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: planItem.id,\n            uuid: uuid(),\n            name: planItem.name,\n            date: planItem.date,\n            years: planItem.years\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n    };\n\n    \n    //const testArray: PlanProps[] = [];\n    \n    const renderCard = (planItem: PlanProps) => {\n        /*const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n            setNewName(event.currentTarget.value);\n        };*/\n        //const planName = planItem.name;\n        //const index = plans.length;\n        //planItem.id = plans.length;\n        \n        //const set = JSON.stringify(localStorage.getItem(\"test\"));\n        //console.log(JSON.parse(set));\n        //console.log(\"PLANS IS \" , plans);\n        \n        //console.log(\"PLANS IS \" , plans);\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        //const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n        //const testArray: PlanProps[] = JSON.parse(stringLoad);\n        //console.log(\"loaded vals\" , testArray[testArray.length-1]);\n        return (\n            <Card style={{ width: \"18rem\" }} className=\"grid\">\n                <Card.Body>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    \n                    <Link to={`Plans/${planItem.uuid}`}>\n                        <button>\n                            Edit Plan\n                        </button>\n                    </Link>\n                    <Card.Text>{planItem.date}</Card.Text>\n                    <button onClick={() => {\n                        console.log(\"button pressed\");\n                        deleteCard(plans, planItem);\n                    }}>-</button>\n                    <button onClick={() => {\n                        copy(planItem);\n                    }}>Duplicate Plan</button>\n                </Card.Body>\n            </Card>\n        );\n    };\n\n\n    //const arrBackup: PlanProps[] = [];\n    /*\n    const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n    console.log(\"LOADED IN: \", stringLoad);\n    const testArray: PlanProps[] = JSON.parse(stringLoad);\n    console.log(\"loaded vals\" , testArray);\n    //localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n    if (plans.length === 1){\n        localStorage.setItem(`plan: ${0}`, JSON.stringify(plans[0]));\n    }\n\n    // temp array that saves the plan info to new key and values in localStorage\n    if (plans.length > 1){\n        localStorage.setItem(`plan: ${plans.length-1}`, JSON.stringify(plans[plans.length-1]));\n    }\n    /*\n    const save = (plans: PlanProps[]) => {\n        //console.log(\"this is plans\", plans);\n        \n        plans.forEach(val => arrBackup.push(Object.assign({}, val)));\n        //const arr = plans;\n        \n        //localStorage.setItem(\"arr\", JSON.stringify(arr));\n        \n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        if (plans.length === 1){\n            localStorage.setItem(`plan: ${0}`, JSON.stringify(plans[0]));\n        }\n\n        // temp array that saves the plan info to new key and values in localStorage\n        if (plans.length > 1){\n            localStorage.setItem(`plan: ${plans.length-1}`, JSON.stringify(plans[plans.length-1]));\n        }\n        \n    };*/\n    \n    /*\n    const load = (planItem: PlanProps) => {\n        const index = planItem.id;\n        localStorage.getItem(`plan:${planItem.id}`);\n        const map = plans.map(planItem =>\n            <li key={planItem.uuid}>{renderCard(planItem)}</li>\n        );\n        console.log(\"map is: \", map);\n        return map;\n    };*/\n    //const [saveTest, useSaveTest] = useState(localStorage.setItem());\n    \n        \n    //renderCard(planItem);\n    /*\n    const test = JSON.stringify(localStorage.getItem(\"Plans Array\"));\n    console.log(\"test:  \", test);\n    const test2: PlanProps = JSON.parse(test);\n    console.log(\"test2: \", test2);\n    */\n   \n   \n    //localStorage.getItem(\"SAVED ARRAY\");\n    \n    //classes = useStyles();\n    //const dispatch = useDispatch();\n    /*\n    const renderItems = (testArray: PlanProps[]) =>{\n        if(testArray){\n            return (\n                <div className=\"grid\">\n                    <button onClick={addPlan}>Add a plan +</button>\n                    {JSON.parse(JSON.stringify(localStorage.getItem(\"Plans Array\")))}\n                    {testArray.map(planItem =>\n                        <li key={planItem.uuid}>{renderCard(planItem)}</li>\n                    )}    \n                    \n                </div>\n            ); \n        }\n    };\n    */\n    \n\n    return (\n        <div className=\"grid\">    \n            <button onClick={addPlan}>Add a plan +</button>\n            {plans.map(planItem =>\n                <li key={planItem.uuid}>{renderCard(planItem)}</li>\n            )}\n        </div>\n    );\n}\n/*\n<Row><Col xs={5} className=\"g-4\"><Card className=\"card\">\n    <Card.Img variant=\"top\" src=\"./Plans/placeholder-image.jpeg\"/>\n    <Card.Body>\n        <Card.Title className=\"title\">\n            <input type=\"Enter name for plan: \" name=\"Plan 1\" />\n        </Card.Title>\n        <Card.Text>This is a test card</Card.Text></Card.Body><Link to=\"/Plan\">\n        <Button variant=\"primary\" >\n                Go to plan</Button></Link><Card.Footer><small className=\"text-muted\">Last updated x mins ago.</small></Card.Footer></Card></Col>\n<Col xs={5} className=\"g-4\"><Card className=\"card\">\n    <Card.Img variant=\"top\" src=\"placeholder-image.jpeg\"/>\n    <Card.Body>\n        <Card.Title className=\"title\">Test Plan</Card.Title>\n        <Card.Text>This is a test card</Card.Text></Card.Body><Link to=\"/Plan\">\n        <Button variant=\"primary\" >\n                Go to plan</Button></Link><Card.Footer><small className=\"text-muted\">Last updated x mins ago.</small></Card.Footer></Card></Col></Row>*/\nexport default Plan;","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction{\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n            courses: new Map<string, CourseProps>(),\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next,removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter((semester: SemesterProps) => {\n            return semester.uuid !== removeSemester.semesterUuid; \n        });\n        next[targetIndex] = {index: next[targetIndex].index, uuid: next[targetIndex].uuid, semesters: newYear};\n        return next;\n    }case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n\n\n\nfunction clearSemesters(years: Array<YearProps>, pusher: (uuid: string, index: number) => void, semesterRemover: (uuid: string, semesterUuid: string) => void, yearRemover: (uuid: string) => void, yearUuid?: string){\n    if(yearUuid !== undefined && getByUUID(years,yearUuid) !== -1){\n        for(const semester of years[getByUUID(years,yearUuid)].semesters){\n            semesterRemover(yearUuid,semester.uuid);\n        }\n    }else if(yearUuid === undefined){\n        const newYears: YearProps[] = new Array<YearProps>();\n        for(const year of years){\n            newYears.push({semesters: [], index: year.index, uuid: year.uuid});\n            yearRemover(year.uuid);\n        }\n        for(const year of newYears){\n            pusher(year.uuid,year.index);\n        }\n    }\n}\n\ninterface Years{\n    value: Array<YearProps>;\n    push: (uuid: string, index: number) => void;\n    putSemester: (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => void;\n    removeSemester: (\n        uuid: string,\n        semesterUuid: string\n    ) => void;\n    removeYear: (\n        uuid: string\n    ) => void;\n    clear: (\n        uuid?: string\n    ) => void;\n}\n\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined ? () => {\n            return new Array<YearProps>();\n        } : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (\n        uuid: string,\n        semesterUuid: string,\n    ) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid\n        };\n        updateYears(action);\n    };\n    const removeYear = (\n        uuid: string\n    ) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid\n        };\n        updateYears(action);\n    };\n    return {value: years, push: addYear, putSemester: addSemester, removeSemester: removeSemester, removeYear: removeYear, clear: (uuid?: string) => {\n        clearSemesters(years,addYear,removeSemester,removeYear,uuid);\n    }};\n}\n\nexport default useYears;\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\n\ninterface AddNewCourseProps {\n    isOpen: boolean;\n    defaultValues: {\n        courseName: string;\n        courseID: string;\n        courseDescription: string;\n    };\n    isEditing: boolean; // if true, then we are editing an existing course\n    onClickClose: () => void;\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            {/* <div className=\"non-modal-overlay\" /> */}\n            <div className=\"modal-add-course\">\n                <button onClick={props.onClickClose}>Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.courseName}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.courseID}\n                            />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.courseDescription}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    onRemoveCourse: (courseToRemove: CourseProps) => void;\n    onClickEdit: (courseToEdit: CourseProps) => void;\n}\n\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.onRemoveCourse(props);\n                }}\n            >\n                {props.name}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useReducer, useState } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\n\ninterface CourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n    payload: CourseProps;\n}\n\n// easy access to the courses\n\nconst courseReducer = (\n    state: Map<string, CourseProps>,\n    action: CourseAction\n): Map<string, CourseProps> => {\n    switch (action.type) {\n    case \"ADD COURSE\":\n        return state.set(action.payload.id, action.payload);\n    case \"REMOVE COURSE\": {\n        const newState = new Map<string, CourseProps>(state);\n        newState.delete(action.payload.id);\n        return newState;\n    }\n    }\n};\n\n// const onRightClickCourse = (event: React.MouseEvent<HTMLDivElement>) => {\n//     event.preventDefault();\n//     console.log(\"Right Clicked\");\n// };\n\nconst courseInit = (\n    courses: Map<string, CourseProps>\n): Map<string, CourseProps> => {\n    if (courses) return courses;\n    else return new Map<string, CourseProps>();\n};\n\ninterface FullSemesterProps extends SemesterProps {\n    removeSemester: () => void;\n}\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [newCourseName, setNewCourseName] = useState<string>(\"\");\n    const [newCourseID, setNewCourseID] = useState<string>(\"\");\n    const [newCourseDescription, setNewCourseDescription] =\n        useState<string>(\"\");\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        props.courses,\n        courseInit\n    );\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        switch (event.target.name) {\n        case \"courseName\":\n            setNewCourseName(event.target.value);\n            break;\n        case \"courseID\":\n            setNewCourseID(event.target.value);\n            break;\n        case \"courseDescription\":\n            setNewCourseDescription(event.target.value);\n            break;\n        }\n    };\n    const onRemoveCourse = (courseToRemove: CourseProps) => {\n        const action: CourseAction = {\n            type: \"REMOVE COURSE\",\n            payload: courseToRemove,\n        };\n        updateCourses(action);\n    };\n\n    const onClickEdit = (courseToEdit: CourseProps) => {\n        setNewCourseName(courseToEdit.name);\n        setNewCourseDescription(courseToEdit.description);\n        setNewCourseID(courseToEdit.id);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newCourse: CourseProps = {\n            id: newCourseID,\n            name: newCourseName,\n            description: newCourseDescription,\n        };\n\n        const action: CourseAction = {\n            type: \"ADD COURSE\",\n            payload: newCourse,\n        };\n\n        updateCourses(action);\n        setNewCourseName(\"\");\n        setNewCourseDescription(\"\");\n        setNewCourseID(\"\");\n        if (isEditing) setIsEditing(false);\n    };\n    const addedCourses = Array.from(courses).map(\n        ([courseID, course]: [string, CourseProps]) => {\n            return (\n                <div key={courseID}>\n                    <Course\n                        onClickEdit={onClickEdit}\n                        onRemoveCourse={onRemoveCourse}\n                        {...course}\n                    />{\" \"}\n                </div>\n            );\n        }\n    );\n\n    return (\n        <>\n            <AddCourse\n                defaultValues={{\n                    courseName: newCourseName,\n                    courseID: newCourseID,\n                    courseDescription: newCourseDescription,\n                }}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={`Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n            >\n                {props.name}\n            </span>\n            <button\n                data-testid={`Remove Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <div className=\"courses\">{addedCourses}</div>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    canSubmit: boolean,\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}\n","import React, { ChangeEvent, FormEvent, useRef, useMemo } from \"react\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {\n    Container,\n    Row,\n    Col,\n    Popover,\n    PopoverContent,\n    Overlay,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport Semester from \"./Semester\";\nimport SemesterForm from \"./SemesterForm\";\n\ninterface FullYearProps extends YearProps {\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    formUuid: string | null;\n    setFormUuid: (newId: string | null) => void;\n    removeSemester: (semesterUuid: string) => void;\n    canSubmit: boolean;\n    clear: () => void;\n    formInit: (uuid: string | null) => void;\n}\n\nfunction Year(props: FullYearProps): JSX.Element {\n    const overlayButton = useRef(null);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters.sort((a: SemesterProps, b: SemesterProps) => {\n            return a.start.getTime() - b.start.getTime();\n        }).map((semester: SemesterProps, index: number, array: Array<SemesterProps>) => {\n            let count = 0;\n            for(let i = 0;i < index; i++){\n                if(semester.name === array[i].name){\n                    count++;\n                }\n            }\n            const newSemester: SemesterProps = {name: count > 0 ? `${semester.name} ${count+1}` : semester.name, end: semester.end, courses: semester.courses, uuid: semester.uuid, start: semester.start};\n            for(let i = index + 1; i < array.length && semester.name === newSemester.name; i++){\n                if(array[i].name === semester.name){\n                    newSemester.name = `${semester.name} 1`;\n                }\n            }\n            return newSemester;\n        });\n    }, [props.semesters]);\n    return (\n        <Container className=\"container-sm\">\n            <Row>\n                <Col>\n                    <Collapsible\n                        trigger={\n                            <button\n                                data-testid={`Year ${props.index} label`}\n                                className=\"trigger\"\n                            >{`Year ${props.index} >`}</button>\n                        }\n                        transitionTime={200}\n                    >\n                        <Row data-testid=\"collapsible-content\">\n                            {sortedSemesters.map(\n                                (semesterProps: SemesterProps, index: number) => {\n                                    return (\n                                        <Col\n                                            data-testid={`Year ${\n                                                props.index\n                                            } semester ${index + 1}`}\n                                            key={semesterProps.uuid}\n                                        >\n                                            <Semester {...semesterProps} removeSemester={() =>{\n                                                props.removeSemester(semesterProps.uuid);\n                                            }}\n                                            />\n                                        </Col>\n                                    );\n                                }\n                            )}\n\n                            <Col>\n                                <button\n                                    data-testid={`trigger ${props.index}`}\n                                    className=\"trigger\"\n                                    ref={overlayButton}\n                                    onClick={() => {\n                                        props.formInit(\n                                            props.formUuid === props.uuid\n                                                ? null\n                                                : props.uuid\n                                        );\n                                    }}\n                                >\n                                    +\n                                </button>\n                                <Overlay\n                                    target={overlayButton}\n                                    placement=\"right-end\"\n                                    show={props.formUuid === props.uuid}\n                                    onHide={() => {\n                                        props.formInit(null);\n                                    }}\n                                    rootClose={true}\n                                    transition={false}\n                                >\n                                    <Popover id=\"popover-basic\">\n                                        <PopoverContent>\n                                            <div data-testid={`semester-form ${props.index}`}>\n                                                <SemesterForm\n                                                    canSubmit={props.canSubmit}\n                                                    handleInput={props.handleInput}\n                                                    handleSubmit={props.handleSubmit}\n                                                />\n                                            </div>\n                                        </PopoverContent>\n                                    </Popover>\n                                </Overlay>\n                            </Col>\n                        </Row>\n                    </Collapsible>\n                </Col>\n                <Col>\n                    <button onClick={props.clear} data-testid={`clear-year ${props.index}`}>Clear</button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Year;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n\n    source: string\n\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\ninterface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n\n\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    problems: Array<Problem> | null;\n}\n\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React, { ChangeEvent, FormEvent, useState} from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport CourseProps from \"../interfaces/Course\";\nimport Year from \"./Year\";\nimport useProblems, {Problem} from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport validate from \"../util/validation/dates\";\n\n\ninterface SchedulerProps {\n    csv?: string;\n    json?: string;\n}\n\nfunction getStartingYears(): Array<YearProps>{\n    const year = new Date().getFullYear();\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = {index: 1, uuid: uuid(), semesters: []};\n    yearOne.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year}-08-31`), end: new Date(`${year}-12-15`), courses: new Map<string, CourseProps>()});\n    yearOne.semesters.push({uuid: uuid(), name: \"spring\", start: new Date(`${year+1}-02-07`), end: new Date(`${year+1}-05-26`), courses: new Map<string, CourseProps>()});\n    const yearTwo: YearProps = {index: 2, uuid: uuid(), semesters: []};\n    yearTwo.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year+1}-08-31`), end: new Date(`${year+1}-12-15`), courses: new Map<string, CourseProps>()});\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean{\n    for(const problem of problems){\n        if(problem.error){\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears(getStartingYears);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const [submissionAllowed, setSubmissionAllowed] = useState(false);\n        const problems = useProblems();\n        const semesterFormInit = (uuid: string | null) => {\n            setCurrentForm(uuid);\n            setSubmissionAllowed(false);\n            setNewName(null);\n            setNewStart(null);\n            setNewEnd(null);\n            problems.clear(\"semester-form\");\n        };\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n            case \"season\": {\n                setNewName(event.target.value);\n                break;\n            }case \"starts\": {\n                const semesters = years.value[getByUUID(years.value,currentForm as string)].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(newDate,newEnd !== null ? new Date(newEnd) : null, semesters, \"starts\");\n                if(newEnd === null){\n                    problems.clear(\"semester-form\");\n                    if(newProblems.length === 1){\n                        problems.add(newProblems[0]);\n                    }\n                }else{\n                    problems.clear(\"semester-form\");\n                    for(const problem of newProblems){\n                        problems.add(problem);\n                    }\n                }\n                setNewStart(event.target.value);\n                break;\n            }case \"ends\": {\n                const semesters = years.value[getByUUID(years.value,currentForm as string)].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(newStart !== null ? new Date(newStart) : null,newDate, semesters, \"ends\");\n                if(newEnd === null){\n                    problems.clear(\"semester-form\");\n                    if(newProblems.length === 1){\n                        problems.add(newProblems[0]);\n                    }\n                }else{\n                    problems.clear(\"semester-form\");\n                    for(const problem of newProblems){\n                        problems.add(problem);\n                    }\n                }\n                setNewEnd(event.target.value);\n                break;\n            }\n            }\n\n        };\n        const handleSemesterSubmit = (\n            event: FormEvent<HTMLFormElement>,\n            id: string\n        ) => {\n            event.preventDefault();\n            if (newName !== null && newEnd !== null && newStart !== null) {\n                years.putSemester(\n                    id,\n                    uuid(),\n                    new Date(newStart as string),\n                    new Date(newEnd as string),\n                    newName as string\n                );\n                setNewName(null);\n                setNewStart(null);\n                setNewEnd(null);\n                setCurrentForm(null);\n                problems.clear(\"semester-form\");\n            }\n        };\n        if(newName && newEnd && newStart && !submissionAllowed && !hasError(problems.value)){\n            setSubmissionAllowed(true);\n        }else if((!newName || !newEnd || !newStart || hasError(problems.value)) && submissionAllowed){\n            setSubmissionAllowed(false);\n        }\n        return (\n            <>\n                <button\n                    onClick={() => {\n                        years.clear();\n                    }}\n                    data-testid=\"clear-button\"\n                >\n                    Clear\n                </button>\n                <div>\n                    {years.value.map((props: YearProps, i: number) => {\n                        return (\n                            <div data-testid={\"Year\"} key={props.uuid}>\n                                <Year\n                                    canSubmit={submissionAllowed}\n                                    handleInput={handleSemesterInput}\n                                    handleSubmit={(\n                                        event: FormEvent<HTMLFormElement>\n                                    ) => {\n                                        handleSemesterSubmit(event, props.uuid);\n                                    }}\n                                    semesters={props.semesters}\n                                    uuid={props.uuid}\n                                    index={i + 1}\n                                    formUuid={currentForm}\n                                    setFormUuid={setCurrentForm}\n                                    removeSemester={(\n                                        semesterUuid: string\n                                    ) => {\n                                        years.removeSemester(props.uuid,semesterUuid);\n                                    }}\n                                    clear={() => {\n                                        years.clear(props.uuid);\n                                    }}\n                                    formInit={semesterFormInit}\n                                />\n                            </div>\n                        );\n                    })}\n                    <button\n                        data-testid=\"add-year-button\"\n                        onClick={() => {\n                            years.push(uuid(), years.value.length);\n                        }}\n                    >\n                        +\n                    </button>\n                </div>\n                <ErrorStack problems={problems.value}/>\n            </>\n        );\n    }\n    return <></>;\n}\n","import React from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Link, HashRouter as Router, Route, HashRouter } from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport Plan from \"./components/Plan\";\nimport { Button } from \"react-bootstrap\";\nimport { Scheduler } from \"./components/Scheduler\";\n\n\n// Master Plan View\nconst IndexPage = () => {\n    return (\n        <div>\n            <h1 className=\"center\">UD CIS Scheduler</h1>\n            <h3 className=\"center\">Designed By: Lucas, Max, and Amani</h3>\n            <div role=\"alert\" className=\"welcome\">\n                <p>Welcome to the UD Degree Planner!</p>\n                <b>Click Add/Edit Plan below to Get Started</b>\n            </div>\n            <Plan uuid=\"\" id={0} />\n        </div>\n    );\n    \n};\n\n\nconst PlansPage = () => {\n    return (\n        <>\n            <Scheduler/>\n            <Link to =\"/\">\n                <Button>Back\n                </Button>\n            </Link>\n            {console.log(\"the uuid is : \", localStorage.getItem(\"plan: 0\"))}\n        </>\n    );\n};\n\n\nfunction App(): JSX.Element {\n\n    return (\n        <div className=\"container\">\n            <HashRouter>\n                <Switch>\n                    <Router>\n                        <Route exact path=\"/\" component={IndexPage}></Route>\n                        <Route path=\"/Plans/:uuid\" component={PlansPage}></Route>\n                    </Router>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}