{"version":3,"sources":["hooks/useYears.ts","hooks/useProblems.ts","components/ErrorStack.tsx","hooks/useCourses.ts","util/validation/dates.ts","components/Year/YearHeader.tsx","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year/SemesterList.tsx","components/Year/FormTrigger.tsx","components/Year/SemesterForm.tsx","components/Year/Year.tsx","components/Scheduler.tsx","util/events/SemesterFormEvents.ts","components/Requirements.tsx","components/SchedulerWalkthrough.tsx","components/MainPageWalkthrough.tsx","components/NavigationBar.tsx","components/PlanPage.tsx","components/IndexPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getByUUID","state","uuid","i","length","yearReducer","prev","action","next","map","x","type","semAction","targetIndex","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","index","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","years","updateYears","putSemester","removeYears","yearRemover","yearUuid","clearYears","pusher","semesterRemover","newYears","year","clearSemesters","problemReducer","newState","error","message","source","problemType","realAction","splice","problem","output","initializer","ErrorStack","props","problems","ctr","className","ReactDOM","createPortal","document","getElementById","body","courseReducer","course","newCourse","id","payload","courseInit","courses","useCourses","initialCourses","updateCourses","courseList","removeCourse","validate","existing","getTime","validate_both_dates","validate_single_date","date","YearHeader","Container","fluid","trigger","Dropdown","as","ButtonGroup","Button","onClick","clearYear","variant","Toggle","split","Menu","Item","style","color","transitionTime","Card","Row","md","overflow","padding","children","AddCourse","isOpen","onClickClose","Form","onSubmit","onClickSubmit","Group","Col","controlId","Label","Control","placeholder","defaultValues","onChange","Text","href","credits","Check","label","checked","coreqs","includes","prereqs","description","height","isEditing","Course","draggable","display","onClickEdit","getEmptyCourse","Semester","useState","setNewCourse","setIsOpen","setIsEditing","semesterCourses","useMemo","totalCredits","reduce","previousValue","currentValue","event","preventDefault","handleCourseSubmit","courseToAdd","parseInt","Header","justifyContent","clearCourses","ListGroup","ListGroupItem","Footer","SemesterList","sortedSemesters","sort","a","b","array","count","newSemester","semesterProps","FormTrigger","overlayButton","useRef","bg","flex","ref","setForm","currentForm","YearUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","submissionAllowed","handleSemesterInput","handleSemesterSubmit","getStartingYears","Date","getFullYear","yearOne","yearTwo","hasError","Scheduler","unmetRequirements","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","setCurrentForm","setSubmissionAllowed","dispatchOutput","add","resolve","clear","useProblems","newProblems","newDate","handleSemesterFormInput","resetForm","addSemester","handleSemesterFormSubmit","useEffect","requirements","newCourses","requirement","Table","join","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","width","FormControl","el","title","SchedulerWalkthrough","run","steps","disableBeacon","content","joyride","setJoyride","marginRight","textAlign","continuous","showProgress","showSkipButton","styles","tooltipContainer","buttonNext","backgroundColor","buttonBack","locale","last","skip","MainPageWalkthrough","marginLeft","opacity","cursor","NavigationBar","Navbar","expand","Brand","Link","to","Collapse","Nav","NavDropdown","Divider","PlanPage","plans","setPlans","renderCard","planItem","localStorage","setItem","JSON","stringify","alignItems","Body","Title","fontWeight","fontSize","console","log","copy","oldArray","window","confirm","newArray","indexOf","deleteCard","toLocaleDateString","arr","IndexPage","Plan","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.b5f50620.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\nfunction removeYears(\n    years: Array<YearProps>,\n\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && yearUuid !== \"\") {\n        yearRemover(yearUuid);\n    } else if (yearUuid === undefined || yearUuid === \"\") {\n        for (const year of years) {\n            yearRemover(year.uuid);\n        }\n    }\n}\nfunction clearSemesters(\n    years: Array<YearProps>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearProps[] = new Array<YearProps>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearProps>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string\n    ) => void;\n\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clearYears: (uuid?: string) => void;\n    /**removes a given year. If no year is supplied, deletes all years. */\n    removeYears: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearProps; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearProps>();\n            }\n            : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeYear = (uuid: string) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        };\n        updateYears(action);\n    };\n    return {\n        value: years,\n        push: addYear,\n        putSemester: addSemester,\n        removeSemester: removeSemester,\n        removeYears: (uuid?: string) => {\n            removeYears(years, removeYear, uuid);\n        },\n        clearYears: (uuid?: string) => {\n            clearSemesters(years, addYear, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps {\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element {\n    if (props.problems !== null) {\n        const ctr = [\n            <div className=\"error-counter\" key={0}>\n                {props.problems.length}{\" \"}\n                {props.problems.length === 1 ? \"error\" : \"errors\"}\n            </div>,\n        ];\n\n        return ReactDOM.createPortal(\n            \n            <div className=\"error-modal\">\n                <div className=\"error-stack\">\n                    {ctr.concat(\n                        props.problems.map(\n                            (problem: Problem, index: number) => {\n                                return (\n                                    <span\n                                        className={\n                                            problem.error ? \"error\" : \"warning\"\n                                        }\n                                        key={index + 1}\n                                        data-testid={\n                                            problem.error ? \"error\" : \"warning\"\n                                        }\n                                    >\n                                        {problem.message}\n                                    </span>\n                                );\n                            }\n                        )\n                    )}\n                </div>\n            </div>,\n\n            document.getElementById(\"modal-view\") as Element || document.body\n        );\n    } else {\n        return <span data-testid=\"no-errors\" />;\n    }\n}\n","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { getByUUID } from \"./useYears\";\n\nexport interface AbstractCourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\" | \"UPDATE COURSE\";\n}\n\nexport interface AddCourseAction {\n    type: \"ADD COURSE\";\n    newCourse: CourseProps;\n}\n\nexport interface RemoveCourseAction {\n    type: \"REMOVE COURSE\";\n    uuid: string;\n}\n\nexport interface UpdateCourseAction {\n    type: \"UPDATE COURSE\";\n    id: string;\n    payload: CourseProps;\n}\n\n// easy access to the courses\n\nconst courseReducer = (\n    state: Array<CourseProps>,\n    action: AbstractCourseAction\n): Array<CourseProps> => {\n    const newState = state.map((course: CourseProps) => {\n        return course;\n    });\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const realAction = action as AddCourseAction;\n        newState.push(realAction.newCourse);\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const realAction = action as RemoveCourseAction;\n        const target = getByUUID(newState, realAction.uuid);\n        if (target !== -1) {\n            newState.splice(target, 1);\n        }\n        return newState;\n    }\n    case \"UPDATE COURSE\": {\n        const realAction = action as UpdateCourseAction;\n        const target = getByUUID(newState, realAction.id);\n        newState.splice(target, 1);\n        newState.push(realAction.payload);\n        return newState;\n    }\n    default:\n        throw new Error(\"Unknown action type\");\n    }\n};\n\nconst courseInit = (courses?: Array<CourseProps>): Array<CourseProps> => {\n    return courses === undefined ? [] : courses;\n};\n\nexport interface Courses {\n    courseList: Array<CourseProps>;\n    removeCourse: (courseID: string) => void;\n    push: (course: CourseProps) => void;\n}\nfunction useCourses(initialCourses?: Array<CourseProps>): Courses {\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        initialCourses,\n        courseInit\n    );\n\n    const push = (course: CourseProps) => {\n        //check if course is already in the list\n        const target = getByUUID(courses, course.uuid);\n        if (target !== -1) {\n            updateCourses({\n                type: \"UPDATE COURSE\",\n                id: course.uuid,\n                payload: course,\n            } as UpdateCourseAction);\n        } else {\n            updateCourses({\n                type: \"ADD COURSE\",\n                newCourse: course,\n            } as AddCourseAction);\n        }\n    };\n\n    const remove = (uuid: string) => {\n        const action: RemoveCourseAction = {\n            type: \"REMOVE COURSE\",\n            uuid: uuid,\n        };\n        updateCourses(action);\n    };\n\n    return {\n        courseList: courses,\n        removeCourse: remove,\n        push: push,\n    };\n}\nexport default useCourses;\n","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React from \"react\";\nimport {\n    Container,\n    Row,\n    Card,\n    Button,\n    ButtonGroup,\n    Dropdown,\n} from \"react-bootstrap\";\nimport Collapsible from \"react-collapsible\";\n\ninterface YearHeaderProps {\n    index: number;\n    clearYear: () => void;\n    removeYear: () => void;\n    children: JSX.Element | JSX.Element[];\n}\n\nexport default function YearHeader(props: YearHeaderProps): JSX.Element {\n    return (\n        <Container fluid>\n            <Collapsible\n                trigger={\n                    <div\n                        data-testid={`Year ${props.index} label`}\n                        className=\"year-collapsible-header\"\n                    >\n                        {`Year ${props.index}`}\n                        <Dropdown as={ButtonGroup}>\n                            <Button\n                                onClick={props.clearYear}\n                                data-testid={`clear-year ${props.index}`}\n                                variant=\"success\"\n                            >\n                                Clear Year\n                            </Button>\n\n                            <Dropdown.Toggle\n                                split\n                                variant=\"success\"\n                                id=\"dropdown-split-basic\"\n                            />\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    style={{ color: \"#DC3E45\" }}\n                                    onClick={props.removeYear}\n                                    data-testid={`remove-year ${props.index}`}\n                                >\n                                    Remove Year\n                                </Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </div>\n                }\n                transitionTime={200}\n            >\n                <Card className=\" p-2\">\n                    <Row\n                        md={4}\n                        style={{ overflow: \"auto\", padding: \"1.25rem 1.35rem\" }}\n                        data-testid=\"collapsible-content\"\n                    >\n                        {props.children}\n                    </Row>\n                </Card>\n            </Collapsible>\n        </Container>\n    );\n}\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface AddNewCourseProps {\n    /**All of the existing courses. */\n    courses: CourseProps[];\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseProps;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <button\n                    onClick={props.onClickClose}\n                    data-testid=\"close-course-form\"\n                >\n                    Close Button\n                </button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                value={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                value={props.defaultValues.id}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                This field is used to check requirements. The\n                                spelling should match requirements exactly\n                            </Form.Text>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                value={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        data-testid={`co-${course.name}`}\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"courseCorequisites\"\n                                        value={course.id}\n                                        checked={props.defaultValues.coreqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        data-testid={`pre-${course.name}`}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"coursePrerequisites\"\n                                        value={course.id}\n                                        checked={props.defaultValues.prereqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            value={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button\n                        variant=\"success\"\n                        type=\"submit\"\n                        data-testid=\"submit-course-button\"\n                    >\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    /**A function that deletes this course from the global map containing all courses. */\n    removeCourse: (uuid: string) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (uuid: string) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div draggable={true} data-testid={`Course ${props.id}: ${props.name}`}>\n            <div style={{ display: \"inline-block\" }}>\n                {`${props.credits} ${props.name}`}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props.uuid);\n                }}\n            >\n                Edit\n            </button>\n            <button\n                style={{ display: \"inline-block\", color: \"#DC3E45\" }}\n                className=\"trigger\"\n                data-testid=\"remove-course\"\n                onClick={() => {\n                    props.removeCourse(props.uuid);\n                }}\n            >\n                Remove\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState, useMemo } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport {\n    ListGroup,\n    ListGroupItem,\n    Card,\n    Dropdown,\n    ButtonGroup,\n    Button,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\nimport { v4 as uuid } from \"uuid\";\nimport { getByUUID } from \"../hooks/useYears\";\n\ninterface FullSemesterProps extends SemesterProps {\n    /**The uuid's of all exiting courses */\n    courses: Array<CourseProps>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that removes a course from the global list. */\n    removeCourse: (uuid: string) => void;\n    /**A function that pushes courses into the global list. */\n    push: (course: CourseProps) => void;\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\nfunction getEmptyCourse(semester: string): CourseProps {\n    return {\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: semester,\n        coreqs: [],\n        prereqs: [],\n        uuid: uuid(),\n    };\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [newCourse, setNewCourse] = useState<CourseProps>(() => {\n        return getEmptyCourse(props.uuid);\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const courseToAdd: CourseProps = { ...newCourse };\n\n        switch (event.target.name) {\n        case \"courseName\":\n            courseToAdd.name = event.target.value;\n            break;\n        case \"courseID\":\n            courseToAdd.id = event.target.value;\n            break;\n        case \"courseDescription\":\n            courseToAdd.description = event.target.value;\n            break;\n        case \"courseCredits\":\n            courseToAdd.credits = parseInt(event.target.value);\n            break;\n        case \"courseCorequisites\":\n            courseToAdd.coreqs = event.target.checked\n                ? [...courseToAdd.coreqs, event.target.value]\n                : courseToAdd.coreqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        case \"coursePrerequisites\":\n            courseToAdd.prereqs = event.target.checked\n                ? [...courseToAdd.prereqs, event.target.value]\n                : courseToAdd.prereqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        }\n        setNewCourse(courseToAdd);\n    };\n\n    const onClickEdit = (uuid: string) => {\n        setNewCourse(props.courses[getByUUID(props.courses, uuid)]);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        props.push(newCourse);\n        if (!isEditing) {\n            setNewCourse(getEmptyCourse(props.uuid));\n        }\n    };\n    const semesterCourses = useMemo(() => {\n        return props.courses.filter((course: CourseProps) => {\n            return course.semester === props.uuid;\n        });\n    }, [props.courses]);\n\n    const totalCredits = useMemo(() => {\n        return semesterCourses.reduce(\n            (previousValue: CourseProps, currentValue: CourseProps) => {\n                return {\n                    id: \"\",\n                    description: \"\",\n                    name: \"\",\n                    credits: previousValue.credits + currentValue.credits,\n                    semester: \"\",\n                    coreqs: [],\n                    prereqs: [],\n                    uuid: \"\",\n                };\n            },\n            {\n                id: \"\",\n                description: \"\",\n                name: \"\",\n                credits: 0,\n                coreqs: [],\n                prereqs: [],\n                semester: \"\",\n                uuid: \"\",\n            }\n        ).credits;\n    }, [semesterCourses]);\n\n    return (\n        <>\n            <AddCourse\n                courses={props.courses}\n                defaultValues={newCourse}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                    setNewCourse(getEmptyCourse(props.uuid));\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n            <Card>\n                <Card.Header data-testid={\"semester-name\"}>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                        }}\n                    >\n                        {`${props.name} `}\n                        <Dropdown as={ButtonGroup}>\n                            <Button\n                                onClick={() => {\n                                    setIsOpen(true);\n                                }}\n                                data-testid=\"add-course-button\"\n                                variant=\"success\"\n                            >\n                                Add Course\n                            </Button>\n\n                            <Dropdown.Toggle\n                                split\n                                variant=\"success\"\n                                id=\"dropdown-split-basic\"\n                                data-testid=\"clear-courses-toggle\"\n                            />\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    onClick={props.clearCourses}\n                                    data-testid=\"clear-courses-button\"\n                                >\n                                    Clear Semester\n                                </Dropdown.Item>\n                                <Dropdown.Item\n                                    style={{ color: \"#DC3E45\" }}\n                                    data-testid={\"remove-semester\"}\n                                    onClick={props.removeSemester}\n                                >\n                                    Remove Semester\n                                </Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </div>\n                </Card.Header>\n                {/* \n                <button\n                    \n                    className=\"trigger\"\n                    \n                >\n                    -\n                </button> */}\n\n                <ListGroup className=\"courses\">\n                    {semesterCourses.map((course: CourseProps) => {\n                        return (\n                            <ListGroupItem\n                                className=\"course-item\"\n                                key={course.id}\n                            >\n                                {\n                                    <Course\n                                        {...course}\n                                        onClickEdit={onClickEdit}\n                                        removeCourse={props.removeCourse}\n                                    />\n                                }\n                            </ListGroupItem>\n                        );\n                    })}\n                </ListGroup>\n                {/* <button\n                    className=\"trigger\"\n                    \n                    \n                >\n                    +\n                </button>\n                <br />\n                <button\n                    \n                    \n                >\n                    clear\n                </button> */}\n\n                <Card.Footer\n                    data-testid=\"credits-count\"\n                    className=\"text-muted\"\n                >{`Credits: ${totalCredits}`}</Card.Footer>\n            </Card>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { useMemo } from \"react\";\nimport SemesterProps from \"../../interfaces/Semester\";\nimport Col from \"react-bootstrap/Col\";\nimport Semester from \"../Semester\";\nimport { Courses } from \"../../hooks/useCourses\";\n\ninterface SemesterListProps {\n    removeSemester: (uuid: string) => void;\n    clearCourses: (semesterUuid: string) => void;\n    courses: Courses;\n    semesters: Array<SemesterProps>;\n}\n\nexport default function SemesterList(props: SemesterListProps): JSX.Element {\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterProps, b: SemesterProps) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterProps,\n                    index: number,\n                    array: Array<SemesterProps>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterProps = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n\n    return (\n        <>\n            {sortedSemesters.map(\n                (semesterProps: SemesterProps, index: number) => {\n                    return (\n                        <Col\n                            className=\"mb-3\"\n                            data-testid={`semester ${index + 1}`}\n                            key={semesterProps.uuid}\n                        >\n                            <Semester\n                                courses={props.courses.courseList}\n                                {...semesterProps}\n                                removeSemester={() => {\n                                    props.removeSemester(semesterProps.uuid);\n                                }}\n                                push={props.courses.push}\n                                removeCourse={props.courses.removeCourse}\n                                clearCourses={() => {\n                                    props.clearCourses(semesterProps.uuid);\n                                }}\n                            />\n                        </Col>\n                    );\n                }\n            )}\n        </>\n    );\n}\n","import React, { useRef } from \"react\";\nimport { Col, Card, Button } from \"react-bootstrap\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Overlay from \"react-bootstrap/Overlay\";\n\ninterface FormTriggerProps {\n    currentForm: string | null;\n    setForm: (newForm: string | null) => void;\n    YearUuid: string;\n    children: JSX.Element;\n}\n\nexport default function FormTrigger(props: FormTriggerProps): JSX.Element {\n    const overlayButton = useRef(null);\n    return (\n        <>\n            <Col>\n                <Card\n                    bg=\"light\"\n                    className=\"add-semester-card\"\n                    style={{ flex: \"0 0 auto\" }}\n                >\n                    <Button\n                        data-testid=\"open-semester-form\"\n                        ref={overlayButton}\n                        onClick={() => {\n                            props.setForm(\n                                props.currentForm === props.YearUuid\n                                    ? null\n                                    : props.YearUuid\n                            );\n                        }}\n                        id=\"add-semester-button\"\n                    >\n                        Add a Semester +\n                    </Button>\n                </Card>\n            </Col>\n            <Col data-testid=\"form-trigger\">\n                <Overlay\n                    target={overlayButton}\n                    placement=\"top\"\n                    show={props.currentForm === props.YearUuid}\n                    onHide={() => {\n                        props.setForm(null);\n                    }}\n                    rootClose={true}\n                    transition={false}\n                >\n                    <Popover id=\"popover-basic\" data-testid=\"popover\">\n                        <PopoverContent>\n                            <div data-testid={\"semester-form\"}>\n                                {props.children}\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                </Overlay>\n            </Col>\n        </>\n    );\n}\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React from \"react\";\nimport YearHeader from \"./YearHeader\";\nimport SemesterList from \"./SemesterList\";\nimport FormTrigger from \"./FormTrigger\";\nimport SemesterForm from \"./SemesterForm\";\nimport CourseProps from \"../../interfaces/Course\";\nimport { ChangeEvent, FormEvent } from \"react\";\nimport { Courses } from \"../../hooks/useCourses\";\nimport SemesterProps from \"../../interfaces/Semester\";\n\nexport interface FullYearProps {\n    clearYear: () => void;\n    removeYear: () => void;\n    removeSemester: (uuid: string) => void;\n    courses: Courses;\n    index: number;\n    uuid: string;\n    handleSemesterSubmit: (\n        event: FormEvent<HTMLFormElement>,\n        uuid: string\n    ) => void;\n    handleSemesterInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    semesters: Array<SemesterProps>;\n    currentForm: string | null;\n    setForm: (newForm: string | null) => void;\n    submissionAllowed: boolean;\n}\n\nexport default function Year(props: FullYearProps): JSX.Element {\n    return (\n        <div data-testid={`Year ${props.index}`} key={props.uuid}>\n            <YearHeader\n                index={props.index}\n                clearYear={() => {\n                    props.clearYear();\n                }}\n                removeYear={() => {\n                    props.removeYear();\n                }}\n            >\n                <SemesterList\n                    semesters={props.semesters}\n                    courses={props.courses}\n                    removeSemester={(semesterUuid: string) => {\n                        props.removeSemester(semesterUuid);\n                    }}\n                    clearCourses={(semesterUuid: string) => {\n                        for (const course of props.courses.courseList.filter(\n                            (course: CourseProps) => {\n                                return course.semester === semesterUuid;\n                            }\n                        )) {\n                            props.courses.removeCourse(course.uuid);\n                        }\n                    }}\n                />\n                <FormTrigger\n                    currentForm={props.currentForm}\n                    setForm={props.setForm}\n                    YearUuid={props.uuid}\n                >\n                    <SemesterForm\n                        canSubmit={props.submissionAllowed}\n                        handleInput={props.handleSemesterInput}\n                        handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                            props.handleSemesterSubmit(event, props.uuid);\n                        }}\n                    />\n                </FormTrigger>\n            </YearHeader>\n        </div>\n    );\n}\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport useCourses from \"../hooks/useCourses\";\nimport { Table, Button, Dropdown, ButtonGroup } from \"react-bootstrap\";\nimport {\n    handleSemesterFormInput,\n    handleSemesterFormSubmit,\n} from \"../util/events/SemesterFormEvents\";\nimport Year from \"./Year/Year\";\n\ninterface SchedulerProps {\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n}\n\nfunction getStartingYears(): Array<YearProps> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearProps = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    const years = useYears(getStartingYears);\n\n    const courses = useCourses();\n    //The requirements for the degree that are not present in the plan\n    const [unmetRequirements, setUnmetRequirements] = useState<Array<string>>(\n        []\n    );\n    //The name of the new semester (null if the form is closed or nothing has been entered)\n    const [newName, setNewName] = useState<string | null>(null);\n    //The starting date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newStart, setNewStart] = useState<string | null>(null);\n    //The ending date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newEnd, setNewEnd] = useState<string | null>(null);\n    //The semester form that is currently open; kept track of here to ensure no more than 1 of these forms can be active at once\n    const [currentForm, setCurrentForm] = useState<string | null>(null);\n    //Whether or not the form to create a new semester can be submitted\n    const [submissionAllowed, setSubmissionAllowed] = useState(false);\n    //The problems with the user's current inputs\n    const problems = useProblems();\n    const setForm = (uuid: string | null) => {\n        setCurrentForm(uuid);\n        setSubmissionAllowed(false);\n        setNewName(null);\n        setNewStart(null);\n        setNewEnd(null);\n        problems.clear(\"semester-form\");\n    };\n    const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n        handleSemesterFormInput(\n            event,\n            newStart,\n            newEnd,\n            setNewName,\n            setNewStart,\n            setNewEnd,\n            years,\n            currentForm,\n            problems\n        );\n    };\n\n    const handleSemesterSubmit = (\n        event: FormEvent<HTMLFormElement>,\n        id: string\n    ) => {\n        handleSemesterFormSubmit(\n            event,\n            id,\n            newName,\n            newStart,\n            newEnd,\n            () => {\n                setForm(null);\n            },\n            years.putSemester\n        );\n    };\n\n    //set if courses match requirements using props.requirements\n    useEffect(() => {\n        const requirements = props.requirements;\n        const newCourses = Array<string>();\n\n        for (const requirement of requirements) {\n            if (getByUUID(courses.courseList, requirement) === -1) {\n                newCourses.push(requirement);\n            }\n        }\n        setUnmetRequirements(newCourses);\n    }, [props.requirements, courses.courseList]);\n\n    if (\n        newName &&\n        newEnd &&\n        newStart &&\n        !submissionAllowed &&\n        !hasError(problems.value)\n    ) {\n        setSubmissionAllowed(true);\n    } else if (\n        (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n        submissionAllowed\n    ) {\n        setSubmissionAllowed(false);\n    }\n    return (\n        <>\n            <h1 className=\"center \">Course Schedule</h1>\n\n            <div className=\"degree-requirements-wrapper\">\n                <div\n                    className=\"degree-requirements\"\n                    data-testid=\"degree-requirements\"\n                >\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th>Degree Requirements</th>\n                                <th>Unmet Requirements</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Computer Science</td>\n                                <td>{unmetRequirements.join(\", \")}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n            <div>\n                {years.value.map((props: YearProps) => {\n                    return (\n                        <Year\n                            key={props.uuid}\n                            clearYear={() => {\n                                years.clearYears(props.uuid);\n                            }}\n                            removeYear={() => {\n                                years.removeYears(props.uuid);\n                            }}\n                            removeSemester={(semesterUuid: string) => {\n                                years.removeSemester(props.uuid, semesterUuid);\n                            }}\n                            courses={courses}\n                            index={props.index}\n                            uuid={props.uuid}\n                            handleSemesterSubmit={handleSemesterSubmit}\n                            handleSemesterInput={handleSemesterInput}\n                            semesters={props.semesters}\n                            currentForm={currentForm}\n                            setForm={setForm}\n                            submissionAllowed={submissionAllowed}\n                        />\n                    );\n                })}\n\n                <div className=\"center\">\n                    <Dropdown id=\"add-year-dropdown\" as={ButtonGroup}>\n                        <Button\n                            onClick={() => {\n                                years.push(uuid(), years.value.length + 1);\n                            }}\n                            data-testid=\"add-year-button\"\n                            variant=\"success\"\n                        >\n                            Add Year +\n                        </Button>\n\n                        <Dropdown.Toggle\n                            split\n                            variant=\"success\"\n                            id=\"dropdown-split-basic\"\n                            data-testid=\"clear-remove-years-toggle\"\n                        />\n\n                        <Dropdown.Menu>\n                            <Dropdown.Item\n                                style={{ color: \"#DC3E45\" }}\n                                onClick={() => {\n                                    years.clearYears();\n                                }}\n                                data-testid=\"clear-years-button\"\n                            >\n                                Clear Years\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                style={{ color: \"#DC3E45\" }}\n                                onClick={() => {\n                                    years.removeYears();\n                                }}\n                                data-testid=\"remove-years-button\"\n                            >\n                                Remove All Years\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            </div>\n\n            <ErrorStack problems={problems.value} />\n        </>\n    );\n}\n","import { getByUUID, Years } from \"../../hooks/useYears\";\nimport validate from \"../validation/dates\";\nimport { ChangeEvent } from \"react\";\nimport { ProblemsInterface } from \"../../hooks/useProblems\";\nimport {v4 as uuid} from \"uuid\";\nimport { FormEvent } from \"react\";\n\nexport function handleSemesterFormInput(event: ChangeEvent<HTMLInputElement>, newStart: string | null, newEnd: string | null, setNewName: (name: string | null) => void, setNewStart: (start: string | null) => void, setNewEnd: (end: string | null) => void, years: Years, currentForm: string | null, problems: ProblemsInterface): void{\n    switch (event.target.name) {\n    case \"season\": {\n        setNewName(event.target.value);\n        break;\n    }\n    case \"starts\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newDate,\n            newEnd !== null ? new Date(newEnd) : null,\n            semesters,\n            \"starts\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewStart(event.target.value);\n        break;\n    }\n    case \"ends\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newStart !== null ? new Date(newStart) : null,\n            newDate,\n            semesters,\n            \"ends\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewEnd(event.target.value);\n        break;\n    }\n    }\n}\n\nexport function handleSemesterFormSubmit(event: FormEvent<HTMLFormElement>, id: string, newName: string | null, newStart: string | null, newEnd: string | null, resetForm: () => void, addSemester: (id: string, uuid: string, start: Date, end: Date, name: string) => void): void{\n    event.preventDefault();\n    if (newName !== null && newEnd !== null && newStart !== null) {\n        addSemester(\n            id,\n            uuid(),\n            new Date(newStart),\n            new Date(newEnd),\n            newName\n        );\n        resetForm();\n    }\n}","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3 className=\"center\">Computer Science Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                            data-testid=\"remove-requirement\"\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                        title=\"requirement-input\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                        data-testid=\"submit-requirement\"\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport ReactJoyride from \"react-joyride\";\n\nconst SchedulerWalkthrough: React.FunctionComponent = () => {\n    const [joyride, setJoyride] = useState({\n        run: false,\n        steps: [\n            {\n                title: \"Welcome to the Scheduler Page!\",\n                disableBeacon: true,\n                target: \".degree-requirements-wrapper\",\n                content:\n                    \"This is the page where you can edit the details of your degree plan.\",\n            },\n            {\n                title: \"Start here with your first year.\",\n                target: \".container-fluid\",\n                content:\n                    \"This is where you can begin to add the courses for your degree plan. Enter course name, course ID, description, whether it is a pre/corequisite and a number of credits. Or hit the dropdown to reset/remove the current semester.\",\n            },\n            {\n                title: \"Check which degree requirements are unmet here!\",\n                target: \".table\",\n                content:\n                    \"Here, you can find the requirements that you listed on the Modify Requirements page in order to complete your custom degree plan.\",\n            },\n            {\n                title: \"Click on 'Year 1' to get started!\",\n                target: \".container-fluid\",\n                content:\n                    \"Click the button by each semester to add courses to it. Good luck!\",\n            },\n        ],\n    });\n\n    return (\n        <>\n            <div style={{ marginRight: \"2%\", textAlign: \"right\" }}>\n                <Button\n                    variant=\"danger\"\n                    data-testid=\"scheduler-walkthrough-button\"\n                    onClick={() => {\n                        setJoyride({ ...joyride, run: !joyride.run });\n                    }}\n                >\n                    Need Help?\n                </Button>\n            </div>\n            <ReactJoyride\n                steps={joyride.steps}\n                run={joyride.run}\n                continuous\n                showProgress\n                showSkipButton\n                styles={{\n                    tooltipContainer: {\n                        textAlign: \"left\",\n                    },\n                    buttonNext: {\n                        backgroundColor: \"#ff0044\",\n                    },\n                    buttonBack: {\n                        marginRight: 10,\n                    },\n                }}\n                locale={{\n                    last: \"End Tour\",\n                    skip: \"Close Tour\",\n                }}\n            />\n        </>\n    );\n};\n\nexport default SchedulerWalkthrough;\n","import React, { useState } from \"react\";\nimport ReactJoyride from \"react-joyride\";\n\nconst MainPageWalkthrough: React.FunctionComponent = () => {\n    const [joyride, setJoyride] = useState({\n        run: false,\n        steps: [\n            {\n                title: \"Welcome to the UD CIS Scheduler!\",\n                disableBeacon: true,\n                target: \".g-4\",\n                content:\n                    \"This is the main page where you can create, edit, duplicate, and delete individual degree plans.\",\n            },\n            {\n                title: \"Add Degree Plans here!\",\n                target: \".add-plan-card\",\n                content:\n                    \"This is where you can add a plan to start designing your own CIS degree plan.\",\n            },\n            {\n                title: \"Keep degree requirements up-to-date here!\",\n                target: \".home-page-reqs\",\n                content:\n                    \"Here, you can modify the requirements needed to complete your custom degree plan.\",\n            },\n            {\n                title: \"More resources available as well!\",\n                target: \".home-page-resources\",\n                content:\n                    \"Helpful links where you can find the CIS Course Catalog, your UDSIS, and the CISC Department Page.\",\n            },\n            {\n                title: \"Good Luck!\",\n                target: \".add-plan-card\",\n                content: \"Add a plan to get started.\",\n            },\n        ],\n    });\n\n    return (\n        <>\n            <div\n                id=\"text\"\n                data-testid={\"main-page-walkthrough-modal\"}\n                style={{\n                    marginLeft: \"2%\",\n                    marginRight: \"auto\",\n                    padding: \"0.5rem\",\n                    color: \"black\",\n                    opacity: 0.55,\n                    cursor: \"pointer\",\n                }}\n                onClick={() => setJoyride({ ...joyride, run: !joyride.run })}\n            >\n                <a>Tutorial</a>\n            </div>\n            <ReactJoyride\n                steps={joyride.steps}\n                run={joyride.run}\n                continuous\n                showProgress\n                showSkipButton\n                styles={{\n                    tooltipContainer: {\n                        textAlign: \"left\",\n                    },\n                    buttonNext: {\n                        backgroundColor: \"#ff0044\",\n                    },\n                    buttonBack: {\n                        marginRight: 10,\n                    },\n                }}\n                locale={{\n                    last: \"End Tour\",\n                    skip: \"Close Tour\",\n                }}\n            />\n        </>\n    );\n};\n\nexport default MainPageWalkthrough;\n","import React from \"react\";\nimport { Container, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport MainPageWalkthrough from \"./MainPageWalkthrough\";\n\nconst NavigationBar = (): JSX.Element => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Container>\n                <Navbar.Brand as={Link} to=\"/\">\n                    Fancy Scheduler\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\" data-testid=\"open-bar\">\n                    <Nav className=\"me-auto\">\n                        <Nav.Link as={Link} to=\"/\">\n                            Home\n                        </Nav.Link>\n                        <Nav.Link as={MainPageWalkthrough}>\n                            Tutorial\n                        </Nav.Link>\n                        <Nav.Link as={Link} className=\"home-page-reqs\"to=\"/Requirements\">\n                            Requirements\n                        </Nav.Link>\n                        <NavDropdown title=\"Resources\" className=\"home-page-resources\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"https://catalog.udel.edu/\">\n                                Course Catalog\n                            </NavDropdown.Item>\n                            <NavDropdown.Item href=\"https://my.udel.edu/task/all/udsisstudent\">\n                                UDSIS\n                            </NavDropdown.Item>\n                            <NavDropdown.Item href=\"https://www.cis.udel.edu/\">\n                                CISC Department Page\n                            </NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"https://www.reddit.com/r/catpictures/\">\n                                Cat Pictures\n                            </NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Col,\n    Container,\n    Row,\n    Dropdown,\n    ButtonGroup,\n} from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>(),\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>(),\n    },\n];\n\ninterface PlanPageProps {\n    plans: PlanProps[];\n    setPlans: (plans: PlanProps[]) => void;\n}\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function PlanPage(props: PlanPageProps): JSX.Element {\n    const { plans, setPlans } = props;\n\n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([\n            ...plans,\n            {\n                id: plans.length,\n                uuid: uuid(),\n                name: \"\",\n                date: new Date().toLocaleDateString(),\n                years: Array<YearProps>(),\n            },\n        ]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n        const arr: PlanProps[] = [];\n\n        // if empty array of plans\n\n        if (index <= 0) {\n            arr.push(plans[0]);\n        }\n\n        // if first item in array, set value of index 0\n        if (index === 1) {\n            arr.push(plans[0]);\n        }\n        if (index > 1) {\n            arr.push(plans[index - 1]);\n        }\n    };\n\n    const deleteCard = (oldArray: typeof plans, planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n            const newArray = [...plans];\n            const index = newArray.indexOf(planItem);\n\n            if (index !== -1) {\n                newArray.splice(index, 1);\n                setPlans(newArray);\n            }\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([\n            ...plans,\n            {\n                id: planItem.id,\n                uuid: uuid(),\n                name: planItem.name,\n                date: planItem.date,\n                years: planItem.years,\n            },\n        ]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n    };\n\n    const renderCard = (planItem: PlanProps) => {\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        return (\n            <Card\n                className=\"plan-card flex-row\"\n                style={{\n                    alignItems: \"center\",\n                    justifyContent: \"space-evenly\",\n                    height: \"100%\",\n                }}\n            >\n                <Card.Body style={{ flex: \"0 1 auto\" }}>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    <Card.Text\n                        style={{ fontWeight: \"lighter\", fontSize: \"0.85rem\" }}\n                    >\n                        {planItem.date}\n                    </Card.Text>\n                    {/* \n                    <Link to={`Plans/${planItem.uuid}`}>\n                        <button>Edit Plan</button>\n                    </Link>\n                    \n                    <Button\n                        onClick={() => {\n                            console.log(\"button pressed\");\n                            deleteCard(plans, planItem);\n                        }}\n                    >\n                        -\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            copy(planItem);\n                        }}\n                    >\n                        Duplicate Plan\n                    </Button> */}\n                </Card.Body>\n                <Dropdown as={ButtonGroup}>\n                    <Button\n                        as={Link}\n                        to={`Plans/${planItem.uuid}`}\n                        variant=\"success\"\n                        data-testid=\"edit-plan\"\n                    >\n                        Edit Plan\n                    </Button>\n\n                    <Dropdown.Toggle\n                        split\n                        variant=\"success\"\n                        id=\"dropdown-split-basic\"\n                        data-testid=\"plan-toggle\"\n                    />\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item\n                            onClick={() => {\n                                copy(planItem);\n                            }}\n                            data-testid=\"copy-plan\"\n                        >\n                            Duplicate Plan\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            style={{ color: \"#DC3E45\" }}\n                            color=\"white\"\n                            onClick={() => {\n                                deleteCard(plans, planItem);\n                            }}\n                            data-testid=\"delete-plan\"\n                        >\n                            Remove Plan\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card>\n        );\n    };\n    return (\n        <Container>\n            <Row xs={1} md={3} className=\"g-4\">\n                {plans.map((planItem) => \n                    <Col key={planItem.uuid}>{renderCard(planItem)}</Col>\n                )}\n                <Col>\n                    <Card\n                        bg=\"light\"\n                        className=\"add-plan-card\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <Button\n                            id=\"add-plan-button\"\n                            data-testid=\"add-plan\"\n                            onClick={addPlan}\n                        >\n                            Add a plan <br />{\" \"}\n                            <span id=\"add-plan-icon\"> + </span>\n                        </Button>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default PlanPage;\n","import React, { FC } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport PlanProps from \"../interfaces/Plan\";\nimport PlanPage from \"./PlanPage\";\n\ntype IndexPageProps = RouteComponentProps & {\n    plans: PlanProps[];\n    setPlans: (plans: PlanProps[]) => void;\n};\nconst IndexPage: FC<IndexPageProps> = (props) => {\n    const { plans, setPlans } = props;\n    return (\n        <div className=\"home\">\n            <div className=\"home-content\">\n                <h1 className=\"center mb-5\">UD CIS Scheduler</h1>\n                <PlanPage plans={plans} setPlans={setPlans} />\n            </div>\n        </div>\n    );\n};\n\nexport default IndexPage;\n","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\n\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\nimport SchedulerWalkthrough from \"./components/SchedulerWalkthrough\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport PlanProps from \"./interfaces/Plan\";\nimport IndexPage from \"./components/IndexPage\";\n\n// Master Plan View\n\ntype PlansPageProps = RouteComponentProps & {\n    requirements: string[];\n};\n\nconst Plan: FC<PlansPageProps> = (props) => {\n    return (\n        <>\n            <SchedulerWalkthrough />\n            <p></p>\n            <Scheduler requirements={props.requirements} />\n        </>\n    );\n};\n\nfunction App(): JSX.Element {\n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        <HashRouter>\n            <div>\n                <NavigationBar />\n            </div>\n            <Switch>\n                <Router>\n                    <Route\n                        path=\"/Plans/:uuid\"\n                        render={(props) => \n                            <Plan {...props} requirements={requirements} />\n                        }\n                    ></Route>\n                    <Route\n                        path=\"/Requirements\"\n                        render={(props) => \n                            <Requirements\n                                {...props}\n                                requirements={requirements}\n                                onAddRequirement={addRequirement}\n                                onRemoveRequirement={removeRequirement}\n                            />\n                        }\n                    ></Route>\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={(props) => \n                            <IndexPage\n                                {...props}\n                                plans={plans}\n                                setPlans={setPlans}\n                            />\n                        }\n                    ></Route>\n                </Router>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}