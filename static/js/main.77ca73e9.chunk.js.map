{"version":3,"sources":["hooks/useYears.ts","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year.tsx","components/Scheduler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getByUUID","state","uuid","i","length","semesterReducer","prev","action","next","map","x","type","semAction","targetIndex","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","courses","Map","index","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","updateSemesters","putSemester","clear","years","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","AddCourse","props","isOpen","ReactDOM","createPortal","className","onClick","onClickClose","Form","onSubmit","onClickSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","defaultValue","defaultValues","courseName","onChange","Text","href","courseID","courseDescription","style","height","Button","variant","isEditing","document","getElementById","body","Course","display","console","log","id","onRemoveCourse","onClickEdit","courseReducer","set","payload","newState","delete","courseInit","Semester","useState","setIsOpen","setIsEditing","newCourseName","setNewCourseName","newCourseID","setNewCourseID","newCourseDescription","setNewCourseDescription","updateCourses","courseToRemove","courseToEdit","description","addedCourses","from","course","event","preventDefault","handleCourseSubmit","getUTCFullYear","Year","overlayButton","useRef","sortedSemesters","useMemo","sort","a","b","getTime","Container","trigger","transitionTime","semesterProps","ref","setFormUuid","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","handleSubmit","handleInput","getStartingYears","Date","getFullYear","output","yearOne","yearTwo","Scheduler","csv","json","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","handleSemesterInput","handleSemesterSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.77ca73e9.chunk.js","sourcesContent":["import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction{\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nfunction getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction semesterReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n            courses: new Map<string, CourseProps>(),\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next,removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter((semester: SemesterProps) => {\n            return semester.uuid !== removeSemester.semesterUuid; \n        });\n        next[targetIndex] = {index: next[targetIndex].index, uuid: next[targetIndex].uuid, semesters: newYear};\n        return next;\n    }case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n\n\n\nfunction clearSemesters(years: Array<YearProps>, pusher: (uuid: string, index: number) => void, semesterRemover: (uuid: string, semesterUuid: string) => void, yearRemover: (uuid: string) => void, yearUuid?: string){\n    if(yearUuid !== undefined && getByUUID(years,yearUuid) !== -1){\n        for(const semester of years[getByUUID(years,yearUuid)].semesters){\n            semesterRemover(yearUuid,semester.uuid);\n        }\n    }else if(yearUuid === undefined){\n        const newYears: YearProps[] = new Array<YearProps>();\n        for(const year of years){\n            newYears.push({semesters: [], index: year.index, uuid: year.uuid});\n            yearRemover(year.uuid);\n        }\n        for(const year of newYears){\n            pusher(year.uuid,year.index);\n        }\n    }\n}\n\ninterface Years{\n    value: Array<YearProps>;\n    push: (uuid: string, index: number) => void;\n    putSemester: (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => void;\n    removeSemester: (\n        uuid: string,\n        semesterUuid: string\n    ) => void;\n    removeYear: (\n        uuid: string\n    ) => void;\n    clear: (\n        uuid?: string\n    ) => void;\n}\n\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [semesters, updateSemesters] = useReducer(\n        semesterReducer,\n        undefined,\n        init === undefined ? () => {\n            return new Array<YearProps>();\n        } : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateSemesters(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateSemesters(action);\n    };\n    const removeSemester = (\n        uuid: string,\n        semesterUuid: string,\n    ) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid\n        };\n        updateSemesters(action);\n    };\n    const removeYear = (\n        uuid: string\n    ) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid\n        };\n        updateSemesters(action);\n    };\n    return {value: semesters, push: addYear, putSemester: addSemester, removeSemester: removeSemester, removeYear: removeYear, clear: (uuid?: string) => {\n        clearSemesters(semesters,addYear,removeSemester,removeYear,uuid);\n    }};\n}\n\nexport default useYears;\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\n\ninterface AddNewCourseProps {\n    isOpen: boolean;\n    defaultValues: {\n        courseName: string;\n        courseID: string;\n        courseDescription: string;\n    };\n    isEditing: boolean; // if true, then we are editing an existing course\n    onClickClose: () => void;\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            {/* <div className=\"non-modal-overlay\" /> */}\n            <div className=\"modal-add-course\">\n                <button onClick={props.onClickClose}>Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.courseName}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.courseID}\n                            />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.courseDescription}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    onRemoveCourse: (courseToRemove: CourseProps) => void;\n    onClickEdit: (courseToEdit: CourseProps) => void;\n}\n\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    console.log(props.id);\n                    props.onRemoveCourse(props);\n                }}\n            >\n                {props.name}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useReducer, useState } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\n\ninterface CourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n    payload: CourseProps;\n}\n\n// easy access to the courses\n\nconst courseReducer = (\n    state: Map<string, CourseProps>,\n    action: CourseAction\n): Map<string, CourseProps> => {\n    switch (action.type) {\n    case \"ADD COURSE\":\n        return state.set(action.payload.id, action.payload);\n    case \"REMOVE COURSE\": {\n        const newState = new Map<string, CourseProps>(state);\n        newState.delete(action.payload.id);\n        return newState;\n    }\n    }\n};\n\n// const onRightClickCourse = (event: React.MouseEvent<HTMLDivElement>) => {\n//     event.preventDefault();\n//     console.log(\"Right Clicked\");\n// };\n\nconst courseInit = (\n    courses: Map<string, CourseProps>\n): Map<string, CourseProps> => {\n    if (courses) return courses;\n    else return new Map<string, CourseProps>();\n};\n\ninterface FullSemesterProps extends SemesterProps {\n    removeSemester: () => void;\n}\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [newCourseName, setNewCourseName] = useState<string>(\"\");\n    const [newCourseID, setNewCourseID] = useState<string>(\"\");\n    const [newCourseDescription, setNewCourseDescription] =\n        useState<string>(\"\");\n    console.log(\"Semester render!\");\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        props.courses,\n        courseInit\n    );\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        switch (event.target.name) {\n        case \"courseName\":\n            setNewCourseName(event.target.value);\n            break;\n        case \"courseID\":\n            setNewCourseID(event.target.value);\n            break;\n        case \"courseDescription\":\n            setNewCourseDescription(event.target.value);\n            break;\n        }\n    };\n    const onRemoveCourse = (courseToRemove: CourseProps) => {\n        const action: CourseAction = {\n            type: \"REMOVE COURSE\",\n            payload: courseToRemove,\n        };\n        updateCourses(action);\n        console.log(\"Remove Course\", courseToRemove.id);\n    };\n\n    const onClickEdit = (courseToEdit: CourseProps) => {\n        setNewCourseName(courseToEdit.name);\n        setNewCourseDescription(courseToEdit.description);\n        setNewCourseID(courseToEdit.id);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newCourse: CourseProps = {\n            id: newCourseID,\n            name: newCourseName,\n            description: newCourseDescription,\n        };\n\n        const action: CourseAction = {\n            type: \"ADD COURSE\",\n            payload: newCourse,\n        };\n\n        updateCourses(action);\n        setNewCourseName(\"\");\n        setNewCourseDescription(\"\");\n        setNewCourseID(\"\");\n        if (isEditing) setIsEditing(false);\n    };\n    const addedCourses = Array.from(courses).map(\n        ([courseID, course]: [string, CourseProps]) => {\n            return (\n                <div key={courseID}>\n                    <Course\n                        onClickEdit={onClickEdit}\n                        onRemoveCourse={onRemoveCourse}\n                        {...course}\n                    />{\" \"}\n                </div>\n            );\n        }\n    );\n\n    return (\n        <>\n            <AddCourse\n                defaultValues={{\n                    courseName: newCourseName,\n                    courseID: newCourseID,\n                    courseDescription: newCourseDescription,\n                }}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={`Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n            >\n                {props.name}\n            </span>\n            <button\n                data-testid={`Remove Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <div className=\"courses\">{addedCourses}</div>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { ChangeEvent, FormEvent, useRef, useMemo } from \"react\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {\n    Container,\n    Row,\n    Col,\n    Popover,\n    PopoverContent,\n    Overlay,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport Semester from \"./Semester\";\n\ninterface FullYearProps extends YearProps {\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    formUuid: string | null;\n    setFormUuid: (newId: string | null) => void;\n    removeSemester: (semesterUuid: string) => void;\n    clear: () => void;\n}\n\nfunction Year(props: FullYearProps): JSX.Element {\n    const overlayButton = useRef(null);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters.sort((a: SemesterProps, b: SemesterProps) => {\n            return a.start.getTime() - b.start.getTime();\n        });\n    }, [props.semesters]);\n    return (\n        <Container className=\"container-sm\">\n            <Row>\n                <Col>\n                    <Collapsible\n                        trigger={\n                            <button\n                                data-testid={`Year ${props.index} label`}\n                                className=\"trigger\"\n                            >{`Year ${props.index} >`}</button>\n                        }\n                        transitionTime={200}\n                    >\n                        <Row data-testid=\"collapsible-content\">\n                            {sortedSemesters.map(\n                                (semesterProps: SemesterProps, index: number) => {\n                                    return (\n                                        <Col\n                                            data-testid={`Year ${\n                                                props.index\n                                            } semester ${index + 1}`}\n                                            key={semesterProps.uuid}\n                                        >\n                                            <Semester {...semesterProps} removeSemester={() =>{\n                                                props.removeSemester(semesterProps.uuid);\n                                            }}\n                                            />\n                                        </Col>\n                                    );\n                                }\n                            )}\n\n                            <Col>\n                                <button\n                                    data-testid={`trigger ${props.index}`}\n                                    className=\"trigger\"\n                                    ref={overlayButton}\n                                    onClick={() => {\n                                        props.setFormUuid(\n                                            props.formUuid === props.uuid\n                                                ? null\n                                                : props.uuid\n                                        );\n                                    }}\n                                >\n                                    +\n                                </button>\n                                <Overlay\n                                    target={overlayButton}\n                                    placement=\"right-end\"\n                                    show={props.formUuid === props.uuid}\n                                    onHide={() => {\n                                        props.setFormUuid(null);\n                                    }}\n                                    rootClose={true}\n                                    transition={false}\n                                >\n                                    <Popover id=\"popover-basic\">\n                                        <PopoverContent>\n                                            <form\n                                                data-testid={`semester-form ${props.index}`}\n                                                onSubmit={props.handleSubmit}\n                                            >\n                                                <label>season:</label>\n                                                <input\n                                                    data-testid=\"season-input\"\n                                                    type=\"text\"\n                                                    name=\"season\"\n                                                    onChange={props.handleInput}\n                                                />\n                                                <br />\n                                                <label>starts:</label>\n                                                <input\n                                                    data-testid=\"starts-input\"\n                                                    type=\"date\"\n                                                    name=\"starts\"\n                                                    onChange={props.handleInput}\n                                                />\n                                                <br />\n                                                <label>ends:</label>\n                                                <input\n                                                    data-testid=\"ends-input\"\n                                                    type=\"date\"\n                                                    name=\"ends\"\n                                                    onChange={props.handleInput}\n                                                />\n                                                <br />\n                                                <input\n                                                    data-testid=\"submit-button\"\n                                                    type=\"submit\"\n                                                    value=\"submit\"\n                                                />\n                                            </form>\n                                        </PopoverContent>\n                                    </Popover>\n                                </Overlay>\n                            </Col>\n                        </Row>\n                    </Collapsible>\n                </Col>\n                <Col>\n                    <button onClick={props.clear} data-testid={`clear-year ${props.index}`}>Clear</button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Year;\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\nimport useYears from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport CourseProps from \"../interfaces/Course\";\nimport Year from \"./Year\";\n\ninterface SchedulerProps {\n    csv?: string;\n    json?: string;\n}\n\nfunction getStartingYears(): Array<YearProps>{\n    const year = new Date().getFullYear();\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = {index: 1, uuid: uuid(), semesters: []};\n    yearOne.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year}-08-31`), end: new Date(`${year}-12-15`), courses: new Map<string, CourseProps>()});\n    yearOne.semesters.push({uuid: uuid(), name: \"spring\", start: new Date(`${year+1}-02-07`), end: new Date(`${year+1}-05-26`), courses: new Map<string, CourseProps>()});\n    const yearTwo: YearProps = {index: 2, uuid: uuid(), semesters: []};\n    yearTwo.semesters.push({uuid: uuid(), name: \"fall\", start: new Date(`${year+1}-08-31`), end: new Date(`${year+1}-12-15`), courses: new Map<string, CourseProps>()});\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears(getStartingYears);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n            case \"season\":\n                setNewName(event.target.value);\n                break;\n            case \"starts\":\n                setNewStart(event.target.value);\n                break;\n            case \"ends\":\n                setNewEnd(event.target.value);\n                break;\n            }\n        };\n        const handleSemesterSubmit = (\n            event: FormEvent<HTMLFormElement>,\n            id: string\n        ) => {\n            event.preventDefault();\n            if (newName !== null && newEnd !== null && newStart !== null) {\n                years.putSemester(\n                    id,\n                    uuid(),\n                    new Date(newStart as string),\n                    new Date(newEnd as string),\n                    newName as string\n                );\n                setNewName(null);\n                setNewStart(null);\n                setNewEnd(null);\n                setCurrentForm(null);\n            }\n        };\n        return (\n            <>\n                <button\n                    onClick={() => {\n                        years.clear();\n                    }}\n                    data-testid=\"clear-button\"\n                >\n                    Clear\n                </button>\n                <div>\n                    {years.value.map((props: YearProps, i: number) => {\n                        return (\n                            <div data-testid={\"Year\"} key={props.uuid}>\n                                <Year\n                                    handleInput={handleSemesterInput}\n                                    handleSubmit={(\n                                        event: FormEvent<HTMLFormElement>\n                                    ) => {\n                                        handleSemesterSubmit(event, props.uuid);\n                                    }}\n                                    semesters={props.semesters}\n                                    uuid={props.uuid}\n                                    index={i + 1}\n                                    formUuid={currentForm}\n                                    setFormUuid={setCurrentForm}\n                                    removeSemester={(\n                                        semesterUuid: string\n                                    ) => {\n                                        years.removeSemester(props.uuid,semesterUuid);\n                                    }}\n                                    clear={() => {\n                                        years.clear(props.uuid);\n                                    }}\n                                />\n                            </div>\n                        );\n                    })}\n                    <button\n                        data-testid=\"add-year-button\"\n                        onClick={() => {\n                            years.push(uuid(), years.value.length);\n                        }}\n                    >\n                        +\n                    </button>\n                </div>\n            </>\n        );\n    }\n    return <></>;\n}\n","import React from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Scheduler } from \"./components/Scheduler\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <Scheduler/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}