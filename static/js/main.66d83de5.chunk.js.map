{"version":3,"sources":["components/Plan.tsx","hooks/useYears.ts","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/SemesterForm.tsx","components/Year.tsx","hooks/useProblems.ts","components/ErrorStack.tsx","util/validation/dates.ts","hooks/useCourses.ts","components/Scheduler.tsx","components/Requirements.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Array","Plan","props","useState","plans","setPlans","renderCard","planItem","localStorage","setItem","JSON","stringify","Card","style","width","className","Body","Title","id","to","uuid","Text","date","onClick","console","log","oldArray","window","confirm","newArray","index","indexOf","splice","deleteCard","name","years","length","copy","Date","toLocaleDateString","arr","push","map","getByUUID","state","i","yearReducer","prev","action","next","x","type","semAction","targetIndex","target","newYear1","concat","semesters","start","end","semesterUuid","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","AddCourse","isOpen","ReactDOM","createPortal","onClickClose","Form","onSubmit","onClickSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","defaultValue","defaultValues","onChange","href","credits","courses","course","Check","label","defaultChecked","coreqs","includes","prereqs","description","height","Button","variant","isEditing","document","getElementById","body","Course","draggable","display","onRemoveCourse","onClickEdit","Semester","newCourse","setNewCourse","setIsOpen","setIsEditing","unAttachCourse","courseToRemove","payload","updateCourses","courseToEdit","addedCourses","from","values","ListGroupItem","event","preventDefault","handleCourseSubmit","courseToAdd","parseInt","checked","getUTCFullYear","ListGroup","clearCourses","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","overlayButton","useRef","sortedSemesters","useMemo","sort","a","b","getTime","array","count","newSemester","Container","fluid","md","trigger","transitionTime","semesterProps","courseList","ref","formInit","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","problemReducer","newState","error","message","source","problemType","realAction","problem","output","initializer","ErrorStack","problems","ctr","validate","existing","validate_both_dates","validate_single_date","courseReducer","Map","set","delete","courseInit","useCourses","initialCourses","removeCourse","courseID","get","getStartingYears","getFullYear","yearOne","yearTwo","hasError","Scheduler","csv","json","unmetRequirements","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","submissionAllowed","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","semesterFormInit","handleSemesterInput","newProblems","newDate","useEffect","requirements","newCourses","requirement","has","handleSemesterSubmit","entries","entry","done","Table","join","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","FormControl","el","title","IndexPage","role","PlansPage","getItem","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"sWAeeA,QAOAA,QA0OAC,MArOR,SAAcC,GAEjB,MAA0BC,mBAA2B,IAArD,mBAAOC,EAAP,KAAcC,EAAd,KAgFMC,EAAa,SAACC,GAiBhB,OAJAC,aAAaC,QAAQ,cAAeC,KAAKC,UAAUP,IAK/C,cAACQ,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,OAA3C,SACI,eAACH,EAAA,EAAKI,KAAN,WACI,eAACJ,EAAA,EAAKK,MAAN,oBAAmBV,EAASW,GAA5B,OAEA,cAAC,IAAD,CAAMC,GAAE,gBAAWZ,EAASa,MAA5B,SACI,iDAIJ,cAACR,EAAA,EAAKS,KAAN,UAAYd,EAASe,OACrB,wBAAQC,QAAS,WACbC,QAAQC,IAAI,kBApEb,SAACC,EAAwBnB,GACxC,GAAIoB,OAAOC,QAAQ,8CAA+C,CAE9D,IAAMC,EAAQ,YAAOzB,GACrBoB,QAAQC,IAAI,cAAerB,GAC3BoB,QAAQC,IAAIlB,EAASW,IACrB,IAAMY,EAAQD,EAASE,QAAQxB,GAG/BiB,QAAQC,IAAI,WAAYK,IAET,IAAXA,IACAD,EAASG,OAAOF,EAAO,GACvBN,QAAQC,IAAI,gBACZD,QAAQC,IAAI,eAAgBI,GAC5BxB,EAASwB,KAsDDI,CAAW7B,EAAOG,IAFtB,eAIA,wBAAQgB,QAAS,YAhDpB,SAAChB,GAEVF,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAChBc,GAAIX,EAASW,GACbE,KAAMA,cACNc,KAAM3B,EAAS2B,KACfZ,KAAMf,EAASe,KACfa,MAAO5B,EAAS4B,UAEpB,IAAML,EAAQ1B,EAAMgC,OACpBZ,QAAQC,IAAI,UAAWK,GAuCPO,CAAK9B,IADT,kCAyFhB,OACI,sBAAKQ,UAAU,OAAf,UACI,wBAAQQ,QAlMA,WAEZlB,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAChBc,GAAId,EAAMgC,OACVhB,KAAMA,cACNc,KAAM,GACNZ,MAAM,IAAIgB,MAAOC,qBACjBJ,MAAOnC,YAEX,IAAM8B,EAAQ1B,EAAMgC,OACpBZ,QAAQC,IAAI,UAAWK,GACvB,IAAMU,EAAsB,GAIxBV,GAAS,GACTU,EAAIC,KAAKrC,EAAM,IAKL,IAAV0B,GACAU,EAAIC,KAAKrC,EAAM,IAGf0B,EAAQ,GACRU,EAAIC,KAAKrC,EAAM0B,EAAM,KAwKrB,0BACC1B,EAAMsC,KAAI,SAAAnC,GAAQ,OACf,6BAAyBD,EAAWC,IAA3BA,EAASa,a,gBClM3B,SAASuB,EACZC,EACAxB,GAEA,IAAK,IAAIyB,EAAI,EAAGA,EAAID,EAAMR,OAAQS,IAC9B,GAAID,EAAMC,GAAGzB,OAASA,EAClB,OAAOyB,EAGf,OAAQ,EAGZ,SAASC,EACLC,EACAC,GAEA,IAAMC,EAAOF,EAAKL,KAAI,SAACQ,GACnB,OAAOA,KAEX,OAAQF,EAAOG,MACf,IAAK,eACD,IAAMC,EAA+BJ,EAC/BK,EAAsBV,EAAUM,EAAMG,EAAUhC,MAChDkC,EAAoBL,EAAKI,GACzBE,GAAW,IAAIvD,OAAuBwD,OACxCF,EAAOG,WAaX,OAXAF,EAASd,KAAK,CACVP,KAAMkB,EAAUlB,KAChBwB,MAAON,EAAUM,MACjBC,IAAKP,EAAUO,IACfvC,KAAMgC,EAAUQ,eAEpBX,EAAKI,GAAe,CAChBvB,MAAOmB,EAAKI,GAAavB,MACzBV,KAAM6B,EAAKI,GAAajC,KACxBqC,UAAWF,GAERN,EAEX,IAAK,WACD,IAAMY,EAAUb,EACVc,EAAsB,CACxBhC,MAAO+B,EAAQ/B,MACfV,KAAMyC,EAAQzC,KACdqC,UAAW,IAAIzD,OAGnB,OADAiD,EAAKR,KAAKqB,GACHb,EAEX,IAAK,kBACD,IAAMc,EAAiBf,EACjBK,EAAsBV,EAAUM,EAAMc,EAAe3C,MAErD4C,EADwBf,EAAKI,GACRI,UAAUQ,QACjC,SAACC,GACG,OAAOA,EAAS9C,OAAS2C,EAAeH,gBAQhD,OALAX,EAAKI,GAAe,CAChBvB,MAAOmB,EAAKI,GAAavB,MACzBV,KAAM6B,EAAKI,GAAajC,KACxBqC,UAAWO,GAERf,EAEX,IAAK,cACD,IAAMkB,EAAanB,EAInB,OAHeC,EAAKgB,QAAO,SAACG,GACxB,OAAOA,EAAMhD,OAAS+C,EAAW/C,QAIzC,QACI,MAAMiD,MAAM,GAAD,OAAIrB,EAAOG,KAAX,uBA+HJmB,MA/Df,SAAkBC,GACd,MAA6BC,qBACzB1B,OACA2B,OACSA,IAATF,EACM,WACE,OAAO,IAAIvE,OAEbuE,GAPV,mBAAOpC,EAAP,KAAcuC,EAAd,KAUMb,EAAU,SAACzC,EAAcU,GAM3B4C,EAL8B,CAC1BvB,KAAM,WACN/B,KAAMA,EACNU,MAAOA,KAqBTiC,EAAiB,SAAC3C,EAAcwC,GAMlCc,EALqC,CACjCvB,KAAM,kBACN/B,KAAMA,EACNwC,aAAcA,KAIhBO,EAAa,SAAC/C,GAKhBsD,EAJiC,CAC7BvB,KAAM,cACN/B,KAAMA,KAId,MAAO,CACHgD,MAAOjC,EACPM,KAAMoB,EACNc,YAnCgB,SAChBvD,EACAwC,EACAF,EACAC,EACAzB,GAUAwC,EARkC,CAC9BvB,KAAM,eACN/B,KAAMA,EACNc,KAAMA,EACNwB,MAAOA,EACPC,IAAKA,EACLC,aAAcA,KAuBlBG,eAAgBA,EAChBI,WAAYA,EACZS,MAAO,SAACxD,IArHhB,SACIe,EACA0C,EACAC,EACAC,EACAC,GAEA,QAAiBP,IAAbO,IAA0D,IAAhCrC,EAAUR,EAAO6C,GAAkB,CAAC,IAAD,gBACtC7C,EAAMQ,EAAUR,EAAO6C,IAAWvB,WADI,IAC7D,2BACIqB,EAAgBE,EADgD,QAC7B5D,MAFsB,oCAI1D,QAAiBqD,IAAbO,EAAwB,CAC/B,IAD+B,EACzBC,EAAwB,IAAIjF,MADH,cAEZmC,GAFY,IAE/B,2BAA0B,CAAC,IAAhB+C,EAAe,QACtBD,EAASxC,KAAK,CACVgB,UAAW,GACX3B,MAAOoD,EAAKpD,MACZV,KAAM8D,EAAK9D,OAEf2D,EAAYG,EAAK9D,OARU,8BAU/B,cAAmB6D,EAAnB,eAA6B,CAAxB,IAAMC,EAAI,KACXL,EAAOK,EAAK9D,KAAM8D,EAAKpD,SAgGvBqD,CAAehD,EAAO0B,EAASE,EAAgBI,EAAY/C,M,yFCrFxDgE,EA/HG,SAAClF,GACf,OAAKA,EAAMmF,OACJC,IAASC,aACZ,8BACI,sBAAKxE,UAAU,mBAAmB,cAAY,mBAA9C,UACI,wBAAQQ,QAASrB,EAAMsF,aAAc,cAAY,oBAAjD,0BAEA,eAACC,EAAA,EAAD,CAAMC,SAAUxF,EAAMyF,cAAe,cAAY,cAAjD,UACI,eAACC,EAAA,EAAD,CAAK7E,UAAU,OAAf,UACI,eAAC0E,EAAA,EAAKI,MAAN,CACI9E,UAAU,OACV+E,GAAIC,IACJC,UAAU,aAHd,UAKI,cAACP,EAAA,EAAKQ,MAAN,0BACA,cAACR,EAAA,EAAKS,QAAN,CACI/C,KAAK,OACLgD,YAAY,oBACZ,cAAY,kBACZjE,KAAK,aACLkE,aAAclG,EAAMmG,cAAcnE,KAClCoE,SAAUpG,EAAMoG,WAEpB,eAACb,EAAA,EAAKpE,KAAN,CAAWN,UAAU,aAArB,mCAC2B,IACvB,mBAAGwF,KAAK,uCAAR,kBAEK,IAJT,uBAQJ,eAACd,EAAA,EAAKI,MAAN,CACI9E,UAAU,OACV+E,GAAIC,IACJC,UAAU,WAHd,UAKI,cAACP,EAAA,EAAKQ,MAAN,wBACA,cAACR,EAAA,EAAKS,QAAN,CACI/C,KAAK,OACLjB,KAAK,WACLiE,YAAY,cACZG,SAAUpG,EAAMoG,SAChBF,aAAclG,EAAMmG,cAAcnF,WAI9C,eAAC0E,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,MAAN,CACI9E,UAAU,OACV+E,GAAIC,IACJC,UAAU,gBAHd,UAKI,cAACP,EAAA,EAAKQ,MAAN,gCACA,cAACR,EAAA,EAAKS,QAAN,CACI/C,KAAK,SACLjB,KAAK,gBACLiE,YAAY,QACZC,aAAclG,EAAMmG,cAAcG,QAClCF,SAAUpG,EAAMoG,cAGxB,eAACb,EAAA,EAAKI,MAAN,CAAY9E,UAAU,OAAO+E,GAAIC,IAAjC,UACI,cAACN,EAAA,EAAKQ,MAAN,kCACC/F,EAAMuG,QACFxC,QACG,SAACyC,GAAD,OACIA,EAAOxF,IAAMhB,EAAMmG,cAAcnF,MAExCwB,KAAI,SAACgE,GAAD,OACD,cAACjB,EAAA,EAAKkB,MAAN,CAEIxD,KAAK,WACLyD,MAAOF,EAAOxE,KACdA,KAAK,qBACLkC,MAAOsC,EAAOxF,GACd2F,eAAgB3G,EAAMmG,cAAcS,OAAOC,SACvCL,EAAOxF,IAEXoF,SAAUpG,EAAMoG,UARXI,EAAOxF,UAY5B,eAACuE,EAAA,EAAKI,MAAN,CAAY9E,UAAU,OAAO+E,GAAIC,IAAjC,UACI,cAACN,EAAA,EAAKQ,MAAN,mCACC/F,EAAMuG,QACFxC,QACG,SAACyC,GAAD,OACIA,EAAOxF,IAAMhB,EAAMmG,cAAcnF,MAExCwB,KAAI,SAACgE,GAAD,OACD,cAACjB,EAAA,EAAKkB,MAAN,CAEIxD,KAAK,WACLyD,MAAOF,EAAOxE,KACdA,KAAK,sBACLkC,MAAOsC,EAAOxF,GACd2F,eAAgB3G,EAAMmG,cAAcW,QAAQD,SACxCL,EAAOxF,IAEXoF,SAAUpG,EAAMoG,UARXI,EAAOxF,aAchC,eAACuE,EAAA,EAAKI,MAAN,CAAY9E,UAAU,OAAOiF,UAAU,oBAAvC,UACI,cAACP,EAAA,EAAKQ,MAAN,6CACA,cAACR,EAAA,EAAKS,QAAN,CACIhE,KAAK,oBACL4D,GAAG,WACHK,YAAY,oCACZC,aAAclG,EAAMmG,cAAcY,YAClCX,SAAUpG,EAAMoG,SAChBzF,MAAO,CAAEqG,OAAQ,cAIzB,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUjE,KAAK,SAAS,cAAY,uBAApD,SACKjD,EAAMmH,UAAY,cAAgB,uBAKnDC,SAASC,eAAe,eAA4BD,SAASE,MA1HvC,MCWfC,EAzBA,SAACvH,GACZ,OACI,sBAAKwH,WAAW,EAAhB,UACI,qBACI7G,MAAO,CAAE8G,QAAS,gBAClBpG,QAAS,WACLrB,EAAM0H,eAAe1H,IAH7B,mBAMQA,EAAMsG,QANd,YAMyBtG,EAAMgC,QAE/B,wBACIrB,MAAO,CAAE8G,QAAS,gBAClB5G,UAAU,UACV,cAAY,qBACZQ,QAAS,WACLrB,EAAM2H,YAAY3H,IAL1B,sBCqJG4H,EAvJE,SAAC5H,GACd,MAAkCC,mBAAsB,CACpDe,GAAI,GACJgB,KAAM,GACN+E,YAAa,GACbT,QAAS,EACTtC,SAAUhE,EAAMkB,KAChB0F,OAAQ,GACRE,QAAS,KAPb,mBAAOe,EAAP,KAAkBC,EAAlB,KASA,EAA4B7H,oBAAS,GAArC,mBAAOkF,EAAP,KAAe4C,EAAf,KACA,EAAkC9H,oBAAS,GAA3C,mBAAOkH,EAAP,KAAkBa,EAAlB,KAoCMC,EAAiB,SAACC,GACpB,IAAMpF,EAAuB,CACzBG,KAAM,gBACNkF,QAASD,GAEblI,EAAMoI,cAActF,IAGlB6E,EAAc,SAACU,GACjBP,EAAaO,GACbN,GAAU,GACVC,GAAa,IAsBXM,EAAexI,MAAMyI,KAAKvI,EAAMuG,QAAQiC,UACzCzE,QAAO,SAACyC,GAAD,OAAYA,EAAOxC,WAAahE,EAAMkB,QAC7CsB,KAAI,SAACgE,GACF,OACI,cAACiC,EAAA,EAAD,UAEQ,cAAC,EAAD,2BACQjC,GADR,IAEImB,YAAaA,EACbD,eAAgBO,MALRzB,EAAOxF,OAYvC,OACI,qCACI,cAAC,EAAD,CACIuF,QAASzG,MAAMyI,KAAKvI,EAAMuG,QAAQiC,UAClCrC,cAAe0B,EACfV,UAAWA,EACXhC,OAAQA,EACRG,aAAc,WACVyC,GAAU,GACVC,GAAa,IAEjBvC,cAAe,SAACiD,IA/CD,SAACA,GACxBA,EAAMC,iBAEN,IAAM7F,EAAuB,CACzBG,KAAM,aACNkF,QAASN,GAGb7H,EAAMoI,cAActF,GACpBgF,EAAa,CACT9G,GAAI,GACJgB,KAAM,GACN+E,YAAa,GACbT,QAAS,EACTtC,SAAUhE,EAAMkB,KAChB0F,OAAQ,GACRE,QAAS,KAETK,GAAWa,GAAa,GA8BhBY,CAAmBF,IAEvBtC,SAjGW,SAACsC,GACpBA,EAAMC,iBACN,IAAME,EAAwB,eAAQhB,GACtC,OAAQa,EAAMtF,OAAOpB,MACrB,IAAK,aACD6G,EAAY7G,KAAO0G,EAAMtF,OAAOc,MAEhC,MACJ,IAAK,WACD2E,EAAY7H,GAAK0H,EAAMtF,OAAOc,MAC9B,MACJ,IAAK,oBACD2E,EAAY9B,YAAc2B,EAAMtF,OAAOc,MACvC,MACJ,IAAK,gBACD2E,EAAYvC,QAAUwC,SAASJ,EAAMtF,OAAOc,OAC5C,MACJ,IAAK,qBACD2E,EAAYjC,OAAS8B,EAAMtF,OAAO2F,QAAb,sBACXF,EAAYjC,QADD,CACS8B,EAAMtF,OAAOc,QACrC2E,EAAYjC,OAAO7C,QACjB,SAACf,GAAD,OAAOA,IAAM0F,EAAMtF,OAAOc,SAElC,MACJ,IAAK,sBACD2E,EAAY/B,QAAU4B,EAAMtF,OAAO2F,QAAb,sBACZF,EAAY/B,SADA,CACS4B,EAAMtF,OAAOc,QACtC2E,EAAY/B,QAAQ/C,QAClB,SAACf,GAAD,OAAOA,IAAM0F,EAAMtF,OAAOc,SAItC4D,EAAae,MAoET,sBACI,iCACI7I,EAAMgC,KADV,YAEIhC,EAAMwD,MAAMwF,kBAHpB,SAKKhJ,EAAMgC,OAEX,wBACI,wCACIhC,EAAMgC,KADV,YAEIhC,EAAMwD,MAAMwF,kBAChBnI,UAAU,UACVQ,QAASrB,EAAM6D,eALnB,eAUA,cAACoF,EAAA,EAAD,CAAWpI,UAAU,UAArB,SAAgCyH,IAChC,wBACIzH,UAAU,UACVQ,QAAS,WACL0G,GAAU,IAEd,cAAY,oBALhB,eASA,uBACA,wBACI1G,QAASrB,EAAMkJ,aACf,cAAY,uBAFhB,uBCrJG,SAASC,EAAanJ,GACjC,OACI,uBACIwF,SAAUxF,EAAMoJ,aADpB,UAGI,4CACA,uBACI,cAAY,eACZnG,KAAK,OACLjB,KAAK,SACLoE,SAAUpG,EAAMqJ,cAEpB,uBACA,4CACA,uBACI,cAAY,eACZpG,KAAK,OACLjB,KAAK,SACLoE,SAAUpG,EAAMqJ,cAEpB,uBACA,0CACA,uBACI,cAAY,aACZpG,KAAK,OACLjB,KAAK,OACLoE,SAAUpG,EAAMqJ,cAEpB,uBACA,uBACIC,UAAWtJ,EAAMuJ,UACjB,cAAY,gBACZtG,KAAK,SACLiB,MAAM,cCuJPsF,MA7Jf,SAAcxJ,GACV,IAAMyJ,EAAgBC,iBAAO,MACvBC,EAAkBC,mBAAQ,WAC5B,OAAO5J,EAAMuD,UACRsG,MAAK,SAACC,EAAkBC,GACrB,OAAOD,EAAEtG,MAAMwG,UAAYD,EAAEvG,MAAMwG,aAEtCxH,KACG,SACIwB,EACApC,EACAqI,GAGA,IADA,IAAIC,EAAQ,EACHvH,EAAI,EAAGA,EAAIf,EAAOe,IACnBqB,EAAShC,OAASiI,EAAMtH,GAAGX,MAC3BkI,IAaR,IAVA,IAAMC,EAA6B,CAC/BnI,KACIkI,EAAQ,EAAR,UACSlG,EAAShC,KADlB,YAC0BkI,EAAQ,GAC5BlG,EAAShC,KACnByB,IAAKO,EAASP,IAEdvC,KAAM8C,EAAS9C,KACfsC,MAAOQ,EAASR,OAGZb,EAAIf,EAAQ,EAChBe,EAAIsH,EAAM/H,QAAU8B,EAAShC,OAASmI,EAAYnI,KAClDW,IAEIsH,EAAMtH,GAAGX,OAASgC,EAAShC,OAC3BmI,EAAYnI,KAAZ,UAAsBgC,EAAShC,KAA/B,OAGR,OAAOmI,OAGpB,CAACnK,EAAMuD,YACV,OACI,cAAC6G,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC3E,EAAA,EAAD,CAAK7E,UAAU,OAAf,UACI,cAACgF,EAAA,EAAD,CAAKyE,GAAI,GAAT,SACI,cAAC5J,EAAA,EAAD,CAAMG,UAAU,OAAhB,SACI,cAAC,IAAD,CACI0J,QACI,wBACI,6BAAqBvK,EAAM4B,MAA3B,UACAf,UAAU,UAFd,wBAGUb,EAAM4B,MAHhB,QAKJ4I,eAAgB,IAPpB,SASI,eAAC9E,EAAA,EAAD,CAAK,cAAY,sBAAjB,UACKiE,EAAgBnH,KACb,SACIiI,EACA7I,GAEA,OACI,cAACiE,EAAA,EAAD,CACI,6BACI7F,EAAM4B,MADV,qBAEaA,EAAQ,GAHzB,SAMI,cAAC,EAAD,yBACI2E,QACIvG,EAAMuG,QAAQmE,YAEdD,GAJR,IAKI5G,eAAgB,WACZ7D,EAAM6D,eACF4G,EAAcvJ,OAGtBkH,cACIpI,EAAMuG,QACD6B,cAETc,aAAc,WACVlJ,EAAMkJ,aACFuB,EAAcvJ,WAlBrBuJ,EAAcvJ,SA2BnC,eAAC2E,EAAA,EAAD,WACI,wBACI,gCAAwB7F,EAAM4B,OAC9Bf,UAAU,UACV8J,IAAKlB,EACLpI,QAAS,WACLrB,EAAM4K,SACF5K,EAAM6K,WAAa7K,EAAMkB,KACnB,KACAlB,EAAMkB,OARxB,eAcA,cAAC4J,EAAA,EAAD,CACI1H,OAAQqG,EACRsB,UAAU,YACVC,KAAMhL,EAAM6K,WAAa7K,EAAMkB,KAC/B+J,OAAQ,WACJjL,EAAM4K,SAAS,OAEnBM,WAAW,EACXC,YAAY,EARhB,SAUI,cAACC,EAAA,EAAD,CAASpK,GAAG,gBAAZ,SACI,cAACqK,EAAA,EAAD,UACI,qBACI,sCAA8BrL,EAAM4B,OADxC,SAGI,cAACuH,EAAD,CACII,UACIvJ,EAAMuJ,UAEVF,YACIrJ,EAAMqJ,YAEVD,aACIpJ,EAAMoJ,mCAYlD,cAACvD,EAAA,EAAD,UACI,wBACIxE,QAASrB,EAAM0E,MACf,mCAA2B1E,EAAM4B,OAFrC,2BCvJpB,SAAS0J,EAAezI,EAAsBC,GAC1C,IAAMyI,EAA2B1I,EAAKL,KAAI,SAAC0B,GACvC,MAAO,CAACsH,MAAOtH,EAAMsH,MAAOC,QAASvH,EAAMuH,QAASC,OAAQxH,EAAMwH,OAAQC,YAAazH,EAAMyH,gBAEjG,OAAO7I,EAAOG,MACd,IAAK,eAED,IADA,IAAM2I,EAAa9I,EACXH,EAAI,EAAGA,EAAI4I,EAASrJ,OAAQS,IAC7B4I,EAAS5I,GAAGgJ,cAAgBC,EAAWxI,QACtCmI,EAASzJ,OAAOa,EAAE,GAG1B,OAAO4I,EACV,IAAK,MACF,IAAMK,EAAa9I,EAEnB,OADAyI,EAAShJ,KAAKqJ,EAAWC,SAClBN,EACV,IAAK,QAGF,IAFA,IAAMK,EAAa9I,EACbgJ,EAAyB,IAAIhM,MAC3B6C,EAAI,EAAEA,EAAI4I,EAASrJ,OAAQS,IAC5B4I,EAAS5I,GAAG+I,SAAWE,EAAWF,QACjCI,EAAOvJ,KAAKgJ,EAAS5I,IAG7B,OAAOmJ,EAEX,QACI,MAAM3H,MAAM,GAAD,OAAIrB,EAAOG,KAAX,uBAgBnB,SAAS8I,IACL,OAAO,IAAIjM,MCpEA,SAASkM,EAAWhM,GAC/B,GAAsB,OAAnBA,EAAMiM,SAAkB,CACvB,IAAMC,EAAM,CAAC,sBAAKrL,UAAU,gBAAf,UACRb,EAAMiM,SAAS/J,OADP,IAC0C,IAA1BlC,EAAMiM,SAAS/J,OAAe,QAAU,WADpB,IAGjD,OAAOkD,IAASC,aACZ,qBAAKxE,UAAU,wBAAf,SACI,qBAAKA,UAAU,cAAf,SACKqL,EAAI5I,OAAOtD,EAAMiM,SAASzJ,KAAI,SAACqJ,EAAkBjK,GAC9C,OACI,sBAAMf,UAAWgL,EAAQL,MAAQ,QAAU,UAAyB,cAAaK,EAAQL,MAAQ,QAAU,UAA3G,SACKK,EAAQJ,SAD8C7J,EAAM,WAO1EwF,SAASE,MAEpB,OAAO,sBAAM,cAAY,cC1BlB,SAAS6E,EAAS3I,EAAoBC,EAAkB2I,EAAgCV,GACnG,OAAa,OAAVlI,GAA0B,OAARC,EAWzB,SAA6BD,EAAaC,EAAW2I,GACjD,IAAMN,EAAS,IAAIhM,MAChB0D,EAAMwG,WAAavG,EAAIuG,UACtB8B,EAAOvJ,KAAK,CAACiJ,OAAO,EAAME,OAAQ,gBAAiBD,QAAS,yCAA2CE,YAAa,+BAC/GlI,EAAIuG,UAAYxG,EAAMwG,WAAa,SACxC8B,EAAOvJ,KAAK,CAACiJ,OAAO,EAAOE,OAAQ,gBAAiBD,QAAS,6DAA8DE,YAAa,mBAL5C,oBAQ1ES,GAR0E,IAQhG,IAAI,EAAJ,qBAA+B,CAAC,IAAtBpI,EAAqB,QACxBP,EAAIuG,WAAahG,EAASR,MAAMwG,WAAahG,EAASP,IAAIuG,WAAaxG,EAAMwG,WAC5E8B,EAAOvJ,KAAK,CAACiJ,OAAO,EAAME,OAAQ,gBAAiBD,QAAQ,qBAAD,OAAuBzH,EAAShC,MAAS2J,YAAa,sBAVxB,8BAahG,OAAOG,EAvBIO,CAAoB7I,EAAOC,EAAI2I,GACvB,OAAV5I,EACE8I,EAAqB9I,EAAO4I,EAAUV,GAChC,OAARjI,EACE6I,EAAqB7I,EAAK2I,EAAUV,GAEpC,GAqBf,SAASY,EAAqBlL,EAAYgL,EAAgCV,GACtE,IADqG,EAC/FI,EAAS,IAAIhM,MADkF,cAE/EsM,GAF+E,IAErG,IAAI,EAAJ,qBAA+B,CAAC,IAAtBpI,EAAqB,QACxB5C,EAAK4I,UAAYhG,EAASR,MAAMwG,WAAa5I,EAAK4I,UAAYhG,EAASP,IAAIuG,WAC1E8B,EAAOvJ,KAAK,CAACiJ,OAAO,EAAME,OAAQ,gBAAiBD,QAAQ,GAAD,OAAKC,EAAL,0BAA6B1H,EAAShC,MAAQ2J,YAAY,YAAD,OAAcD,EAAd,eAJtB,8BAOrG,OAAOI,EC7BX,IAAMS,EAAgB,SAClB7J,EACAI,GAEA,OAAQA,EAAOG,MACf,IAAK,aACD,IAAMsI,EAAW,IAAIiB,IAAyB9J,GAE9C,OADA6I,EAASkB,IAAI3J,EAAOqF,QAAQnH,GAAI8B,EAAOqF,SAChCoD,EAEX,IAAK,gBACD,IAAMA,EAAW,IAAIiB,IAAyB9J,GAE9C,OADA6I,EAASmB,OAAO5J,EAAOqF,QAAQnH,IACxBuK,IAKToB,EAAa,SACfpG,GAEA,OAAIA,GACQ,IAAIiG,KAuCLI,MA/Bf,SAAoBC,GAEZ,MAAiCvI,qBAC7BiI,EACAM,EACAF,GAHJ,mBAAOpG,EAAP,KAAgB6B,EAAhB,KAqBA,MAAO,CACHsC,WAAYnE,EACZuG,aAjBmB,SAACC,GAGpB,IAAM7E,EAAiB3B,EAAQyG,IAAID,GACnC,IAAI7E,EAOA,MAAM,IAAI/D,MAAM,oBAFhBiE,EAJ6B,CACzBnF,KAAM,gBACNkF,QAASD,KAYjBE,cAAeA,I,QC5C3B,SAAS6E,IACL,IAAMjI,GAAO,IAAI5C,MAAO8K,cAElBpB,EAAS,IAAIhM,MACbqN,EAAqB,CAAEvL,MAAO,EAAGV,KAAMA,cAAQqC,UAAW,IAChE4J,EAAQ5J,UAAUhB,KAAK,CACnBrB,KAAMA,cACNc,KAAM,OACNwB,MAAO,IAAIpB,KAAJ,UAAY4C,EAAZ,WACPvB,IAAK,IAAIrB,KAAJ,UAAY4C,EAAZ,aAETmI,EAAQ5J,UAAUhB,KAAK,CACnBrB,KAAMA,cACNc,KAAM,SACNwB,MAAO,IAAIpB,KAAJ,UAAY4C,EAAO,EAAnB,WACPvB,IAAK,IAAIrB,KAAJ,UAAY4C,EAAO,EAAnB,aAET,IAAMoI,EAAqB,CAAExL,MAAO,EAAGV,KAAMA,cAAQqC,UAAW,IAShE,OARA6J,EAAQ7J,UAAUhB,KAAK,CACnBrB,KAAMA,cACNc,KAAM,OACNwB,MAAO,IAAIpB,KAAJ,UAAY4C,EAAO,EAAnB,WACPvB,IAAK,IAAIrB,KAAJ,UAAY4C,EAAO,EAAnB,aAET8G,EAAOvJ,KAAK4K,GACZrB,EAAOvJ,KAAK6K,GACLtB,EAGX,SAASuB,EAASpB,GAAoC,IAAD,gBAC3BA,GAD2B,IACjD,2BAAgC,CAC5B,GAD4B,QAChBT,MACR,OAAO,GAHkC,8BAMjD,OAAO,EAgBJ,SAAS8B,EAAUtN,GACtB,QAAkBuE,IAAdvE,EAAMuN,UAAoChJ,IAAfvE,EAAMwN,KAAoB,CACrD,IAAMvL,EAAQmC,EAAS6I,GAEjB1G,EAAUqG,OAAWrI,GAE3B,EAAkDtE,mBAEhD,IAFF,mBAAOwN,EAAP,KAA0BC,EAA1B,KAGA,EAA8BzN,mBAAwB,MAAtD,mBAAO0N,EAAP,KAAgBC,EAAhB,KACA,EAAgC3N,mBAAwB,MAAxD,mBAAO4N,EAAP,KAAiBC,EAAjB,KACA,EAA4B7N,mBAAwB,MAApD,mBAAO8N,EAAP,KAAeC,EAAf,KACA,EAAsC/N,mBAAwB,MAA9D,mBAAOgO,EAAP,KAAoBC,EAApB,KACA,EAAkDjO,oBAAS,GAA3D,mBAAOkO,EAAP,KAA0BC,EAA1B,KACMnC,EJNC,WACX,MAAiC3H,qBAAWgH,OAAe/G,EAAUwH,GAArE,mBAAOD,EAAP,KAAeuC,EAAf,KAiBA,MAAO,CAACC,IAVI,SAACzC,GAETwC,EADiC,CAACpL,KAAM,MAAO4I,QAASA,KAS1C0C,QAfF,SAACnL,GAEbiL,EADqC,CAACpL,KAAM,eAAgBG,OAAQA,KAcpCsB,MALtB,SAACgH,GAEX2C,EADmC,CAACpL,KAAM,QAASyI,OAAQA,KAIbxH,MAAO4H,GIZpC0C,GACXC,EAAmB,SAACvN,GACtBgN,EAAehN,GACfkN,GAAqB,GACrBR,EAAW,MACXE,EAAY,MACZE,EAAU,MACV/B,EAASvH,MAAM,kBAEbgK,EAAsB,SAAChG,GACzB,OAAQA,EAAMtF,OAAOpB,MACrB,IAAK,SACD4L,EAAWlF,EAAMtF,OAAOc,OACxB,MAEJ,IAAK,SACD,IAAMX,EACEtB,EAAMiC,MACFzB,EAAUR,EAAMiC,MAAO+J,IACzB1K,UAEJoL,EAAcxC,EADJ,IAAI/J,KAAKsG,EAAMtF,OAAOc,OAGvB,OAAX6J,EAAkB,IAAI3L,KAAK2L,GAAU,KACrCxK,EACA,UAEJ,GAAe,OAAXwK,EACA9B,EAASvH,MAAM,iBACY,IAAvBiK,EAAYzM,QACZ+J,EAASqC,IAAIK,EAAY,QAE1B,CACH1C,EAASvH,MAAM,iBADZ,oBAEmBiK,GAFnB,IAEH,2BAAmC,CAAC,IAAzB9C,EAAwB,QAC/BI,EAASqC,IAAIzC,IAHd,+BAMPiC,EAAYpF,EAAMtF,OAAOc,OACzB,MAEJ,IAAK,OACD,IAAMX,EACEtB,EAAMiC,MACFzB,EAAUR,EAAMiC,MAAO+J,IACzB1K,UACJqL,EAAU,IAAIxM,KAAKsG,EAAMtF,OAAOc,OAChCyK,EAAcxC,EACH,OAAb0B,EAAoB,IAAIzL,KAAKyL,GAAY,KACzCe,EACArL,EACA,QAEJ,GAAe,OAAXwK,EACA9B,EAASvH,MAAM,iBACY,IAAvBiK,EAAYzM,QACZ+J,EAASqC,IAAIK,EAAY,QAE1B,CACH1C,EAASvH,MAAM,iBADZ,oBAEmBiK,GAFnB,IAEH,2BAAmC,CAAC,IAAzB9C,EAAwB,QAC/BI,EAASqC,IAAIzC,IAHd,+BAMPmC,EAAUtF,EAAMtF,OAAOc,SAO/B2K,qBAAU,WACN,IADY,EACNC,EAAe9O,EAAM8O,aACrBC,EAAajP,QAFP,cAIcgP,GAJd,IAIZ,2BAAwC,CAAC,IAA9BE,EAA6B,QAC/BzI,EAAQmE,WAAWuE,IAAID,IACxBD,EAAWxM,KAAKyM,IANZ,8BASZtB,EAAqBqB,KACtB,CAAC/O,EAAM8O,aAAcvI,EAAQmE,aAoChC,OAbIiD,GACAI,GACAF,IACCM,IACAd,EAASpB,EAAS/H,OAEnBkK,GAAqB,GAEnBT,GAAYI,GAAWF,IAAYR,EAASpB,EAAS/H,SACvDiK,GAEAC,GAAqB,GAGrB,qCACI,wBACI/M,QAAS,WACLY,EAAMyC,SAEV,cAAY,eAJhB,mBAQA,gCACKzC,EAAMiC,MAAM1B,KAAI,SAACxC,EAAkB2C,GAChC,OACI,qBAAK,cAAa,OAAlB,SACI,cAAC,EAAD,CACI4D,QAASA,EACTgD,UAAW4E,EACX9E,YAAaqF,EACbtF,aAAc,SACVV,IArDH,SACzBA,EACA1H,GAEA0H,EAAMC,iBACU,OAAZgF,GAA+B,OAAXI,GAAgC,OAAbF,IACvC5L,EAAMwC,YACFzD,EACAE,cACA,IAAIkB,KAAKyL,GACT,IAAIzL,KAAK2L,GACTJ,GAEJC,EAAW,MACXE,EAAY,MACZE,EAAU,MACVE,EAAe,MACfjC,EAASvH,MAAM,kBAsCSwK,CAAqBxG,EAAO1I,EAAMkB,OAEtCqC,UAAWvD,EAAMuD,UACjBrC,KAAMlB,EAAMkB,KACZU,MAAOe,EAAI,EACXkI,SAAUoD,EACVpK,eAAgB,SAACH,GACbzB,EAAM4B,eACF7D,EAAMkB,KACNwC,IAGRgB,MAAO,WACHzC,EAAMyC,MAAM1E,EAAMkB,OAEtBgI,aAAc,SAACxF,IApLnD,SAAsBA,EAAsB6C,GAExC,IADA,IAAM4I,EAAU5I,EAAQmE,WAAWyE,UAE3BC,EAAQD,EAAQpM,QACnBqM,EAAMC,KACPD,EAAQD,EAAQpM,OAEZqM,EAAMlL,MAAM,GAAGF,WAAaN,GAC5B6C,EAAQuG,aAAasC,EAAMlL,MAAM,IA6KLgF,CAAaxF,EAAc6C,IAE/BqE,SAAU6D,KA1BazO,EAAMkB,SA+B7C,wBACI,cAAY,kBACZG,QAAS,WACLY,EAAMM,KAAKrB,cAAQe,EAAMiC,MAAMhC,SAHvC,kBASJ,eAACoN,EAAA,EAAD,WACI,gCACI,+BACI,qDACA,yDAGR,gCACI,+BACI,uDACA,6BAAK7B,EAAkB8B,KAAK,gBAIxC,cAACvD,EAAD,CAAYC,SAAUA,EAAS/H,WAI3C,OAAO,6B,oBCxMIsL,EAvD6B,SAACxP,GACzC,IAAQ8O,EAAwD9O,EAAxD8O,aAAcW,EAA0CzP,EAA1CyP,oBAAqBC,EAAqB1P,EAArB0P,iBAC3C,EAA4CzP,mBAAS,IAArD,mBAAO0P,EAAP,KAAuBC,EAAvB,KAKA,OACI,eAACxF,EAAA,EAAD,CAAWvJ,UAAU,sBAArB,UACI,oEACCiO,EAAatM,KAAI,SAACwM,GAAD,OACd,eAACtJ,EAAA,EAAD,CAEI7E,UAAU,iCAFd,UAII,eAACgF,EAAA,EAAD,CAAKgK,IAAE,EAACC,GAAG,IAAX,UACK,IACAd,EAAa,OAElB,cAACnJ,EAAA,EAAD,CAAKgK,IAAE,EAACC,GAAG,IAAX,SACI,cAAC7I,EAAA,EAAD,CACI5F,QAAS,kBAAMoO,EAAoBT,IADvC,wBARCA,MAgBb,cAACtJ,EAAA,EAAD,CAAK7E,UAAU,iCAAf,SACI,eAACkP,EAAA,EAAD,CAAYlP,UAAU,OAAOF,MAAO,CAAEC,MAAO,OAA7C,UACI,cAACoP,EAAA,EAAD,CACI/J,YAAY,0BACZ/B,MAAOyL,EACPvJ,SAAU,SAAC6J,GACPL,EAAkBK,EAAG7M,OAAOc,QAEhC,aAAW,2BAEf,cAAC+C,EAAA,EAAD,CACIC,QAAQ,oBACRgJ,MAAM,SACNlP,GAAG,8BACHK,QAtCH,WACbqO,EAAiBC,IAiCL,6BAUR,cAAC,IAAD,CAAM1O,GAAG,IAAT,SACI,cAACgG,EAAA,EAAD,CAAQpG,UAAU,OAAlB,wBClDVsP,EAAY,WACd,OACI,qCACI,gCACI,oBAAItP,UAAU,SAAd,8BACA,oBAAIA,UAAU,SAAd,gDACA,sBAAKuP,KAAK,QAAQvP,UAAU,UAA5B,UACI,kEACA,4EAEJ,cAAC,EAAD,CAAMK,KAAK,GAAGF,GAAI,OAEtB,cAAC,IAAD,CAAMC,GAAG,gBAAT,SACI,cAACgG,EAAA,EAAD,CAAQpG,UAAU,OAAlB,uCAUVwP,EAAgC,SAACrQ,GACnC,OACI,qCASI,cAACsN,EAAD,CAAWwB,aAAc9O,EAAM8O,eAC/B,cAAC,IAAD,CAAM7N,GAAG,IAAT,SACI,cAACgG,EAAA,EAAD,qBAEH3F,QAAQC,IAAI,iBAAkBjB,aAAagQ,QAAQ,gBAgDjDC,OA3Cf,WACI,MAAwCtQ,mBACpCH,MAAc,UAAW,UAAW,YADxC,mBAAOgP,EAAP,KAAqB0B,EAArB,KAGMC,EAAiB,SAACzB,GACpBwB,EAAgB,GAAD,mBAAK1B,GAAL,CAAmBE,MAEhC0B,EAAoB,SAAC1B,GACvBwB,EAAgB1B,EAAa/K,QAAO,SAAC4M,GAAD,OAAOA,IAAM3B,OAErD,OACI,qBAAKnO,UAAU,YAAf,SACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACI+P,KAAK,eACLC,OAAQ,SAAC7Q,GAAD,OACJ,cAAC,EAAD,2BACQA,GADR,IAEI8O,aAAcA,QAI1B,cAAC,IAAD,CACI8B,KAAK,gBACLC,OAAQ,SAAC7Q,GAAD,OACJ,cAAC,EAAD,2BACQA,GADR,IAEI8O,aAAcA,EACdY,iBAAkBe,EAClBhB,oBAAqBiB,QAIjC,cAAC,IAAD,CAAOI,OAAK,EAACF,KAAK,IAAIG,UAAWZ,cCpF1Ca,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpB7L,IAASyL,OACL,cAAC,IAAMY,WAAP,UACI,cAAC,GAAD,MAEJrK,SAASC,eAAe,SAM5B2J,O","file":"static/js/main.66d83de5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>()\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>()\n    }\n];\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function Plan(props: PlanProps): JSX.Element {\n    \n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    \n    //plans.forEach(val => planList.push(Object.assign({}, val)));\n    \n    //const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n    //const testArray: PlanProps[] = JSON.parse(stringLoad);\n    //console.log(\"loaded vals\" , testArray);\n    \n\n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: plans.length,\n            uuid: uuid(),\n            name: \"\",\n            date: new Date().toLocaleDateString(),\n            years: Array<YearProps>()\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n        const arr: typeof props[] = [];\n        \n        // if empty array of plans\n        \n        if (index <= 0){\n            arr.push(plans[0]);\n            //localStorage.setItem(`plan:${0}`, JSON.stringify(arr));\n        }\n\n        // if first item in array, set value of index 0\n        if (index === 1){\n            arr.push(plans[0]);\n        }\n        // temp array that saves the plan info to new key and values in localStorage\n        if (index > 1){\n            arr.push(plans[index-1]);\n            //localStorage.setItem(`plan:${index-1}`, JSON.stringify(arr));\n        }\n        //arr.push({id: plans.length, uuid: uuid(), name: \"\", date: new Date().toLocaleDateString(), years: Array<YearProps>()});\n    };\n\n    const deleteCard = (oldArray: typeof plans, planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n\n            const newArray = [...plans];\n            console.log(\"plans array\", plans);\n            console.log(planItem.id);\n            const index = newArray.indexOf(planItem);\n\n            //const index = newArray.findIndex((element: any) => element === planItem);\n            console.log(\"index is\", index);\n\n            if (index !== -1) {\n                newArray.splice(index, 1);\n                console.log(\"plan deleted\");\n                console.log(\"new array is\", newArray);\n                setPlans(newArray);\n            }\n            //plans.filter((i: any) => i.id !== index );\n            //console.log(\"new array is\", plans);\n\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: planItem.id,\n            uuid: uuid(),\n            name: planItem.name,\n            date: planItem.date,\n            years: planItem.years\n        }]);\n        const index = plans.length;\n        console.log(\"index: \", index);\n    };\n\n    \n    //const testArray: PlanProps[] = [];\n    \n    const renderCard = (planItem: PlanProps) => {\n        /*const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n            setNewName(event.currentTarget.value);\n        };*/\n        //const planName = planItem.name;\n        //const index = plans.length;\n        //planItem.id = plans.length;\n        \n        //const set = JSON.stringify(localStorage.getItem(\"test\"));\n        //console.log(JSON.parse(set));\n        //console.log(\"PLANS IS \" , plans);\n        \n        //console.log(\"PLANS IS \" , plans);\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        //const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n        //const testArray: PlanProps[] = JSON.parse(stringLoad);\n        //console.log(\"loaded vals\" , testArray[testArray.length-1]);\n        return (\n            <Card style={{ width: \"18rem\" }} className=\"grid\">\n                <Card.Body>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    \n                    <Link to={`Plans/${planItem.uuid}`}>\n                        <button>\n                            Edit Plan\n                        </button>\n                    </Link>\n                    <Card.Text>{planItem.date}</Card.Text>\n                    <button onClick={() => {\n                        console.log(\"button pressed\");\n                        deleteCard(plans, planItem);\n                    }}>-</button>\n                    <button onClick={() => {\n                        copy(planItem);\n                    }}>Duplicate Plan</button>\n                </Card.Body>\n            </Card>\n        );\n    };\n\n\n    //const arrBackup: PlanProps[] = [];\n    /*\n    const stringLoad = String(localStorage.getItem(\"Plans Array\"));\n    console.log(\"LOADED IN: \", stringLoad);\n    const testArray: PlanProps[] = JSON.parse(stringLoad);\n    console.log(\"loaded vals\" , testArray);\n    //localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n    if (plans.length === 1){\n        localStorage.setItem(`plan: ${0}`, JSON.stringify(plans[0]));\n    }\n\n    // temp array that saves the plan info to new key and values in localStorage\n    if (plans.length > 1){\n        localStorage.setItem(`plan: ${plans.length-1}`, JSON.stringify(plans[plans.length-1]));\n    }\n    /*\n    const save = (plans: PlanProps[]) => {\n        //console.log(\"this is plans\", plans);\n        \n        plans.forEach(val => arrBackup.push(Object.assign({}, val)));\n        //const arr = plans;\n        \n        //localStorage.setItem(\"arr\", JSON.stringify(arr));\n        \n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        if (plans.length === 1){\n            localStorage.setItem(`plan: ${0}`, JSON.stringify(plans[0]));\n        }\n\n        // temp array that saves the plan info to new key and values in localStorage\n        if (plans.length > 1){\n            localStorage.setItem(`plan: ${plans.length-1}`, JSON.stringify(plans[plans.length-1]));\n        }\n        \n    };*/\n    \n    /*\n    const load = (planItem: PlanProps) => {\n        const index = planItem.id;\n        localStorage.getItem(`plan:${planItem.id}`);\n        const map = plans.map(planItem =>\n            <li key={planItem.uuid}>{renderCard(planItem)}</li>\n        );\n        console.log(\"map is: \", map);\n        return map;\n    };*/\n    //const [saveTest, useSaveTest] = useState(localStorage.setItem());\n    \n        \n    //renderCard(planItem);\n    /*\n    const test = JSON.stringify(localStorage.getItem(\"Plans Array\"));\n    console.log(\"test:  \", test);\n    const test2: PlanProps = JSON.parse(test);\n    console.log(\"test2: \", test2);\n    */\n   \n   \n    //localStorage.getItem(\"SAVED ARRAY\");\n    \n    //classes = useStyles();\n    //const dispatch = useDispatch();\n    /*\n    const renderItems = (testArray: PlanProps[]) =>{\n        if(testArray){\n            return (\n                <div className=\"grid\">\n                    <button onClick={addPlan}>Add a plan +</button>\n                    {JSON.parse(JSON.stringify(localStorage.getItem(\"Plans Array\")))}\n                    {testArray.map(planItem =>\n                        <li key={planItem.uuid}>{renderCard(planItem)}</li>\n                    )}    \n                    \n                </div>\n            ); \n        }\n    };\n    */\n    \n\n    return (\n        <div className=\"grid\">    \n            <button onClick={addPlan}>Add a plan +</button>\n            {plans.map(planItem =>\n                <li key={planItem.uuid}>{renderCard(planItem)}</li>\n            )}\n        </div>\n    );\n}\n/*\n<Row><Col xs={5} className=\"g-4\"><Card className=\"card\">\n    <Card.Img variant=\"top\" src=\"./Plans/placeholder-image.jpeg\"/>\n    <Card.Body>\n        <Card.Title className=\"title\">\n            <input type=\"Enter name for plan: \" name=\"Plan 1\" />\n        </Card.Title>\n        <Card.Text>This is a test card</Card.Text></Card.Body><Link to=\"/Plan\">\n        <Button variant=\"primary\" >\n                Go to plan</Button></Link><Card.Footer><small className=\"text-muted\">Last updated x mins ago.</small></Card.Footer></Card></Col>\n<Col xs={5} className=\"g-4\"><Card className=\"card\">\n    <Card.Img variant=\"top\" src=\"placeholder-image.jpeg\"/>\n    <Card.Body>\n        <Card.Title className=\"title\">Test Plan</Card.Title>\n        <Card.Text>This is a test card</Card.Text></Card.Body><Link to=\"/Plan\">\n        <Button variant=\"primary\" >\n                Go to plan</Button></Link><Card.Footer><small className=\"text-muted\">Last updated x mins ago.</small></Card.Footer></Card></Col></Row>*/\nexport default Plan;","import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction clearSemesters(\n    years: Array<YearProps>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearProps[] = new Array<YearProps>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearProps>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string) => void;\n    removeYear: (uuid: string) => void;\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clear: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearProps; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearProps>();\n            }\n            : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeYear = (uuid: string) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        };\n        updateYears(action);\n    };\n    return {\n        value: years,\n        push: addYear,\n        putSemester: addSemester,\n        removeSemester: removeSemester,\n        removeYear: removeYear,\n        clear: (uuid?: string) => {\n            clearSemesters(years, addYear, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface AddNewCourseProps {\n    /**All of the existing courses. */\n    courses: CourseProps[];\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseProps;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <button onClick={props.onClickClose} data-testid=\"close-course-form\">Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.id}\n                            />\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                defaultValue={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"courseCorequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.coreqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"coursePrerequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.prereqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\" data-testid=\"submit-course-button\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    /**A function that deletes this course from the global map containing all courses. */\n    onRemoveCourse: (courseToRemove: CourseProps) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (courseToEdit: CourseProps) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div draggable={true}>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.onRemoveCourse(props);\n                }}\n            >\n                {`${props.credits} ${props.name}`}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState } from \"react\";\nimport { CourseAction } from \"../hooks/useCourses\";\nimport CourseProps from \"../interfaces/Course\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\n\ninterface FullSemesterProps extends SemesterProps {\n    /**The uuid's of all exiting courses */\n    courses: Map<string, CourseProps>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that updates the courses object. */\n    updateCourses: (action: CourseAction) => void;\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [newCourse, setNewCourse] = useState<CourseProps>({\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: props.uuid,\n        coreqs: [],\n        prereqs: [],\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const courseToAdd: CourseProps = { ...newCourse };\n        switch (event.target.name) {\n        case \"courseName\":\n            courseToAdd.name = event.target.value;\n\n            break;\n        case \"courseID\":\n            courseToAdd.id = event.target.value;\n            break;\n        case \"courseDescription\":\n            courseToAdd.description = event.target.value;\n            break;\n        case \"courseCredits\":\n            courseToAdd.credits = parseInt(event.target.value);\n            break;\n        case \"courseCorequisites\":\n            courseToAdd.coreqs = event.target.checked\n                ? [...courseToAdd.coreqs, event.target.value]\n                : courseToAdd.coreqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        case \"coursePrerequisites\":\n            courseToAdd.prereqs = event.target.checked\n                ? [...courseToAdd.prereqs, event.target.value]\n                : courseToAdd.prereqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        }\n        setNewCourse(courseToAdd);\n    };\n    const unAttachCourse = (courseToRemove: CourseProps) => {\n        const action: CourseAction = {\n            type: \"REMOVE COURSE\",\n            payload: courseToRemove,\n        };\n        props.updateCourses(action);\n    };\n\n    const onClickEdit = (courseToEdit: CourseProps) => {\n        setNewCourse(courseToEdit);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const action: CourseAction = {\n            type: \"ADD COURSE\",\n            payload: newCourse,\n        };\n\n        props.updateCourses(action);\n        setNewCourse({\n            id: \"\",\n            name: \"\",\n            description: \"\",\n            credits: 0,\n            semester: props.uuid,\n            coreqs: [],\n            prereqs: [],\n        });\n        if (isEditing) setIsEditing(false);\n    };\n    const addedCourses = Array.from(props.courses.values())\n        .filter((course) => course.semester === props.uuid)\n        .map((course) => {\n            return (\n                <ListGroupItem key={course.id}>\n                    {\n                        <Course\n                            {...course}\n                            onClickEdit={onClickEdit}\n                            onRemoveCourse={unAttachCourse}\n                        />\n                    }\n                </ListGroupItem>\n            );\n        });\n\n    return (\n        <>\n            <AddCourse\n                courses={Array.from(props.courses.values())}\n                defaultValues={newCourse}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={`Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n            >\n                {props.name}\n            </span>\n            <button\n                data-testid={`Remove Semester ${\n                    props.name\n                } ${props.start.getUTCFullYear()}`}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <ListGroup className=\"courses\">{addedCourses}</ListGroup>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n            <br />\n            <button\n                onClick={props.clearCourses}\n                data-testid=\"clear-courses-button\"\n            >\n                clear\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React, { ChangeEvent, FormEvent, useRef, useMemo } from \"react\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {\n    Container,\n    Row,\n    Col,\n    Popover,\n    Card,\n    PopoverContent,\n    Overlay,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport Semester from \"./Semester\";\nimport { Courses } from \"../hooks/useCourses\";\nimport SemesterForm from \"./SemesterForm\";\n\ninterface FullYearProps extends YearProps {\n    /**The global list of courses */\n    courses: Courses;\n    /**The function to call when the form that creates semesters is submitted. */\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**The function to call when a field in the semester form is modified. */\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    /**The uuid of the year that is currently displaying the form to create a new semester. Null indicates no form is open. */\n    formUuid: string | null;\n    /**A function that removes a semester from the year. */\n    removeSemester: (semesterUuid: string) => void;\n    /**Whether or not the semester form can be submitted. */\n    canSubmit: boolean;\n    /**A function that clears out all semesters in this year.*/\n    clear: () => void;\n    /**A function that takes in the uuid of a semester and removes all courses from that semester. */\n    clearCourses: (semesterUuid: string) => void;\n    /**A function used to modify formUuid, as well as some other state variables used for input validation. */\n    formInit: (uuid: string | null) => void;\n}\n\n/**Represents an academic year in a Scheduler containing a variable number of Semesters. */\nfunction Year(props: FullYearProps): JSX.Element {\n    const overlayButton = useRef(null);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterProps, b: SemesterProps) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterProps,\n                    index: number,\n                    array: Array<SemesterProps>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterProps = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n    return (\n        <Container fluid>\n            <Row className=\"mb-3\">\n                <Col md={11}>\n                    <Card className=\" p-2\">\n                        <Collapsible\n                            trigger={\n                                <button\n                                    data-testid={`Year ${props.index} label`}\n                                    className=\"trigger\"\n                                >{`Year ${props.index} >`}</button>\n                            }\n                            transitionTime={200}\n                        >\n                            <Row data-testid=\"collapsible-content\">\n                                {sortedSemesters.map(\n                                    (\n                                        semesterProps: SemesterProps,\n                                        index: number\n                                    ) => {\n                                        return (\n                                            <Col\n                                                data-testid={`Year ${\n                                                    props.index\n                                                } semester ${index + 1}`}\n                                                key={semesterProps.uuid}\n                                            >\n                                                <Semester\n                                                    courses={\n                                                        props.courses.courseList\n                                                    }\n                                                    {...semesterProps}\n                                                    removeSemester={() => {\n                                                        props.removeSemester(\n                                                            semesterProps.uuid\n                                                        );\n                                                    }}\n                                                    updateCourses={\n                                                        props.courses\n                                                            .updateCourses\n                                                    }\n                                                    clearCourses={() => {\n                                                        props.clearCourses(\n                                                            semesterProps.uuid\n                                                        );\n                                                    }}\n                                                />\n                                            </Col>\n                                        );\n                                    }\n                                )}\n\n                                <Col>\n                                    <button\n                                        data-testid={`trigger ${props.index}`}\n                                        className=\"trigger\"\n                                        ref={overlayButton}\n                                        onClick={() => {\n                                            props.formInit(\n                                                props.formUuid === props.uuid\n                                                    ? null\n                                                    : props.uuid\n                                            );\n                                        }}\n                                    >\n                                        +\n                                    </button>\n                                    <Overlay\n                                        target={overlayButton}\n                                        placement=\"right-end\"\n                                        show={props.formUuid === props.uuid}\n                                        onHide={() => {\n                                            props.formInit(null);\n                                        }}\n                                        rootClose={true}\n                                        transition={false}\n                                    >\n                                        <Popover id=\"popover-basic\">\n                                            <PopoverContent>\n                                                <div\n                                                    data-testid={`semester-form ${props.index}`}\n                                                >\n                                                    <SemesterForm\n                                                        canSubmit={\n                                                            props.canSubmit\n                                                        }\n                                                        handleInput={\n                                                            props.handleInput\n                                                        }\n                                                        handleSubmit={\n                                                            props.handleSubmit\n                                                        }\n                                                    />\n                                                </div>\n                                            </PopoverContent>\n                                        </Popover>\n                                    </Overlay>\n                                </Col>\n                            </Row>\n                        </Collapsible>\n                    </Card>\n                </Col>\n                <Col>\n                    <button\n                        onClick={props.clear}\n                        data-testid={`clear-year ${props.index}`}\n                    >\n                        Clear\n                    </button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Year;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nexport interface CourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n    payload: CourseProps;\n}\n\n// easy access to the courses\n\nconst courseReducer = (\n    state: Map<string, CourseProps>,\n    action: CourseAction\n): Map<string, CourseProps> => {\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const newState = new Map<string, CourseProps>(state);\n        newState.set(action.payload.id, action.payload);\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const newState = new Map<string, CourseProps>(state);\n        newState.delete(action.payload.id);\n        return newState;\n    }\n    }\n};\n\nconst courseInit = (\n    courses?: Map<string, CourseProps>\n): Map<string, CourseProps> => {\n    if (courses) return courses;\n    else return new Map<string, CourseProps>();\n};\nexport interface Courses {\n    courseList: Map<string, CourseProps>;\n    removeCourse: (courseID: string) => void;\n\n    updateCourses: (action: CourseAction) => void;\n}\nfunction useCourses(initialCourses?: Map<string, CourseProps>): Courses {\n    {\n        const [courses, updateCourses] = useReducer(\n            courseReducer,\n            initialCourses,\n            courseInit\n        );\n\n        const onRemoveCourse = (courseID: string) => {\n            //get the course to remove\n\n            const courseToRemove = courses.get(courseID);\n            if (courseToRemove) {\n                const action: CourseAction = {\n                    type: \"REMOVE COURSE\",\n                    payload: courseToRemove,\n                };\n                updateCourses(action);\n            } else {\n                throw new Error(\"Course not found\");\n            }\n        };\n\n        return {\n            courseList: courses,\n            removeCourse: onRemoveCourse,\n\n            updateCourses: updateCourses,\n        };\n    }\n}\nexport default useCourses;\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\n\nimport Year from \"./Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport validate from \"../util/validation/dates\";\n\nimport useCourses, { Courses } from \"../hooks/useCourses\";\n\nimport { Table } from \"react-bootstrap\";\n\ninterface SchedulerProps {\n    /**csv data that can be used to reconstruct a scheduler. */\n    csv?: string;\n    /**Json data that can be used to reconstruct a scheduler.  */\n    json?: string;\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n}\n\nfunction getStartingYears(): Array<YearProps> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearProps = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction clearCourses(semesterUuid: string, courses: Courses){\n    const entries = courses.courseList.entries();\n    for (\n        let entry = entries.next();\n        !entry.done;\n        entry = entries.next()\n    ) {\n        if (entry.value[1].semester === semesterUuid) {\n            courses.removeCourse(entry.value[0]);\n        }\n    }\n}\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears(getStartingYears);\n\n        const courses = useCourses(undefined);\n\n        const [unmetRequirements, setUnmetRequirements] = useState<\n            Array<string>\n        >([]);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const [submissionAllowed, setSubmissionAllowed] = useState(false);\n        const problems = useProblems();\n        const semesterFormInit = (uuid: string | null) => {\n            setCurrentForm(uuid);\n            setSubmissionAllowed(false);\n            setNewName(null);\n            setNewStart(null);\n            setNewEnd(null);\n            problems.clear(\"semester-form\");\n        };\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n            case \"season\": {\n                setNewName(event.target.value);\n                break;\n            }\n            case \"starts\": {\n                const semesters =\n                        years.value[\n                            getByUUID(years.value, currentForm as string)\n                        ].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(\n                    newDate,\n                    newEnd !== null ? new Date(newEnd) : null,\n                    semesters,\n                    \"starts\"\n                );\n                if (newEnd === null) {\n                    problems.clear(\"semester-form\");\n                    if (newProblems.length === 1) {\n                        problems.add(newProblems[0]);\n                    }\n                } else {\n                    problems.clear(\"semester-form\");\n                    for (const problem of newProblems) {\n                        problems.add(problem);\n                    }\n                }\n                setNewStart(event.target.value);\n                break;\n            }\n            case \"ends\": {\n                const semesters =\n                        years.value[\n                            getByUUID(years.value, currentForm as string)\n                        ].semesters;\n                const newDate = new Date(event.target.value);\n                const newProblems = validate(\n                    newStart !== null ? new Date(newStart) : null,\n                    newDate,\n                    semesters,\n                    \"ends\"\n                );\n                if (newEnd === null) {\n                    problems.clear(\"semester-form\");\n                    if (newProblems.length === 1) {\n                        problems.add(newProblems[0]);\n                    }\n                } else {\n                    problems.clear(\"semester-form\");\n                    for (const problem of newProblems) {\n                        problems.add(problem);\n                    }\n                }\n                setNewEnd(event.target.value);\n                break;\n            }\n            }\n        };\n\n        //set if courses match requirements using props.requirements\n        useEffect(() => {\n            const requirements = props.requirements;\n            const newCourses = Array<string>();\n\n            for (const requirement of requirements) {\n                if (!courses.courseList.has(requirement)) {\n                    newCourses.push(requirement);\n                }\n            }\n            setUnmetRequirements(newCourses);\n        }, [props.requirements, courses.courseList]);\n\n        const handleSemesterSubmit = (\n            event: FormEvent<HTMLFormElement>,\n            id: string\n        ) => {\n            event.preventDefault();\n            if (newName !== null && newEnd !== null && newStart !== null) {\n                years.putSemester(\n                    id,\n                    uuid(),\n                    new Date(newStart as string),\n                    new Date(newEnd as string),\n                    newName as string\n                );\n                setNewName(null);\n                setNewStart(null);\n                setNewEnd(null);\n                setCurrentForm(null);\n                problems.clear(\"semester-form\");\n            }\n        };\n        if (\n            newName &&\n            newEnd &&\n            newStart &&\n            !submissionAllowed &&\n            !hasError(problems.value)\n        ) {\n            setSubmissionAllowed(true);\n        } else if (\n            (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n            submissionAllowed\n        ) {\n            setSubmissionAllowed(false);\n        }\n        return (\n            <>\n                <button\n                    onClick={() => {\n                        years.clear();\n                    }}\n                    data-testid=\"clear-button\"\n                >\n                    Clear\n                </button>\n                <div>\n                    {years.value.map((props: YearProps, i: number) => {\n                        return (\n                            <div data-testid={\"Year\"} key={props.uuid}>\n                                <Year\n                                    courses={courses}\n                                    canSubmit={submissionAllowed}\n                                    handleInput={handleSemesterInput}\n                                    handleSubmit={(\n                                        event: FormEvent<HTMLFormElement>\n                                    ) => {\n                                        handleSemesterSubmit(event, props.uuid);\n                                    }}\n                                    semesters={props.semesters}\n                                    uuid={props.uuid}\n                                    index={i + 1}\n                                    formUuid={currentForm}\n                                    removeSemester={(semesterUuid: string) => {\n                                        years.removeSemester(\n                                            props.uuid,\n                                            semesterUuid\n                                        );\n                                    }}\n                                    clear={() => {\n                                        years.clear(props.uuid);\n                                    }}\n                                    clearCourses={(semesterUuid: string) => {\n                                        clearCourses(semesterUuid, courses);\n                                    }}\n                                    formInit={semesterFormInit}\n                                />\n                            </div>\n                        );\n                    })}\n                    <button\n                        data-testid=\"add-year-button\"\n                        onClick={() => {\n                            years.push(uuid(), years.value.length);\n                        }}\n                    >\n                        +\n                    </button>\n                </div>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Degree Requirements</th>\n                            <th>Unmet Requirements</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>School of Engineering</td>\n                            <td>{unmetRequirements.join(\", \")}</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <ErrorStack problems={problems.value} />\n            </>\n        );\n    }\n    return <></>;\n}\n","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3>School of Engineering Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n            <Link to=\"/\">\n                <Button className=\"my-3\">Back</Button>\n            </Link>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    Link,\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport Plan from \"./components/Plan\";\nimport { Button } from \"react-bootstrap\";\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\n//import ReactDOM from \"react-dom\";\n\n// Master Plan View\nconst IndexPage = () => {\n    return (\n        <>\n            <div>\n                <h1 className=\"center\">UD CIS Scheduler</h1>\n                <h3 className=\"center\">Designed By: Lucas, Max, and Amani</h3>\n                <div role=\"alert\" className=\"welcome\">\n                    <p>Welcome to the UD Degree Planner!</p>\n                    <b>Click Add/Edit Plan below to Get Started</b>\n                </div>\n                <Plan uuid=\"\" id={0} />\n            </div>\n            <Link to=\"/Requirements\">\n                <Button className=\"my-2\">Modify Requirements</Button>\n            </Link>\n        </>\n    );\n};\n\ntype PlansPageProps = RouteComponentProps & {\n    requirements: string[];\n};\n\nconst PlansPage: FC<PlansPageProps> = (props) => {\n    return (\n        <>\n            {/*\n            {users.map((user, index) => (\n                <h5 key={index}>\n                    <Link to={`/user/${index + 1}`}>{user.name}s Page</Link>\n                </h5>\n\n            ))}\n            */}\n            <Scheduler requirements={props.requirements} />\n            <Link to=\"/\">\n                <Button>Back</Button>\n            </Link>\n            {console.log(\"the uuid is : \", localStorage.getItem(\"plan: 0\"))}\n        </>\n    );\n};\n\nfunction App(): JSX.Element {\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        <div className=\"container\">\n            <HashRouter>\n                <Switch>\n                    <Router>\n                        <Route\n                            path=\"/Plans/:uuid\"\n                            render={(props) => \n                                <PlansPage\n                                    {...props}\n                                    requirements={requirements}\n                                />\n                            }\n                        ></Route>\n                        <Route\n                            path=\"/Requirements\"\n                            render={(props) => \n                                <Requirements\n                                    {...props}\n                                    requirements={requirements}\n                                    onAddRequirement={addRequirement}\n                                    onRemoveRequirement={removeRequirement}\n                                />\n                            }\n                        ></Route>\n                        <Route exact path=\"/\" component={IndexPage}></Route>\n                    </Router>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}