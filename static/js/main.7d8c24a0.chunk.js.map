{"version":3,"sources":["components/Plan.tsx","hooks/useYears.ts","hooks/useProblems.ts","components/ErrorStack.tsx","hooks/useCourses.ts","util/validation/dates.ts","components/Year/YearHeader.tsx","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year/SemesterList.tsx","components/Year/FormTrigger.tsx","components/Year/SemesterForm.tsx","components/Year/Year.tsx","components/Scheduler.tsx","util/events/SemesterFormEvents.ts","components/Requirements.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Array","Plan","useState","plans","setPlans","renderCard","planItem","localStorage","setItem","JSON","stringify","Card","id","style","width","className","Body","Title","to","uuid","Text","date","onClick","window","confirm","newArray","index","indexOf","splice","deleteCard","name","years","copy","length","Date","toLocaleDateString","map","getByUUID","state","i","yearReducer","prev","action","next","x","type","semAction","targetIndex","target","newYear1","concat","semesters","push","start","end","semesterUuid","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","updateYears","putSemester","clear","pusher","semesterRemover","yearRemover","yearUuid","newYears","year","clearSemesters","problemReducer","newState","error","message","source","problemType","realAction","problem","output","initializer","ErrorStack","props","problems","ctr","ReactDOM","createPortal","document","body","courseReducer","course","newCourse","courseInit","courses","useCourses","initialCourses","updateCourses","courseList","removeCourse","validate","existing","getTime","validate_both_dates","validate_single_date","YearHeader","Container","fluid","Row","Col","md","trigger","transitionTime","children","AddCourse","isOpen","onClickClose","Form","onSubmit","onClickSubmit","Group","as","controlId","Label","Control","placeholder","defaultValue","defaultValues","onChange","href","credits","Check","label","defaultChecked","coreqs","includes","prereqs","description","height","Button","variant","isEditing","getElementById","Course","draggable","display","onClickEdit","getEmptyCourse","Semester","setNewCourse","setIsOpen","setIsEditing","semesterCourses","useMemo","totalCredits","reduce","previousValue","currentValue","from","values","event","preventDefault","handleCourseSubmit","courseToAdd","parseInt","checked","ListGroup","ListGroupItem","clearCourses","SemesterList","sortedSemesters","sort","a","b","array","count","newSemester","semesterProps","FormTrigger","overlayButton","useRef","ref","setForm","currentForm","YearUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","clearYear","submissionAllowed","handleSemesterInput","handleSemesterSubmit","getStartingYears","getFullYear","yearOne","yearTwo","hasError","Scheduler","unmetRequirements","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","setCurrentForm","setSubmissionAllowed","dispatchOutput","add","resolve","useProblems","newProblems","newDate","handleSemesterFormInput","resetForm","addSemester","handleSemesterFormSubmit","useEffect","requirements","newCourses","requirement","Table","join","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","FormControl","el","title","IndexPage","role","PlansPage","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.7d8c24a0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanProps from \"../interfaces/Plan\";\nimport { YearProps } from \"../interfaces/Year\";\n\n\nexport const testList: PlanProps[] = [\n    {\n        uuid: \"1\",\n        id: 1,\n        name: \"max\",\n        date: \"01/01/2021\",\n        years: Array<YearProps>()\n    },\n    {\n        uuid: \"2\",\n        id: 2,\n        name: \"amani\",\n        date: \"02/02/2021\",\n        years: Array<YearProps>()\n    }\n];\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function Plan(): JSX.Element {\n    \n    const [plans, setPlans] = useState<Array<PlanProps>>([]);\n    const addPlan = () => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: plans.length,\n            uuid: uuid(),\n            name: \"\",\n            date: new Date().toLocaleDateString(),\n            years: new Array<YearProps>()\n        }]);\n    };\n\n    const deleteCard = (planItem: PlanProps) => {\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n            const newArray = [...plans];\n            const index = newArray.indexOf(planItem);\n            newArray.splice(index, 1);\n            setPlans(newArray);\n        }\n    };\n\n    const copy = (planItem: PlanProps) => {\n        // sets array of all cards\n        setPlans([...plans, {\n            id: planItem.id,\n            uuid: uuid(),\n            name: planItem.name,\n            date: planItem.date,\n            years: planItem.years\n        }]);\n    };\n    \n    const renderCard = (planItem: PlanProps) => {\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        return (\n            <Card data-testid={`Plan ${planItem.id}`} style={{ width: \"18rem\" }} className=\"grid\">\n                <Card.Body>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    \n                    <Link to={`Plans/${planItem.uuid}`}>\n                        <button data-testid=\"edit-plan\">\n                            Edit Plan\n                        </button>\n                    </Link>\n                    <Card.Text>{planItem.date}</Card.Text>\n                    <button data-testid=\"delete-plan\" onClick={() => {\n                        deleteCard(planItem);\n                    }}>-</button>\n                    <button data-testid=\"copy-plan\" onClick={() => {\n                        copy(planItem);\n                    }}>Duplicate Plan</button>\n                </Card.Body>\n            </Card>\n        );\n    };\n    return (\n        <div className=\"grid\">    \n            <button onClick={addPlan} data-testid=\"add-plan\">Add a plan +</button>\n            {plans.map(planItem =>\n                <li key={planItem.uuid}>{renderCard(planItem)}</li>\n            )}\n        </div>\n    );\n}\n\nexport default Plan;","import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\"\n        | \"DELETE COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction yearReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearProps = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearProps) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction clearSemesters(\n    years: Array<YearProps>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearProps[] = new Array<YearProps>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearProps>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string) => void;\n    removeYear: (uuid: string) => void;\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clear: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearProps; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearProps>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearProps>();\n            }\n            : init\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateYears(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        const action: DeleteSemesterAction = {\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        };\n        updateYears(action);\n    };\n    const removeYear = (uuid: string) => {\n        const action: DeleteYearAction = {\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        };\n        updateYears(action);\n    };\n    return {\n        value: years,\n        push: addYear,\n        putSemester: addSemester,\n        removeSemester: removeSemester,\n        removeYear: removeYear,\n        clear: (uuid?: string) => {\n            clearSemesters(years, addYear, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\nfunction problemReducer(prev: Array<Problem>, action: AbstractProblemAction): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        const action: ResolveProblemAction = {type: \"RESOLVE-TYPE\", target: target};\n        dispatchOutput(action);\n    };\n\n    const add = (problem: Problem) => {\n        const action: AddProblemAction = {type: \"ADD\", problem: problem};\n        dispatchOutput(action);\n    };\n\n    const clear = (source: string) => {\n        const action: ClearProblemAction = {type: \"CLEAR\", source: source};\n        dispatchOutput(action);\n    };\n\n    return {add: add, resolve: resolve, clear: clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps{\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element{\n    if(props.problems !== null){\n        const ctr = [<div className=\"error-counter\" key={0}>\n            {props.problems.length} {props.problems.length === 1 ? \"error\" : \"errors\"}\n        </div>];\n        return ReactDOM.createPortal(\n            <div className=\"error-stack-container\">\n                <div className=\"error-stack\">\n                    {ctr.concat(props.problems.map((problem: Problem, index: number) => {\n                        return (\n                            <span className={problem.error ? \"error\" : \"warning\"} key={index+1} data-testid={problem.error ? \"error\" : \"warning\"}>\n                                {problem.message}\n                            </span>\n                        );\n                    }))}\n                </div>\n\n            </div>,document.body);\n    }else{\n        return <span data-testid=\"no-errors\"/>;\n    }\n\n}","import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { getByUUID } from \"./useYears\";\n\nexport interface AbstractCourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\";\n}\n\nexport interface AddCourseAction {\n    type: \"ADD COURSE\",\n    newCourse: CourseProps\n}\n\nexport interface RemoveCourseAction {\n    type: \"REMOVE COURSE\",\n    uuid: string\n}\n\n// easy access to the courses\n\nconst courseReducer = (state: Array<CourseProps>,action: AbstractCourseAction): Array<CourseProps> => {\n    const newState = state.map((course: CourseProps) => {\n        return course;\n    });\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const realAction = action as AddCourseAction;\n        newState.push(realAction.newCourse);\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const realAction = action as RemoveCourseAction;\n        const target = getByUUID(newState, realAction.uuid);\n        if(target !== -1){\n            newState.splice(target, 1);\n        }\n        return newState;\n    }\n    }\n};\n\nconst courseInit = (courses?: Array<CourseProps>): Array<CourseProps> => {\n    return courses === undefined ? [] : courses;\n};\n\nexport interface Courses {\n    courseList: Array<CourseProps>;\n    removeCourse: (courseID: string) => void;\n    push: (course: CourseProps) => void;\n}\nfunction useCourses(initialCourses?: Array<CourseProps>): Courses {\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        initialCourses,\n        courseInit\n    );\n\n    const push = (course: CourseProps) => {\n        const action: AddCourseAction = {type: \"ADD COURSE\", newCourse: course};\n        updateCourses(action);\n    };\n\n    const remove = (uuid: string) => {\n        const action: RemoveCourseAction = {type: \"REMOVE COURSE\", uuid: uuid};\n        updateCourses(action);\n    };\n\n    return {\n        courseList: courses,\n        removeCourse: remove,\n        push: push,\n    };\n}\nexport default useCourses;\n","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Card,\n} from \"react-bootstrap\";\nimport Collapsible from \"react-collapsible\";\n\ninterface YearHeaderProps {\n    index: number,\n    clearSemesters: () => void,\n    children: JSX.Element | JSX.Element[]\n}\n\nexport default function YearHeader(props: YearHeaderProps): JSX.Element{\n    return (\n        <Container fluid>\n            <Row className=\"mb-3\">\n                <Col md={11}>\n                    <Card className=\" p-2\">\n                        <Collapsible\n                            trigger={\n                                <button\n                                    data-testid={`Year ${props.index} label`}\n                                    className=\"trigger\"\n                                >{`Year ${props.index} >`}</button>\n                            }\n                            transitionTime={200}\n                        >\n                            <Row data-testid=\"collapsible-content\">\n                                {props.children}\n                            </Row>\n                        </Collapsible>\n                    </Card>\n                </Col>\n                <Col>\n                    <button\n                        onClick={props.clearSemesters}\n                        data-testid={`clear-year ${props.index}`}\n                    >\n                            Clear\n                    </button>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface AddNewCourseProps {\n    /**All of the existing courses. */\n    courses: CourseProps[];\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseProps;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <button onClick={props.onClickClose} data-testid=\"close-course-form\">Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.id}\n                            />\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                defaultValue={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"courseCorequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.coreqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses\n                                .filter(\n                                    (course) =>\n                                        course.id != props.defaultValues.id\n                                )\n                                .map((course: CourseProps) => \n                                    <Form.Check\n                                        key={course.id}\n                                        type=\"checkbox\"\n                                        label={course.name}\n                                        name=\"coursePrerequisites\"\n                                        value={course.id}\n                                        defaultChecked={props.defaultValues.prereqs.includes(\n                                            course.id\n                                        )}\n                                        onChange={props.onChange}\n                                    />\n                                )}\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\" data-testid=\"submit-course-button\">\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\ninterface CurrentCourseProps extends CourseProps {\n    /**A function that deletes this course from the global map containing all courses. */\n    removeCourse: (uuid: string) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (uuid: string) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CurrentCourseProps): JSX.Element => {\n    return (\n        <div draggable={true} data-testid={`Course ${props.id}: ${props.name}`}>\n            <div\n                style={{ display: \"inline-block\" }}\n                onClick={() => {\n                    props.removeCourse(props.uuid);\n                }}\n                data-testid=\"remove-course\"\n            >\n                {`${props.credits} ${props.name}`}\n            </div>\n            <button\n                style={{ display: \"inline-block\" }}\n                className=\"trigger\"\n                data-testid=\"edit-course-button\"\n                onClick={() => {\n                    props.onClickEdit(props.uuid);\n                }}\n            >\n                Edit\n            </button>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState, useMemo } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\nimport {v4 as uuid} from \"uuid\";\nimport {getByUUID} from \"../hooks/useYears\";\n\ninterface FullSemesterProps extends SemesterProps {\n    /**The uuid's of all exiting courses */\n    courses: Array<CourseProps>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that removes a course from the global list. */\n    removeCourse: (uuid: string) => void,\n    /**A function that pushes courses into the global list. */\n    push: (course: CourseProps) => void,\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\nfunction getEmptyCourse(semester: string): CourseProps{\n    return {\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: semester,\n        coreqs: [],\n        prereqs: [],\n        uuid: uuid()\n    };\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = (props: FullSemesterProps): JSX.Element => {\n    const [newCourse, setNewCourse] = useState<CourseProps>(() => {\n        return getEmptyCourse(props.uuid);\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const courseToAdd: CourseProps = { ...newCourse };\n        switch (event.target.name) {\n        case \"courseName\":\n            courseToAdd.name = event.target.value;\n            break;\n        case \"courseID\":\n            courseToAdd.id = event.target.value;\n            break;\n        case \"courseDescription\":\n            courseToAdd.description = event.target.value;\n            break;\n        case \"courseCredits\":\n            courseToAdd.credits = parseInt(event.target.value);\n            break;\n        case \"courseCorequisites\":\n            courseToAdd.coreqs = event.target.checked\n                ? [...courseToAdd.coreqs, event.target.value]\n                : courseToAdd.coreqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        case \"coursePrerequisites\":\n            courseToAdd.prereqs = event.target.checked\n                ? [...courseToAdd.prereqs, event.target.value]\n                : courseToAdd.prereqs.filter(\n                    (x) => x !== event.target.value\n                );\n            break;\n        }\n        setNewCourse(courseToAdd);\n    };\n\n    const onClickEdit = (uuid: string) => {\n        setNewCourse(props.courses[getByUUID(props.courses, uuid)]);\n        setIsOpen(true);\n        setIsEditing(true);\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        props.push(newCourse);\n        setNewCourse(getEmptyCourse(props.uuid));\n        if (isEditing) setIsEditing(false);\n    };\n    const semesterCourses = useMemo(() => {\n        return props.courses.filter((course: CourseProps) => {\n            return course.semester === props.uuid;\n        });\n    },[props.courses]);\n\n    const totalCredits = useMemo(() => {\n        return semesterCourses.reduce((previousValue: CourseProps, currentValue: CourseProps) => {\n            return {id: \"\", description: \"\", name: \"\", credits: previousValue.credits+currentValue.credits, semester: \"\", coreqs: [], prereqs: [], uuid: \"\"};\n        },{id: \"\", description: \"\", name: \"\", credits: 0, coreqs: [], prereqs: [], semester: \"\", uuid: \"\"}).credits;\n    },[semesterCourses]);\n\n    return (\n        <>\n            <AddCourse\n                courses={Array.from(props.courses.values())}\n                defaultValues={newCourse}\n                isEditing={isEditing}\n                isOpen={isOpen}\n                onClickClose={() => {\n                    setIsOpen(false);\n                    setIsEditing(false);\n                }}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            <span\n                data-testid={\"semester-name\"}\n            >\n                {`${props.name} `}\n            </span>\n            <span data-testid=\"credits-count\">\n                {totalCredits}\n            </span>\n            <button\n                data-testid={\"remove-semester\"}\n                className=\"trigger\"\n                onClick={props.removeSemester}\n            >\n                -\n            </button>\n\n            <ListGroup className=\"courses\">{semesterCourses.map((course: CourseProps) => {\n                return (\n                    <ListGroupItem key={course.id}>\n                        {\n                            <Course\n                                {...course}\n                                onClickEdit={onClickEdit}\n                                removeCourse={props.removeCourse}\n                            />\n                        }\n                    </ListGroupItem>\n                );\n            })}\n            </ListGroup>\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n            <br />\n            <button\n                onClick={props.clearCourses}\n                data-testid=\"clear-courses-button\"\n            >\n                clear\n            </button>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, {useMemo} from \"react\";\nimport SemesterProps from \"../../interfaces/Semester\";\nimport Col from \"react-bootstrap/Col\";\nimport Semester from \"../Semester\";\nimport { Courses } from \"../../hooks/useCourses\";\n\ninterface SemesterListProps {\n    removeSemester: (uuid: string) => void,\n    clearCourses: (semesterUuid: string) => void,\n    courses: Courses,\n    semesters: Array<SemesterProps>,\n\n}\n\nexport default function SemesterList(props: SemesterListProps): JSX.Element{\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterProps, b: SemesterProps) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterProps,\n                    index: number,\n                    array: Array<SemesterProps>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterProps = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n\n    return (\n        <>\n            {sortedSemesters.map((semesterProps: SemesterProps,index: number) => {\n                return (\n                    <Col\n                        data-testid={`semester ${index + 1}`}\n                        key={semesterProps.uuid}\n                    >\n                        <Semester\n                            courses={\n                                props.courses.courseList\n                            }\n                            {...semesterProps}\n                            removeSemester={() => {\n                                props.removeSemester(\n                                    semesterProps.uuid\n                                );\n                            }}\n                            push={\n                                props.courses.push\n                            }\n                            removeCourse={\n                                props.courses.removeCourse\n                            }\n                            clearCourses={() => {\n                                props.clearCourses(\n                                    semesterProps.uuid\n                                );\n                            }}\n                        />\n                    </Col>\n                );\n            }\n            )}\n        </> \n    );\n}\n\n","import React, {useRef} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Overlay from \"react-bootstrap/Overlay\";\n\n\ninterface FormTriggerProps{\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    YearUuid: string,\n    children: JSX.Element\n}\n\nexport default function FormTrigger(props: FormTriggerProps): JSX.Element{\n    const overlayButton = useRef(null);\n    return (\n        <Col data-testid=\"form-trigger\">\n            <button\n                data-testid=\"open-semester-form\"\n                className=\"trigger\"\n                ref={overlayButton}\n                onClick={() => {\n                    props.setForm(\n                        props.currentForm === props.YearUuid\n                            ? null\n                            : props.YearUuid\n                    );\n                }}\n            >\n                +\n            </button>\n            <Overlay\n                target={overlayButton}\n                placement=\"right-end\"\n                show={props.currentForm === props.YearUuid}\n                onHide={() => {\n                    props.setForm(null);\n                }}\n                rootClose={true}\n                transition={false}\n            >\n                <Popover id=\"popover-basic\" data-testid=\"popover\">\n                    <PopoverContent>\n                        <div\n                            data-testid={\"semester-form\"}\n                        >\n                            {props.children}\n                        </div>\n                    </PopoverContent>\n                </Popover>\n            </Overlay>\n        </Col>\n    );\n}","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React from \"react\";\nimport YearHeader from \"./YearHeader\";\nimport SemesterList from \"./SemesterList\";\nimport FormTrigger from \"./FormTrigger\";\nimport SemesterForm from \"./SemesterForm\";\nimport CourseProps from \"../../interfaces/Course\";\nimport { ChangeEvent, FormEvent } from \"react\";\nimport { Courses } from \"../../hooks/useCourses\";\nimport SemesterProps from \"../../interfaces/Semester\";\n\ninterface YearProps{\n    clearYear: () => void\n    removeSemester: (uuid: string) => void,\n    courses: Courses,\n    index: number,\n    uuid: string,\n    handleSemesterSubmit: (event: FormEvent<HTMLFormElement>, uuid: string) => void,\n    handleSemesterInput: (event: ChangeEvent<HTMLInputElement>) => void,\n    semesters: Array<SemesterProps>,\n    currentForm: string | null,\n    setForm: (newForm: string | null) => void,\n    submissionAllowed: boolean\n}\n\nexport default function Year(props: YearProps): JSX.Element{\n    return (\n        <div data-testid={`Year ${props.index}`} key={props.uuid}>\n            <YearHeader index={props.index} clearSemesters={() => {\n                props.clearYear();\n            }}\n            >\n                <SemesterList semesters={props.semesters} courses={props.courses} removeSemester={(semesterUuid: string) => {\n                    props.removeSemester(semesterUuid);\n                }}\n                clearCourses={(semesterUuid: string) => {\n                    for(const course of props.courses.courseList.filter((course: CourseProps) => {\n                        return course.semester === semesterUuid;\n                    })){\n                        props.courses.removeCourse(course.uuid); \n                    }\n                }}\n                />\n                <FormTrigger currentForm={props.currentForm} setForm={props.setForm} YearUuid={props.uuid}>\n                    <SemesterForm\n                        canSubmit={props.submissionAllowed}\n                        handleInput={props.handleSemesterInput}\n                        handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                            props.handleSemesterSubmit(event, props.uuid);\n                        }}\n                    />\n                </FormTrigger>\n            </YearHeader>\n        </div>\n    );\n}","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport { YearProps } from \"../interfaces/Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport useCourses from \"../hooks/useCourses\";\nimport { Table } from \"react-bootstrap\";\nimport {handleSemesterFormInput, handleSemesterFormSubmit} from \"../util/events/SemesterFormEvents\";\nimport Year from \"./Year/Year\";\n\ninterface SchedulerProps {\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n}\n\nfunction getStartingYears(): Array<YearProps> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearProps>();\n    const yearOne: YearProps = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearProps = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    const years = useYears(getStartingYears);\n\n    const courses = useCourses();\n    //The requirements for the degree that are not present in the plan\n    const [unmetRequirements, setUnmetRequirements] = useState<Array<string>>([]);\n    //The name of the new semester (null if the form is closed or nothing has been entered)\n    const [newName, setNewName] = useState<string | null>(null);\n    //The starting date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newStart, setNewStart] = useState<string | null>(null);\n    //The ending date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newEnd, setNewEnd] = useState<string | null>(null);\n    //The semester form that is currently open; kept track of here to ensure no more than 1 of these forms can be active at once\n    const [currentForm, setCurrentForm] = useState<string | null>(null);\n    //Whether or not the form to create a new semester can be submitted\n    const [submissionAllowed, setSubmissionAllowed] = useState(false);\n    //The problems with the user's current inputs\n    const problems = useProblems();\n    const setForm = (uuid: string | null) => {\n        setCurrentForm(uuid);\n        setSubmissionAllowed(false);\n        setNewName(null);\n        setNewStart(null);\n        setNewEnd(null);\n        problems.clear(\"semester-form\");\n    };\n    const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n        handleSemesterFormInput(event,newStart,newEnd,setNewName,setNewStart,setNewEnd,years,currentForm,problems);\n    };\n\n    const handleSemesterSubmit = (event: FormEvent<HTMLFormElement>, id: string) => {\n        handleSemesterFormSubmit(event,id,newName,newStart,newEnd,() => {\n            setForm(null);\n        },years.putSemester);\n    };\n\n    //set if courses match requirements using props.requirements\n    useEffect(() => {\n        const requirements = props.requirements;\n        const newCourses = Array<string>();\n\n        for (const requirement of requirements) {\n            if (getByUUID(courses.courseList, requirement) === -1) {\n                newCourses.push(requirement);\n            }\n        }\n        setUnmetRequirements(newCourses);\n    }, [props.requirements, courses.courseList]);\n\n    if (\n        newName &&\n            newEnd &&\n            newStart &&\n            !submissionAllowed &&\n            !hasError(problems.value)\n    ) {\n        setSubmissionAllowed(true);\n    } else if (\n        (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n            submissionAllowed\n    ) {\n        setSubmissionAllowed(false);\n    }\n    return (\n        <>\n            <button\n                onClick={() => {\n                    years.clear();\n                }}\n                data-testid=\"clear-button\"\n            >\n                    Clear\n            </button>\n            <div>\n                {years.value.map((props: YearProps) => {\n                    return (\n                        <Year\n                            key={props.uuid}\n                            clearYear = {() => {\n                                years.clear(props.uuid);\n                            }}\n                            removeSemester={(semesterUuid: string) => {\n                                years.removeSemester(props.uuid,semesterUuid);\n                            }}\n                            courses={courses}\n                            index={props.index}\n                            uuid={props.uuid}\n                            handleSemesterSubmit={handleSemesterSubmit}\n                            handleSemesterInput={handleSemesterInput}\n                            semesters={props.semesters}\n                            currentForm={currentForm}\n                            setForm={setForm}\n                            submissionAllowed={submissionAllowed}\n                        />);\n                })}\n                <button\n                    data-testid=\"add-year-button\"\n                    onClick={() => {\n                        years.push(uuid(), years.value.length+1);\n                    }}\n                >\n                        +\n                </button>\n            </div>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Degree Requirements</th>\n                        <th>Unmet Requirements</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>School of Engineering</td>\n                        <td>{unmetRequirements.join(\", \")}</td>\n                    </tr>\n                </tbody>\n            </Table>\n            <ErrorStack problems={problems.value} />\n        </>\n    );\n}\n","import { getByUUID, Years } from \"../../hooks/useYears\";\nimport validate from \"../validation/dates\";\nimport { ChangeEvent } from \"react\";\nimport { ProblemsInterface } from \"../../hooks/useProblems\";\nimport {v4 as uuid} from \"uuid\";\nimport { FormEvent } from \"react\";\n\nexport function handleSemesterFormInput(event: ChangeEvent<HTMLInputElement>, newStart: string | null, newEnd: string | null, setNewName: (name: string | null) => void, setNewStart: (start: string | null) => void, setNewEnd: (end: string | null) => void, years: Years, currentForm: string | null, problems: ProblemsInterface): void{\n    switch (event.target.name) {\n    case \"season\": {\n        setNewName(event.target.value);\n        break;\n    }\n    case \"starts\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newDate,\n            newEnd !== null ? new Date(newEnd) : null,\n            semesters,\n            \"starts\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewStart(event.target.value);\n        break;\n    }\n    case \"ends\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newStart !== null ? new Date(newStart) : null,\n            newDate,\n            semesters,\n            \"ends\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewEnd(event.target.value);\n        break;\n    }\n    }\n}\n\nexport function handleSemesterFormSubmit(event: FormEvent<HTMLFormElement>, id: string, newName: string | null, newStart: string | null, newEnd: string | null, resetForm: () => void, addSemester: (id: string, uuid: string, start: Date, end: Date, name: string) => void): void{\n    event.preventDefault();\n    if (newName !== null && newEnd !== null && newStart !== null) {\n        addSemester(\n            id,\n            uuid(),\n            new Date(newStart),\n            new Date(newEnd),\n            newName\n        );\n        resetForm();\n    }\n}","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3>School of Engineering Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n            <Link to=\"/\">\n                <Button className=\"my-3\">Back</Button>\n            </Link>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    Link,\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport Plan from \"./components/Plan\";\nimport { Button } from \"react-bootstrap\";\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\n//import ReactDOM from \"react-dom\";\n\n// Master Plan View\nexport const IndexPage: React.FC = () => {\n    return (\n        <>\n            <div>\n                <h1 className=\"center\">UD CIS Scheduler</h1>\n                <h3 className=\"center\">Designed By: Lucas, Max, and Amani</h3>\n                <div role=\"alert\" className=\"welcome\">\n                    <p>Welcome to the UD Degree Planner!</p>\n                    <b>Click Add/Edit Plan below to Get Started</b>\n                </div>\n                <Plan/>\n            </div>\n            <Link to=\"/Requirements\">\n                <Button className=\"my-2\">Modify Requirements</Button>\n            </Link>\n        </>\n    );\n};\n\ntype PlansPageProps = RouteComponentProps & {\n    requirements: string[];\n};\n\nexport const PlansPage: FC<PlansPageProps> = (props) => {\n    return (\n        <>\n            <Scheduler requirements={props.requirements} />\n            <Link to=\"/\">\n                <Button data-testid=\"back-button\">Back</Button>\n            </Link>\n        </>\n    );\n};\n\nfunction App(): JSX.Element {\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        \n        <div className=\"container\">\n            <HashRouter>\n                <Switch>\n                    <Router>\n                        <Route\n                            path=\"/Plans/:uuid\"\n                            render={(props) => \n                                <PlansPage\n                                    {...props}\n                                    requirements={requirements}\n                                />\n                            }\n                        ></Route>\n                        <Route\n                            path=\"/Requirements\"\n                            render={(props) => \n                                <Requirements\n                                    {...props}\n                                    requirements={requirements}\n                                    onAddRequirement={addRequirement}\n                                    onRemoveRequirement={removeRequirement}\n                                />\n                            }\n                        ></Route>\n                        <Route exact path=\"/\" component={IndexPage}></Route>\n                    </Router>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}