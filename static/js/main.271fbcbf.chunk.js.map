{"version":3,"sources":["hooks/useYears.ts","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/Year.tsx","components/Scheduler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["semesterReducer","prev","action","next","map","x","type","semAction","targetIndex","state","uuid","i","length","getByUUID","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","courses","Map","index","addYear","newYear2","Error","initializer","init","undefined","useYears","useReducer","updateSemesters","value","putSemester","AddCourse","props","isOpen","ReactDOM","createPortal","className","onClick","onClickClose","Form","onSubmit","onClickSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","defaultValue","defaultValues","courseName","onChange","Text","href","courseID","courseDescription","style","height","Button","variant","document","getElementById","body","Course","courseReducer","set","payload","id","courseInit","Semester","useState","setIsOpen","newCourseName","setNewCourseName","newCourseID","setNewCourseID","newCourseDescription","setNewCourseDescription","updateCourses","addedCourses","from","course","event","preventDefault","description","handleCourseSubmit","Year","overlayButton","useRef","sortedSemesters","useMemo","sort","a","b","getTime","Container","trigger","transitionTime","semesterProps","ref","setFormUuid","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","handleSubmit","handleInput","Scheduler","csv","json","years","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","handleSemesterInput","Date","handleSemesterSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.271fbcbf.chunk.js","sourcesContent":["import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction {\n    type:\n        | \"ADD YEAR\"\n        | \"DELETE YEAR\"\n        | \"UPDATE SEMESTER\"\n        | \"ADD SEMESTER\"\n        | \"DELETE SEMESTER\"\n        | \"ADD COURSE\";\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nfunction getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction semesterReducer(\n    prev: Array<YearProps>,\n    action: AbstractAction\n): Array<YearProps> {\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n            courses: new Map<string, CourseProps>(),\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction initializer(init?: Array<YearProps>): Array<YearProps> {\n    if (init !== undefined) {\n        return init;\n    } else {\n        return new Array<YearProps>();\n    }\n}\n\ninterface Years {\n    value: Array<YearProps>;\n    push: (uuid: string, index: number) => void;\n    putSemester: (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => void;\n}\n\nfunction useYears(init?: Array<YearProps>): Years {\n    const [semesters, updateSemesters] = useReducer(\n        semesterReducer,\n        init,\n        initializer\n    );\n\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        };\n        updateSemesters(action);\n    };\n    const addSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        const action: AddSemesterAction = {\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        };\n        updateSemesters(action);\n    };\n    return { value: semesters, push: addYear, putSemester: addSemester };\n}\n\nexport default useYears;\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\n\ninterface AddNewCourseProps {\n    isOpen: boolean;\n    defaultValues: {\n        courseName: string;\n        courseID: string;\n        courseDescription: string;\n    };\n    onClickClose: () => void;\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst AddCourse = (props: AddNewCourseProps): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            {/* <div className=\"non-modal-overlay\" /> */}\n            <div className=\"modal-add-course\">\n                <button onClick={props.onClickClose}>Close Button</button>\n\n                <Form onSubmit={props.onClickSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                defaultValue={props.defaultValues.courseName}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"courseID\"\n                                placeholder=\"eg. CISC220\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.courseID}\n                            />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            defaultValue={props.defaultValues.courseDescription}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Add Course\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nconst Course = (props: CourseProps): JSX.Element => {\n    return <div> {props.name}</div>;\n};\n\nexport default Course;\n","import React, { FormEvent, useReducer, useState } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\n\ninterface AddCourseAction {\n    type: \"ADD COURSE\";\n    payload: CourseProps;\n}\n// easy access to the courses\n\nconst courseReducer = (\n    state: Map<string, CourseProps>,\n    action: AddCourseAction\n): Map<string, CourseProps> => {\n    switch (action.type) {\n    case \"ADD COURSE\":\n        return state.set(action.payload.id, action.payload);\n    }\n};\n\nconst courseInit = (\n    courses: Map<string, CourseProps>\n): Map<string, CourseProps> => {\n    if (courses) return courses;\n    else return new Map<string, CourseProps>();\n};\nconst Semester = (props: SemesterProps): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [newCourseName, setNewCourseName] = useState<string>(\"\");\n    const [newCourseID, setNewCourseID] = useState<string>(\"\");\n    const [newCourseDescription, setNewCourseDescription] =\n        useState<string>(\"\");\n\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        props.courses,\n        courseInit\n    );\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        switch (event.target.name) {\n        case \"courseName\":\n            setNewCourseName(event.target.value);\n            break;\n        case \"courseID\":\n            setNewCourseID(event.target.value);\n            break;\n        case \"courseDescription\":\n            setNewCourseDescription(event.target.value);\n            break;\n        }\n    };\n    const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newCourse: CourseProps = {\n            id: newCourseID,\n            name: newCourseName,\n            description: newCourseDescription,\n        };\n\n        const action: AddCourseAction = {\n            type: \"ADD COURSE\",\n            payload: newCourse,\n        };\n\n        updateCourses(action);\n        setNewCourseName(\"\");\n        setNewCourseDescription(\"\");\n        setNewCourseID(\"\");\n    };\n    const addedCourses = Array.from(courses).map(\n        ([courseID, course]: [string, CourseProps]) => {\n            return (\n                <div key={courseID}>\n                    <Course {...course} />{\" \"}\n                </div>\n            );\n        }\n    );\n\n    return (\n        <>\n            <AddCourse\n                defaultValues={{\n                    courseName: newCourseName,\n                    courseID: newCourseID,\n                    courseDescription: newCourseDescription,\n                }}\n                isOpen={isOpen}\n                onClickClose={() => setIsOpen(false)}\n                onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                    handleCourseSubmit(event);\n                }}\n                onChange={handleOnChange}\n            ></AddCourse>\n\n            {props.name}\n            <button\n                className=\"trigger\"\n                onClick={() => {\n                    setIsOpen(true);\n                }}\n                data-testid=\"add-course-button\"\n            >\n                +\n            </button>\n            <div className=\"courses\">{addedCourses}</div>\n        </>\n    );\n};\n\nexport default Semester;\n","import React, { ChangeEvent, FormEvent, useRef, useMemo } from \"react\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {\n    Container,\n    Row,\n    Col,\n    Popover,\n    PopoverContent,\n    Overlay,\n} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport Semester from \"./Semester\";\n\ninterface FullYearProps extends YearProps {\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    formUuid: string | null;\n    setFormUuid: (newId: string | null) => void;\n}\n\nfunction Year(props: FullYearProps): JSX.Element {\n    const overlayButton = useRef(null);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters.sort((a: SemesterProps, b: SemesterProps) => {\n            return a.start.getTime() - b.start.getTime();\n        });\n    }, [props.semesters]);\n    return (\n        <Container className=\"container-sm\">\n            <Col>\n                <Collapsible\n                    trigger={\n                        <button\n                            data-testid={`Year ${props.index} label`}\n                            className=\"trigger\"\n                        >{`Year ${props.index} >`}</button>\n                    }\n                    transitionTime={200}\n                >\n                    <Row data-testid=\"collapsible-content\">\n                        {sortedSemesters.map(\n                            (semesterProps: SemesterProps, index: number) => {\n                                return (\n                                    <Col\n                                        data-testid={`Year ${\n                                            props.index\n                                        } semester ${index + 1}`}\n                                        key={semesterProps.uuid}\n                                    >\n                                        <Semester {...semesterProps}></Semester>\n                                    </Col>\n                                );\n                            }\n                        )}\n\n                        <Col>\n                            <button\n                                data-testid={`trigger ${props.index}`}\n                                className=\"trigger\"\n                                ref={overlayButton}\n                                onClick={() => {\n                                    props.setFormUuid(\n                                        props.formUuid === props.uuid\n                                            ? null\n                                            : props.uuid\n                                    );\n                                }}\n                            >\n                                +\n                            </button>\n                            <Overlay\n                                target={overlayButton}\n                                placement=\"right-end\"\n                                show={props.formUuid === props.uuid}\n                                onHide={() => {\n                                    props.setFormUuid(null);\n                                }}\n                                rootClose={true}\n                                transition={false}\n                            >\n                                <Popover id=\"popover-basic\">\n                                    <PopoverContent>\n                                        <form\n                                            data-testid={`semester-form ${props.index}`}\n                                            onSubmit={props.handleSubmit}\n                                        >\n                                            <label>season:</label>\n                                            <input\n                                                data-testid=\"season-input\"\n                                                type=\"text\"\n                                                name=\"season\"\n                                                onChange={props.handleInput}\n                                            />\n                                            <br />\n                                            <label>starts:</label>\n                                            <input\n                                                data-testid=\"starts-input\"\n                                                type=\"date\"\n                                                name=\"starts\"\n                                                onChange={props.handleInput}\n                                            />\n                                            <br />\n                                            <label>ends:</label>\n                                            <input\n                                                data-testid=\"ends-input\"\n                                                type=\"date\"\n                                                name=\"ends\"\n                                                onChange={props.handleInput}\n                                            />\n                                            <br />\n                                            <input\n                                                data-testid=\"submit-button\"\n                                                type=\"submit\"\n                                                value=\"submit\"\n                                            />\n                                        </form>\n                                    </PopoverContent>\n                                </Popover>\n                            </Overlay>\n                        </Col>\n                    </Row>\n                </Collapsible>\n            </Col>\n        </Container>\n    );\n}\n\nexport default Year;\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\nimport useYears from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Year from \"./Year\";\n\ninterface SchedulerProps {\n    csv?: string;\n    json?: string;\n}\nexport function Scheduler(props: SchedulerProps): JSX.Element {\n    if (props.csv === undefined && props.json === undefined) {\n        const years = useYears([\n            { index: 1, uuid: uuid(), semesters: new Array<SemesterProps>() },\n        ]);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n            case \"season\":\n                setNewName(event.target.value);\n                break;\n            case \"starts\":\n                setNewStart(event.target.value);\n                break;\n            case \"ends\":\n                setNewEnd(event.target.value);\n                break;\n            }\n        };\n        const handleSemesterSubmit = (\n            event: FormEvent<HTMLFormElement>,\n            id: string\n        ) => {\n            event.preventDefault();\n            if (newName !== null && newEnd !== null && newStart !== null) {\n                years.putSemester(\n                    id,\n                    uuid(),\n                    new Date(newStart as string),\n                    new Date(newEnd as string),\n                    newName as string\n                );\n                setNewName(null);\n                setNewStart(null);\n                setNewEnd(null);\n                setCurrentForm(null);\n            }\n        };\n        return (\n            <div>\n                {years.value.map((props: YearProps, i: number) => {\n                    return (\n                        <div data-testid={\"Year\"} key={props.uuid}>\n                            <Year\n                                handleInput={handleSemesterInput}\n                                handleSubmit={(\n                                    event: FormEvent<HTMLFormElement>\n                                ) => {\n                                    handleSemesterSubmit(event, props.uuid);\n                                }}\n                                semesters={props.semesters}\n                                uuid={props.uuid}\n                                index={i + 1}\n                                formUuid={currentForm}\n                                setFormUuid={setCurrentForm}\n                            />\n                        </div>\n                    );\n                })}\n                <button\n                    data-testid=\"addYearButton\"\n                    onClick={() => {\n                        years.push(uuid(), years.value.length);\n                    }}\n                >\n                    +\n                </button>\n            </div>\n        );\n    }\n    return <></>;\n}\n","import React from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Scheduler } from \"./components/Scheduler\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <Scheduler/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}