{"version":3,"sources":["hooks/useYears.ts","components/Year.tsx","components/Scheduler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["semesterReducer","prev","action","next","map","x","type","semAction","targetIndex","state","uuid","i","length","getByUUID","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","courses","Map","index","addYear","newYear2","Error","initializer","init","undefined","useYears","useReducer","updateSemesters","value","putSemester","Year","React","forwardRef","props","ref","overlayButton","useRef","useState","visible","setVisible","sortedSemesters","useMemo","sort","a","b","getTime","Container","className","Col","onOpening","onClose","trigger","transitionTime","Row","hidden","semester","onClick","setFormUuid","formUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","id","PopoverContent","onSubmit","handleSubmit","onChange","handleInput","displayName","Scheduler","csv","json","years","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","currentForm","setCurrentForm","handleSemesterInput","event","preventDefault","Date","handleSemesterSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afd6dd21.chunk.js","sourcesContent":["import { useReducer } from \"react\";\nimport CourseProps from \"../interfaces/Course\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Props\";\ninterface AbstractAction{\n    type: \"ADD YEAR\" | \"DELETE YEAR\" | \"UPDATE SEMESTER\" | \"ADD SEMESTER\" | \"DELETE SEMESTER\",\n    uuid: string\n}\n\nexport interface AddSemesterAction extends AbstractAction{\n    type: \"ADD SEMESTER\",\n    semesterUuid: string,\n    name: string,\n    start: Date,\n    end: Date,\n}\n\nexport interface AddYearAction extends AbstractAction{\n    type: \"ADD YEAR\",\n    uuid: string,\n    index: number\n}\n\nfunction getByUUID<T extends AbstractProps>(state: Array<T>, uuid: string): number{\n    for(let i = 0;i < state.length; i++){\n        if(state[i].uuid === uuid){\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction semesterReducer(prev: Array<YearProps> ,action: AbstractAction): Array<YearProps>{\n    const next = prev.map((x: YearProps) => {\n        return x;\n    });\n    switch(action.type){\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next,semAction.uuid);\n        const target: YearProps = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(target.semesters);\n        newYear1.push({name: semAction.name, start: semAction.start, end: semAction.end, uuid: semAction.semesterUuid, courses: new Map<string,CourseProps>()});\n        next[targetIndex] = {index: next[targetIndex].index, uuid: next[targetIndex].uuid, semesters: newYear1};\n        return next;\n    }case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearProps = {index: addYear.index, uuid: addYear.uuid, semesters: new Array<SemesterProps>()};\n        next.push(newYear2);\n        return next;\n    }default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\n\nfunction initializer(init?: Array<YearProps>): Array<YearProps>{\n    if(init !== undefined){\n        return init;\n    }else{\n        return new Array<YearProps>();\n    }\n}\n\ninterface Years{\n    value: Array<YearProps>,\n    push: (uuid: string, index: number) => void,\n    putSemester: (uuid: string, semesterUuid: string, start: Date, end: Date, name: string) => void\n}\n\nfunction useYears(init?: Array<YearProps>): Years{\n    const [semesters, updateSemesters] = useReducer(semesterReducer,init,initializer);\n    const addYear = (uuid: string, index: number) => {\n        const action: AddYearAction = {type: \"ADD YEAR\", uuid: uuid, index: index};\n        updateSemesters(action);\n    };\n    const addSemester = (uuid: string, semesterUuid: string, start: Date, end: Date, name: string) => {\n        const action: AddSemesterAction = {type: \"ADD SEMESTER\", uuid: uuid, name: name, start: start, end: end, semesterUuid: semesterUuid};\n        updateSemesters(action);\n    };\n    return {value: semesters, push: addYear, putSemester: addSemester};\n}\n\nexport default useYears;","import React, {ChangeEvent, FormEvent, useRef, useMemo, useState} from \"react\";\nimport {YearProps} from \"../interfaces/Year\";\nimport Collapsible from \"react-collapsible\";\nimport {Container, Row, Col, Popover, PopoverContent, Overlay} from \"react-bootstrap\";\nimport SemesterProps from \"../interfaces/Semester\";\n\ninterface FullYearProps extends YearProps{\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void,\n    handleInput: (event: ChangeEvent<HTMLInputElement>) => void,\n    formUuid: string | null,\n    setFormUuid: (newId: string | null) => void\n}\n\nconst Year = React.forwardRef((props: FullYearProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const overlayButton = useRef(null);\n    const [visible, setVisible] = useState(false);\n    const sortedSemesters = useMemo(() => {\n        return props.semesters.sort((a: SemesterProps, b: SemesterProps) => {\n            return b.start.getTime() - a.start.getTime();\n        });\n    },[props.semesters]);\n    return (\n        <Container className=\"container-sm\" ref={ref}>\n            <Col>\n                <Collapsible onOpening={() => {\n                    setVisible(true);\n                }} onClose={() =>{\n                    setVisible(false);  \n                }}trigger={<button data-testid={`Year ${props.index} label`} className=\"trigger\">{`Year ${props.index} >`}</button>} transitionTime={200}>\n                    <Row hidden={!visible}>\n                        {sortedSemesters.map((semester: SemesterProps) => {\n                            return (\n                                <Col key={semester.uuid}>{semester.name}</Col>\n                            );\n                        })}\n                        <Col>\n                            <button data-testid=\"trigger\" className=\"trigger\" ref={overlayButton} onClick={() => {\n                                props.setFormUuid(props.formUuid === props.uuid ? null : props.uuid);\n                            }}>+</button>\n                            <Overlay target={overlayButton} placement=\"right-end\" show={props.formUuid === props.uuid} onHide={() => {\n                                props.setFormUuid(null);\n                            }}rootClose={true} transition={false}>\n                                <Popover id=\"popover-basic\">\n                                    <PopoverContent>\n                                        <form data-testid=\"semester-form\" onSubmit={props.handleSubmit}>\n                                            <label>\n                                                season: \n                                            </label>\n                                            <input data-testid=\"season-input\" type=\"text\" name=\"season\" onChange={props.handleInput}/>\n                                            <br/>\n                                            <label>\n                                                starts:\n                                            </label>\n                                            <input data-testid=\"starts-input\" type=\"date\" name=\"starts\" onChange={props.handleInput}/>\n                                            <br/>\n                                            <label>\n                                                ends:\n                                            </label>\n                                            <input data-testid=\"ends-input\" type=\"date\" name=\"ends\" onChange={props.handleInput}/>\n                                            <br/>\n                                            <input data-testid=\"submit-button\" type=\"submit\" value=\"submit\" />\n                                        </form> \n                                    </PopoverContent>\n                                </Popover>\n                            </Overlay>\n                        </Col>\n                    </Row>\n                </Collapsible>\n            </Col>\n        </Container>    \n    );\n});\nYear.displayName=\"Year\";\n\nexport default Year;","import React, {ChangeEvent, FormEvent, useState} from \"react\";\nimport useYears from \"../hooks/useYears\";\nimport {v4 as uuid} from \"uuid\";\nimport SemesterProps from \"../interfaces/Semester\";\nimport { YearProps } from \"../interfaces/Year\";\nimport Year from \"./Year\";\ninterface SchedulerProps{\n    csv?: string,\n    json?: string\n}\nexport function Scheduler(props: SchedulerProps): JSX.Element{\n    if(props.csv === undefined && props.json === undefined){\n        const years = useYears([{index: 1, uuid: uuid(), semesters: new Array<SemesterProps>()}]);\n        const [newName, setNewName] = useState<string | null>(null);\n        const [newStart, setNewStart] = useState<string | null>(null);\n        const [newEnd, setNewEnd] = useState<string | null>(null);\n        const [currentForm, setCurrentForm] = useState<string | null>(null);\n        const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n            switch(event.target.name){\n            case \"season\":\n                setNewName(event.target.value);\n                break;\n            case \"starts\":\n                setNewStart(event.target.value);\n                break;\n            case \"ends\":\n                setNewEnd(event.target.value);\n                break;\n            }\n        };\n        const handleSemesterSubmit = (event: FormEvent<HTMLFormElement>,id: string) => {\n            event.preventDefault();\n            years.putSemester(id, uuid(),new Date(newStart as string),new Date(newEnd as string),newName as string);\n        };\n        return (\n            <div>\n                {years.value.map((props: YearProps, i: number) => {\n                    return (\n                        <div data-testid={\"Year\"} key={props.uuid}>\n                            <Year handleInput={handleSemesterInput} handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                                handleSemesterSubmit(event,props.uuid);\n                            }} semesters={props.semesters} uuid={props.uuid} index={i+1} formUuid={currentForm} setFormUuid={setCurrentForm}/>\n                        </div>\n                    );\n                })}\n                <button data-testid=\"addYearButton\" onClick={() => {\n                    years.push(uuid(),years.value.length);\n                }}>+</button>\n            </div>\n        );\n    }\n    return <></>;\n}","import React from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Scheduler } from \"./components/Scheduler\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <Scheduler/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}